//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LibvirtRemote {
    
    
    public partial class VirtClient {
        
        public async Task DomainOpenNamespaceAsync(Binding.RemoteNonnullDomain dom, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.LxcDomainOpenNamespaceArgs();
            innerReq.Dom = dom;
            innerReq.Flags = flags;
            var innerTask = this.DomainOpenNamespaceWrappedAsync(innerReq, cancellationToken);
            await innerTask;
        }
        
        public async Task DomainOpenNamespaceWrappedAsync(Binding.LxcDomainOpenNamespaceArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Xdr.XdrVoid, Binding.LxcProcedure>(Binding.LxcProcedure.LxcProcDomainOpenNamespace, arg, cancellationToken);
            await innerTask;
        }
        
        public async Task<string> DomainMonitorCommandAsync(Binding.RemoteNonnullDomain dom, string cmd, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.QemuDomainMonitorCommandArgs();
            innerReq.Dom = dom;
            innerReq.Cmd = cmd;
            innerReq.Flags = flags;
            var innerTask = this.DomainMonitorCommandWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerResult = innerRes.Result;
            return innerResult;
        }
        
        public async Task<Binding.QemuDomainMonitorCommandRet> DomainMonitorCommandWrappedAsync(Binding.QemuDomainMonitorCommandArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.QemuDomainMonitorCommandRet, Binding.QemuProcedure>(Binding.QemuProcedure.QemuProcDomainMonitorCommand, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<Binding.RemoteNonnullDomain> DomainAttachAsync(uint pidValue, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.QemuDomainAttachArgs();
            innerReq.PidValue = pidValue;
            innerReq.Flags = flags;
            var innerTask = this.DomainAttachWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerDom = innerRes.Dom;
            return innerDom;
        }
        
        public async Task<Binding.QemuDomainAttachRet> DomainAttachWrappedAsync(Binding.QemuDomainAttachArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.QemuDomainAttachRet, Binding.QemuProcedure>(Binding.QemuProcedure.QemuProcDomainAttach, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<Xdr.XdrOption<string>> DomainAgentCommandAsync(Binding.RemoteNonnullDomain dom, string cmd, int timeout, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.QemuDomainAgentCommandArgs();
            innerReq.Dom = dom;
            innerReq.Cmd = cmd;
            innerReq.Timeout = timeout;
            innerReq.Flags = flags;
            var innerTask = this.DomainAgentCommandWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerResult = innerRes.Result;
            return innerResult;
        }
        
        public async Task<Binding.QemuDomainAgentCommandRet> DomainAgentCommandWrappedAsync(Binding.QemuDomainAgentCommandArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.QemuDomainAgentCommandRet, Binding.QemuProcedure>(Binding.QemuProcedure.QemuProcDomainAgentCommand, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<int> ConnectDomainMonitorEventRegisterAsync(Xdr.XdrOption<Binding.RemoteNonnullDomain> dom, Xdr.XdrOption<string> @event, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.QemuConnectDomainMonitorEventRegisterArgs();
            innerReq.Dom = dom;
            innerReq.Event = @event;
            innerReq.Flags = flags;
            var innerTask = this.ConnectDomainMonitorEventRegisterWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerCallbackId = innerRes.CallbackId;
            return innerCallbackId;
        }
        
        public async Task<Binding.QemuConnectDomainMonitorEventRegisterRet> ConnectDomainMonitorEventRegisterWrappedAsync(Binding.QemuConnectDomainMonitorEventRegisterArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.QemuConnectDomainMonitorEventRegisterRet, Binding.QemuProcedure>(Binding.QemuProcedure.QemuProcConnectDomainMonitorEventRegister, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task ConnectDomainMonitorEventDeregisterAsync(int callbackId, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.QemuConnectDomainMonitorEventDeregisterArgs();
            innerReq.CallbackId = callbackId;
            var innerTask = this.ConnectDomainMonitorEventDeregisterWrappedAsync(innerReq, cancellationToken);
            await innerTask;
        }
        
        public async Task ConnectDomainMonitorEventDeregisterWrappedAsync(Binding.QemuConnectDomainMonitorEventDeregisterArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Xdr.XdrVoid, Binding.QemuProcedure>(Binding.QemuProcedure.QemuProcConnectDomainMonitorEventDeregister, arg, cancellationToken);
            await innerTask;
        }
        
        public async Task<string> DomainMonitorCommandWithFilesAsync(Binding.RemoteNonnullDomain dom, string cmd, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.QemuDomainMonitorCommandWithFilesArgs();
            innerReq.Dom = dom;
            innerReq.Cmd = cmd;
            innerReq.Flags = flags;
            var innerTask = this.DomainMonitorCommandWithFilesWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerResult = innerRes.Result;
            return innerResult;
        }
        
        public async Task<Binding.QemuDomainMonitorCommandWithFilesRet> DomainMonitorCommandWithFilesWrappedAsync(Binding.QemuDomainMonitorCommandWithFilesArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.QemuDomainMonitorCommandWithFilesRet, Binding.QemuProcedure>(Binding.QemuProcedure.QemuProcDomainMonitorCommandWithFiles, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task ConnectOpenAsync(Xdr.XdrOption<string> name, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteConnectOpenArgs();
            innerReq.Name = name;
            innerReq.Flags = flags;
            var innerTask = this.ConnectOpenWrappedAsync(innerReq, cancellationToken);
            await innerTask;
        }
        
        public async Task ConnectOpenWrappedAsync(Binding.RemoteConnectOpenArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Xdr.XdrVoid, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcConnectOpen, arg, cancellationToken);
            await innerTask;
        }
        
        public async Task ConnectCloseAsync(System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.ConnectCloseWrappedAsync(cancellationToken);
            await innerTask;
        }
        
        public async Task ConnectCloseWrappedAsync(System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Xdr.XdrVoid, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcConnectClose, null, cancellationToken);
            await innerTask;
        }
        
        public async Task<string> ConnectGetTypeAsync(System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.ConnectGetTypeWrappedAsync(cancellationToken);
            var innerRes = await innerTask;
            var innerType = innerRes.Type;
            return innerType;
        }
        
        public async Task<Binding.RemoteConnectGetTypeRet> ConnectGetTypeWrappedAsync(System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteConnectGetTypeRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcConnectGetType, null, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<ulong> ConnectGetVersionAsync(System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.ConnectGetVersionWrappedAsync(cancellationToken);
            var innerRes = await innerTask;
            var innerHvVer = innerRes.HvVer;
            return innerHvVer;
        }
        
        public async Task<Binding.RemoteConnectGetVersionRet> ConnectGetVersionWrappedAsync(System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteConnectGetVersionRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcConnectGetVersion, null, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<int> ConnectGetMaxVcpusAsync(Xdr.XdrOption<string> type, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteConnectGetMaxVcpusArgs();
            innerReq.Type = type;
            var innerTask = this.ConnectGetMaxVcpusWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerMaxVcpus = innerRes.MaxVcpus;
            return innerMaxVcpus;
        }
        
        public async Task<Binding.RemoteConnectGetMaxVcpusRet> ConnectGetMaxVcpusWrappedAsync(Binding.RemoteConnectGetMaxVcpusArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteConnectGetMaxVcpusRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcConnectGetMaxVcpus, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<Binding.RemoteNodeGetInfoRet> NodeGetInfoAsync(System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.NodeGetInfoWrappedAsync(cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<Binding.RemoteNodeGetInfoRet> NodeGetInfoWrappedAsync(System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteNodeGetInfoRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcNodeGetInfo, null, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<string> ConnectGetCapabilitiesAsync(System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.ConnectGetCapabilitiesWrappedAsync(cancellationToken);
            var innerRes = await innerTask;
            var innerCapabilities = innerRes.Capabilities;
            return innerCapabilities;
        }
        
        public async Task<Binding.RemoteConnectGetCapabilitiesRet> ConnectGetCapabilitiesWrappedAsync(System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteConnectGetCapabilitiesRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcConnectGetCapabilities, null, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task DomainAttachDeviceAsync(Binding.RemoteNonnullDomain dom, string xml, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainAttachDeviceArgs();
            innerReq.Dom = dom;
            innerReq.Xml = xml;
            var innerTask = this.DomainAttachDeviceWrappedAsync(innerReq, cancellationToken);
            await innerTask;
        }
        
        public async Task DomainAttachDeviceWrappedAsync(Binding.RemoteDomainAttachDeviceArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Xdr.XdrVoid, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainAttachDevice, arg, cancellationToken);
            await innerTask;
        }
        
        public async Task DomainCreateAsync(Binding.RemoteNonnullDomain dom, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainCreateArgs();
            innerReq.Dom = dom;
            var innerTask = this.DomainCreateWrappedAsync(innerReq, cancellationToken);
            await innerTask;
        }
        
        public async Task DomainCreateWrappedAsync(Binding.RemoteDomainCreateArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Xdr.XdrVoid, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainCreate, arg, cancellationToken);
            await innerTask;
        }
        
        public async Task<Binding.RemoteNonnullDomain> DomainCreateXmlAsync(string xmlDesc, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainCreateXmlArgs();
            innerReq.XmlDesc = xmlDesc;
            innerReq.Flags = flags;
            var innerTask = this.DomainCreateXmlWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerDom = innerRes.Dom;
            return innerDom;
        }
        
        public async Task<Binding.RemoteDomainCreateXmlRet> DomainCreateXmlWrappedAsync(Binding.RemoteDomainCreateXmlArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteDomainCreateXmlRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainCreateXml, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<Binding.RemoteNonnullDomain> DomainDefineXmlAsync(string xml, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainDefineXmlArgs();
            innerReq.Xml = xml;
            var innerTask = this.DomainDefineXmlWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerDom = innerRes.Dom;
            return innerDom;
        }
        
        public async Task<Binding.RemoteDomainDefineXmlRet> DomainDefineXmlWrappedAsync(Binding.RemoteDomainDefineXmlArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteDomainDefineXmlRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainDefineXml, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task DomainDestroyAsync(Binding.RemoteNonnullDomain dom, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainDestroyArgs();
            innerReq.Dom = dom;
            var innerTask = this.DomainDestroyWrappedAsync(innerReq, cancellationToken);
            await innerTask;
        }
        
        public async Task DomainDestroyWrappedAsync(Binding.RemoteDomainDestroyArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Xdr.XdrVoid, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainDestroy, arg, cancellationToken);
            await innerTask;
        }
        
        public async Task DomainDetachDeviceAsync(Binding.RemoteNonnullDomain dom, string xml, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainDetachDeviceArgs();
            innerReq.Dom = dom;
            innerReq.Xml = xml;
            var innerTask = this.DomainDetachDeviceWrappedAsync(innerReq, cancellationToken);
            await innerTask;
        }
        
        public async Task DomainDetachDeviceWrappedAsync(Binding.RemoteDomainDetachDeviceArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Xdr.XdrVoid, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainDetachDevice, arg, cancellationToken);
            await innerTask;
        }
        
        public async Task<string> DomainGetXmlDescAsync(Binding.RemoteNonnullDomain dom, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainGetXmlDescArgs();
            innerReq.Dom = dom;
            innerReq.Flags = flags;
            var innerTask = this.DomainGetXmlDescWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerXml = innerRes.Xml;
            return innerXml;
        }
        
        public async Task<Binding.RemoteDomainGetXmlDescRet> DomainGetXmlDescWrappedAsync(Binding.RemoteDomainGetXmlDescArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteDomainGetXmlDescRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainGetXmlDesc, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<int> DomainGetAutostartAsync(Binding.RemoteNonnullDomain dom, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainGetAutostartArgs();
            innerReq.Dom = dom;
            var innerTask = this.DomainGetAutostartWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerAutostart = innerRes.Autostart;
            return innerAutostart;
        }
        
        public async Task<Binding.RemoteDomainGetAutostartRet> DomainGetAutostartWrappedAsync(Binding.RemoteDomainGetAutostartArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteDomainGetAutostartRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainGetAutostart, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<Tuple<uint, ulong, ulong, ushort, ulong>> DomainGetInfoAsync(Binding.RemoteNonnullDomain dom, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainGetInfoArgs();
            innerReq.Dom = dom;
            var innerTask = this.DomainGetInfoWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerState = innerRes.State;
            var innerMaxMem = innerRes.MaxMem;
            var innerMemory = innerRes.Memory;
            var innerNrVirtCpu = innerRes.NrVirtCpu;
            var innerCpuTime = innerRes.CpuTime;
            return new Tuple<uint, ulong, ulong, ushort, ulong>(innerState, innerMaxMem, innerMemory, innerNrVirtCpu, innerCpuTime);
        }
        
        public async Task<Binding.RemoteDomainGetInfoRet> DomainGetInfoWrappedAsync(Binding.RemoteDomainGetInfoArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteDomainGetInfoRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainGetInfo, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<ulong> DomainGetMaxMemoryAsync(Binding.RemoteNonnullDomain dom, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainGetMaxMemoryArgs();
            innerReq.Dom = dom;
            var innerTask = this.DomainGetMaxMemoryWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerMemory = innerRes.Memory;
            return innerMemory;
        }
        
        public async Task<Binding.RemoteDomainGetMaxMemoryRet> DomainGetMaxMemoryWrappedAsync(Binding.RemoteDomainGetMaxMemoryArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteDomainGetMaxMemoryRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainGetMaxMemory, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<int> DomainGetMaxVcpusAsync(Binding.RemoteNonnullDomain dom, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainGetMaxVcpusArgs();
            innerReq.Dom = dom;
            var innerTask = this.DomainGetMaxVcpusWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerNum = innerRes.Num;
            return innerNum;
        }
        
        public async Task<Binding.RemoteDomainGetMaxVcpusRet> DomainGetMaxVcpusWrappedAsync(Binding.RemoteDomainGetMaxVcpusArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteDomainGetMaxVcpusRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainGetMaxVcpus, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<string> DomainGetOsTypeAsync(Binding.RemoteNonnullDomain dom, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainGetOsTypeArgs();
            innerReq.Dom = dom;
            var innerTask = this.DomainGetOsTypeWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerType = innerRes.Type;
            return innerType;
        }
        
        public async Task<Binding.RemoteDomainGetOsTypeRet> DomainGetOsTypeWrappedAsync(Binding.RemoteDomainGetOsTypeArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteDomainGetOsTypeRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainGetOsType, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<Tuple<System.Collections.Generic.List<Binding.RemoteVcpuInfo>, System.Collections.Generic.List<byte>>> DomainGetVcpusAsync(Binding.RemoteNonnullDomain dom, int maxinfo, int maplen, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainGetVcpusArgs();
            innerReq.Dom = dom;
            innerReq.Maxinfo = maxinfo;
            innerReq.Maplen = maplen;
            var innerTask = this.DomainGetVcpusWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerInfo = innerRes.Info;
            var innerCpumaps = innerRes.Cpumaps;
            return new Tuple<System.Collections.Generic.List<Binding.RemoteVcpuInfo>, System.Collections.Generic.List<byte>>(innerInfo, innerCpumaps);
        }
        
        public async Task<Binding.RemoteDomainGetVcpusRet> DomainGetVcpusWrappedAsync(Binding.RemoteDomainGetVcpusArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteDomainGetVcpusRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainGetVcpus, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<string> ConnectListDefinedDomainsAsync(int maxnames, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteConnectListDefinedDomainsArgs();
            innerReq.Maxnames = maxnames;
            var innerTask = this.ConnectListDefinedDomainsWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerNames = innerRes.Names;
            return innerNames;
        }
        
        public async Task<Binding.RemoteConnectListDefinedDomainsRet> ConnectListDefinedDomainsWrappedAsync(Binding.RemoteConnectListDefinedDomainsArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteConnectListDefinedDomainsRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcConnectListDefinedDomains, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<Binding.RemoteNonnullDomain> DomainLookupByIdAsync(int id, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainLookupByIdArgs();
            innerReq.Id = id;
            var innerTask = this.DomainLookupByIdWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerDom = innerRes.Dom;
            return innerDom;
        }
        
        public async Task<Binding.RemoteDomainLookupByIdRet> DomainLookupByIdWrappedAsync(Binding.RemoteDomainLookupByIdArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteDomainLookupByIdRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainLookupById, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<Binding.RemoteNonnullDomain> DomainLookupByNameAsync(string name, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainLookupByNameArgs();
            innerReq.Name = name;
            var innerTask = this.DomainLookupByNameWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerDom = innerRes.Dom;
            return innerDom;
        }
        
        public async Task<Binding.RemoteDomainLookupByNameRet> DomainLookupByNameWrappedAsync(Binding.RemoteDomainLookupByNameArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteDomainLookupByNameRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainLookupByName, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<Binding.RemoteNonnullDomain> DomainLookupByUuidAsync(byte[] uuid, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainLookupByUuidArgs();
            innerReq.Uuid = uuid;
            var innerTask = this.DomainLookupByUuidWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerDom = innerRes.Dom;
            return innerDom;
        }
        
        public async Task<Binding.RemoteDomainLookupByUuidRet> DomainLookupByUuidWrappedAsync(Binding.RemoteDomainLookupByUuidArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteDomainLookupByUuidRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainLookupByUuid, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<int> ConnectNumOfDefinedDomainsAsync(System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.ConnectNumOfDefinedDomainsWrappedAsync(cancellationToken);
            var innerRes = await innerTask;
            var innerNum = innerRes.Num;
            return innerNum;
        }
        
        public async Task<Binding.RemoteConnectNumOfDefinedDomainsRet> ConnectNumOfDefinedDomainsWrappedAsync(System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteConnectNumOfDefinedDomainsRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcConnectNumOfDefinedDomains, null, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task DomainPinVcpuAsync(Binding.RemoteNonnullDomain dom, uint vcpu, System.Collections.Generic.List<byte> cpumap, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainPinVcpuArgs();
            innerReq.Dom = dom;
            innerReq.Vcpu = vcpu;
            innerReq.Cpumap = cpumap;
            var innerTask = this.DomainPinVcpuWrappedAsync(innerReq, cancellationToken);
            await innerTask;
        }
        
        public async Task DomainPinVcpuWrappedAsync(Binding.RemoteDomainPinVcpuArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Xdr.XdrVoid, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainPinVcpu, arg, cancellationToken);
            await innerTask;
        }
        
        public async Task DomainRebootAsync(Binding.RemoteNonnullDomain dom, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainRebootArgs();
            innerReq.Dom = dom;
            innerReq.Flags = flags;
            var innerTask = this.DomainRebootWrappedAsync(innerReq, cancellationToken);
            await innerTask;
        }
        
        public async Task DomainRebootWrappedAsync(Binding.RemoteDomainRebootArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Xdr.XdrVoid, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainReboot, arg, cancellationToken);
            await innerTask;
        }
        
        public async Task DomainResumeAsync(Binding.RemoteNonnullDomain dom, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainResumeArgs();
            innerReq.Dom = dom;
            var innerTask = this.DomainResumeWrappedAsync(innerReq, cancellationToken);
            await innerTask;
        }
        
        public async Task DomainResumeWrappedAsync(Binding.RemoteDomainResumeArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Xdr.XdrVoid, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainResume, arg, cancellationToken);
            await innerTask;
        }
        
        public async Task DomainSetAutostartAsync(Binding.RemoteNonnullDomain dom, int autostart, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainSetAutostartArgs();
            innerReq.Dom = dom;
            innerReq.Autostart = autostart;
            var innerTask = this.DomainSetAutostartWrappedAsync(innerReq, cancellationToken);
            await innerTask;
        }
        
        public async Task DomainSetAutostartWrappedAsync(Binding.RemoteDomainSetAutostartArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Xdr.XdrVoid, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainSetAutostart, arg, cancellationToken);
            await innerTask;
        }
        
        public async Task DomainSetMaxMemoryAsync(Binding.RemoteNonnullDomain dom, ulong memory, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainSetMaxMemoryArgs();
            innerReq.Dom = dom;
            innerReq.Memory = memory;
            var innerTask = this.DomainSetMaxMemoryWrappedAsync(innerReq, cancellationToken);
            await innerTask;
        }
        
        public async Task DomainSetMaxMemoryWrappedAsync(Binding.RemoteDomainSetMaxMemoryArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Xdr.XdrVoid, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainSetMaxMemory, arg, cancellationToken);
            await innerTask;
        }
        
        public async Task DomainSetMemoryAsync(Binding.RemoteNonnullDomain dom, ulong memory, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainSetMemoryArgs();
            innerReq.Dom = dom;
            innerReq.Memory = memory;
            var innerTask = this.DomainSetMemoryWrappedAsync(innerReq, cancellationToken);
            await innerTask;
        }
        
        public async Task DomainSetMemoryWrappedAsync(Binding.RemoteDomainSetMemoryArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Xdr.XdrVoid, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainSetMemory, arg, cancellationToken);
            await innerTask;
        }
        
        public async Task DomainSetVcpusAsync(Binding.RemoteNonnullDomain dom, uint nvcpus, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainSetVcpusArgs();
            innerReq.Dom = dom;
            innerReq.Nvcpus = nvcpus;
            var innerTask = this.DomainSetVcpusWrappedAsync(innerReq, cancellationToken);
            await innerTask;
        }
        
        public async Task DomainSetVcpusWrappedAsync(Binding.RemoteDomainSetVcpusArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Xdr.XdrVoid, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainSetVcpus, arg, cancellationToken);
            await innerTask;
        }
        
        public async Task DomainShutdownAsync(Binding.RemoteNonnullDomain dom, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainShutdownArgs();
            innerReq.Dom = dom;
            var innerTask = this.DomainShutdownWrappedAsync(innerReq, cancellationToken);
            await innerTask;
        }
        
        public async Task DomainShutdownWrappedAsync(Binding.RemoteDomainShutdownArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Xdr.XdrVoid, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainShutdown, arg, cancellationToken);
            await innerTask;
        }
        
        public async Task DomainSuspendAsync(Binding.RemoteNonnullDomain dom, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainSuspendArgs();
            innerReq.Dom = dom;
            var innerTask = this.DomainSuspendWrappedAsync(innerReq, cancellationToken);
            await innerTask;
        }
        
        public async Task DomainSuspendWrappedAsync(Binding.RemoteDomainSuspendArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Xdr.XdrVoid, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainSuspend, arg, cancellationToken);
            await innerTask;
        }
        
        public async Task DomainUndefineAsync(Binding.RemoteNonnullDomain dom, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainUndefineArgs();
            innerReq.Dom = dom;
            var innerTask = this.DomainUndefineWrappedAsync(innerReq, cancellationToken);
            await innerTask;
        }
        
        public async Task DomainUndefineWrappedAsync(Binding.RemoteDomainUndefineArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Xdr.XdrVoid, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainUndefine, arg, cancellationToken);
            await innerTask;
        }
        
        public async Task<string> ConnectListDefinedNetworksAsync(int maxnames, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteConnectListDefinedNetworksArgs();
            innerReq.Maxnames = maxnames;
            var innerTask = this.ConnectListDefinedNetworksWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerNames = innerRes.Names;
            return innerNames;
        }
        
        public async Task<Binding.RemoteConnectListDefinedNetworksRet> ConnectListDefinedNetworksWrappedAsync(Binding.RemoteConnectListDefinedNetworksArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteConnectListDefinedNetworksRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcConnectListDefinedNetworks, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<System.Collections.Generic.List<int>> ConnectListDomainsAsync(int maxids, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteConnectListDomainsArgs();
            innerReq.Maxids = maxids;
            var innerTask = this.ConnectListDomainsWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerIds = innerRes.Ids;
            return innerIds;
        }
        
        public async Task<Binding.RemoteConnectListDomainsRet> ConnectListDomainsWrappedAsync(Binding.RemoteConnectListDomainsArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteConnectListDomainsRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcConnectListDomains, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<string> ConnectListNetworksAsync(int maxnames, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteConnectListNetworksArgs();
            innerReq.Maxnames = maxnames;
            var innerTask = this.ConnectListNetworksWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerNames = innerRes.Names;
            return innerNames;
        }
        
        public async Task<Binding.RemoteConnectListNetworksRet> ConnectListNetworksWrappedAsync(Binding.RemoteConnectListNetworksArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteConnectListNetworksRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcConnectListNetworks, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task NetworkCreateAsync(Binding.RemoteNonnullNetwork net, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteNetworkCreateArgs();
            innerReq.Net = net;
            var innerTask = this.NetworkCreateWrappedAsync(innerReq, cancellationToken);
            await innerTask;
        }
        
        public async Task NetworkCreateWrappedAsync(Binding.RemoteNetworkCreateArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Xdr.XdrVoid, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcNetworkCreate, arg, cancellationToken);
            await innerTask;
        }
        
        public async Task<Binding.RemoteNonnullNetwork> NetworkCreateXmlAsync(string xml, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteNetworkCreateXmlArgs();
            innerReq.Xml = xml;
            var innerTask = this.NetworkCreateXmlWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerNet = innerRes.Net;
            return innerNet;
        }
        
        public async Task<Binding.RemoteNetworkCreateXmlRet> NetworkCreateXmlWrappedAsync(Binding.RemoteNetworkCreateXmlArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteNetworkCreateXmlRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcNetworkCreateXml, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<Binding.RemoteNonnullNetwork> NetworkDefineXmlAsync(string xml, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteNetworkDefineXmlArgs();
            innerReq.Xml = xml;
            var innerTask = this.NetworkDefineXmlWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerNet = innerRes.Net;
            return innerNet;
        }
        
        public async Task<Binding.RemoteNetworkDefineXmlRet> NetworkDefineXmlWrappedAsync(Binding.RemoteNetworkDefineXmlArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteNetworkDefineXmlRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcNetworkDefineXml, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task NetworkDestroyAsync(Binding.RemoteNonnullNetwork net, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteNetworkDestroyArgs();
            innerReq.Net = net;
            var innerTask = this.NetworkDestroyWrappedAsync(innerReq, cancellationToken);
            await innerTask;
        }
        
        public async Task NetworkDestroyWrappedAsync(Binding.RemoteNetworkDestroyArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Xdr.XdrVoid, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcNetworkDestroy, arg, cancellationToken);
            await innerTask;
        }
        
        public async Task<string> NetworkGetXmlDescAsync(Binding.RemoteNonnullNetwork net, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteNetworkGetXmlDescArgs();
            innerReq.Net = net;
            innerReq.Flags = flags;
            var innerTask = this.NetworkGetXmlDescWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerXml = innerRes.Xml;
            return innerXml;
        }
        
        public async Task<Binding.RemoteNetworkGetXmlDescRet> NetworkGetXmlDescWrappedAsync(Binding.RemoteNetworkGetXmlDescArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteNetworkGetXmlDescRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcNetworkGetXmlDesc, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<int> NetworkGetAutostartAsync(Binding.RemoteNonnullNetwork net, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteNetworkGetAutostartArgs();
            innerReq.Net = net;
            var innerTask = this.NetworkGetAutostartWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerAutostart = innerRes.Autostart;
            return innerAutostart;
        }
        
        public async Task<Binding.RemoteNetworkGetAutostartRet> NetworkGetAutostartWrappedAsync(Binding.RemoteNetworkGetAutostartArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteNetworkGetAutostartRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcNetworkGetAutostart, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<string> NetworkGetBridgeNameAsync(Binding.RemoteNonnullNetwork net, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteNetworkGetBridgeNameArgs();
            innerReq.Net = net;
            var innerTask = this.NetworkGetBridgeNameWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerName = innerRes.Name;
            return innerName;
        }
        
        public async Task<Binding.RemoteNetworkGetBridgeNameRet> NetworkGetBridgeNameWrappedAsync(Binding.RemoteNetworkGetBridgeNameArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteNetworkGetBridgeNameRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcNetworkGetBridgeName, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<Binding.RemoteNonnullNetwork> NetworkLookupByNameAsync(string name, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteNetworkLookupByNameArgs();
            innerReq.Name = name;
            var innerTask = this.NetworkLookupByNameWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerNet = innerRes.Net;
            return innerNet;
        }
        
        public async Task<Binding.RemoteNetworkLookupByNameRet> NetworkLookupByNameWrappedAsync(Binding.RemoteNetworkLookupByNameArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteNetworkLookupByNameRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcNetworkLookupByName, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<Binding.RemoteNonnullNetwork> NetworkLookupByUuidAsync(byte[] uuid, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteNetworkLookupByUuidArgs();
            innerReq.Uuid = uuid;
            var innerTask = this.NetworkLookupByUuidWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerNet = innerRes.Net;
            return innerNet;
        }
        
        public async Task<Binding.RemoteNetworkLookupByUuidRet> NetworkLookupByUuidWrappedAsync(Binding.RemoteNetworkLookupByUuidArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteNetworkLookupByUuidRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcNetworkLookupByUuid, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task NetworkSetAutostartAsync(Binding.RemoteNonnullNetwork net, int autostart, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteNetworkSetAutostartArgs();
            innerReq.Net = net;
            innerReq.Autostart = autostart;
            var innerTask = this.NetworkSetAutostartWrappedAsync(innerReq, cancellationToken);
            await innerTask;
        }
        
        public async Task NetworkSetAutostartWrappedAsync(Binding.RemoteNetworkSetAutostartArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Xdr.XdrVoid, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcNetworkSetAutostart, arg, cancellationToken);
            await innerTask;
        }
        
        public async Task NetworkUndefineAsync(Binding.RemoteNonnullNetwork net, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteNetworkUndefineArgs();
            innerReq.Net = net;
            var innerTask = this.NetworkUndefineWrappedAsync(innerReq, cancellationToken);
            await innerTask;
        }
        
        public async Task NetworkUndefineWrappedAsync(Binding.RemoteNetworkUndefineArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Xdr.XdrVoid, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcNetworkUndefine, arg, cancellationToken);
            await innerTask;
        }
        
        public async Task<int> ConnectNumOfDefinedNetworksAsync(System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.ConnectNumOfDefinedNetworksWrappedAsync(cancellationToken);
            var innerRes = await innerTask;
            var innerNum = innerRes.Num;
            return innerNum;
        }
        
        public async Task<Binding.RemoteConnectNumOfDefinedNetworksRet> ConnectNumOfDefinedNetworksWrappedAsync(System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteConnectNumOfDefinedNetworksRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcConnectNumOfDefinedNetworks, null, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<int> ConnectNumOfDomainsAsync(System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.ConnectNumOfDomainsWrappedAsync(cancellationToken);
            var innerRes = await innerTask;
            var innerNum = innerRes.Num;
            return innerNum;
        }
        
        public async Task<Binding.RemoteConnectNumOfDomainsRet> ConnectNumOfDomainsWrappedAsync(System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteConnectNumOfDomainsRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcConnectNumOfDomains, null, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<int> ConnectNumOfNetworksAsync(System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.ConnectNumOfNetworksWrappedAsync(cancellationToken);
            var innerRes = await innerTask;
            var innerNum = innerRes.Num;
            return innerNum;
        }
        
        public async Task<Binding.RemoteConnectNumOfNetworksRet> ConnectNumOfNetworksWrappedAsync(System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteConnectNumOfNetworksRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcConnectNumOfNetworks, null, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task DomainCoreDumpAsync(Binding.RemoteNonnullDomain dom, string to, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainCoreDumpArgs();
            innerReq.Dom = dom;
            innerReq.To = to;
            innerReq.Flags = flags;
            var innerTask = this.DomainCoreDumpWrappedAsync(innerReq, cancellationToken);
            await innerTask;
        }
        
        public async Task DomainCoreDumpWrappedAsync(Binding.RemoteDomainCoreDumpArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Xdr.XdrVoid, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainCoreDump, arg, cancellationToken);
            await innerTask;
        }
        
        public async Task DomainRestoreAsync(string from, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainRestoreArgs();
            innerReq.From = from;
            var innerTask = this.DomainRestoreWrappedAsync(innerReq, cancellationToken);
            await innerTask;
        }
        
        public async Task DomainRestoreWrappedAsync(Binding.RemoteDomainRestoreArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Xdr.XdrVoid, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainRestore, arg, cancellationToken);
            await innerTask;
        }
        
        public async Task DomainSaveAsync(Binding.RemoteNonnullDomain dom, string to, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainSaveArgs();
            innerReq.Dom = dom;
            innerReq.To = to;
            var innerTask = this.DomainSaveWrappedAsync(innerReq, cancellationToken);
            await innerTask;
        }
        
        public async Task DomainSaveWrappedAsync(Binding.RemoteDomainSaveArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Xdr.XdrVoid, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainSave, arg, cancellationToken);
            await innerTask;
        }
        
        public async Task<Tuple<string, int>> DomainGetSchedulerTypeAsync(Binding.RemoteNonnullDomain dom, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainGetSchedulerTypeArgs();
            innerReq.Dom = dom;
            var innerTask = this.DomainGetSchedulerTypeWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerType = innerRes.Type;
            var innerNparams = innerRes.Nparams;
            return new Tuple<string, int>(innerType, innerNparams);
        }
        
        public async Task<Binding.RemoteDomainGetSchedulerTypeRet> DomainGetSchedulerTypeWrappedAsync(Binding.RemoteDomainGetSchedulerTypeArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteDomainGetSchedulerTypeRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainGetSchedulerType, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<System.Collections.Generic.List<Binding.RemoteTypedParam>> DomainGetSchedulerParametersAsync(Binding.RemoteNonnullDomain dom, int nparams, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainGetSchedulerParametersArgs();
            innerReq.Dom = dom;
            innerReq.Nparams = nparams;
            var innerTask = this.DomainGetSchedulerParametersWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerParams = innerRes.Params;
            return innerParams;
        }
        
        public async Task<Binding.RemoteDomainGetSchedulerParametersRet> DomainGetSchedulerParametersWrappedAsync(Binding.RemoteDomainGetSchedulerParametersArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteDomainGetSchedulerParametersRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainGetSchedulerParameters, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task DomainSetSchedulerParametersAsync(Binding.RemoteNonnullDomain dom, System.Collections.Generic.List<Binding.RemoteTypedParam> @params, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainSetSchedulerParametersArgs();
            innerReq.Dom = dom;
            innerReq.Params = @params;
            var innerTask = this.DomainSetSchedulerParametersWrappedAsync(innerReq, cancellationToken);
            await innerTask;
        }
        
        public async Task DomainSetSchedulerParametersWrappedAsync(Binding.RemoteDomainSetSchedulerParametersArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Xdr.XdrVoid, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainSetSchedulerParameters, arg, cancellationToken);
            await innerTask;
        }
        
        public async Task<string> ConnectGetHostnameAsync(System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.ConnectGetHostnameWrappedAsync(cancellationToken);
            var innerRes = await innerTask;
            var innerHostname = innerRes.Hostname;
            return innerHostname;
        }
        
        public async Task<Binding.RemoteConnectGetHostnameRet> ConnectGetHostnameWrappedAsync(System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteConnectGetHostnameRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcConnectGetHostname, null, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<int> ConnectSupportsFeatureAsync(int feature, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteConnectSupportsFeatureArgs();
            innerReq.Feature = feature;
            var innerTask = this.ConnectSupportsFeatureWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerSupported = innerRes.Supported;
            return innerSupported;
        }
        
        public async Task<Binding.RemoteConnectSupportsFeatureRet> ConnectSupportsFeatureWrappedAsync(Binding.RemoteConnectSupportsFeatureArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteConnectSupportsFeatureRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcConnectSupportsFeature, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<Tuple<System.Collections.Generic.List<byte>, Xdr.XdrOption<string>>> DomainMigratePrepareAsync(Xdr.XdrOption<string> uriIn, ulong flags, Xdr.XdrOption<string> dname, ulong bandwidth, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainMigratePrepareArgs();
            innerReq.UriIn = uriIn;
            innerReq.Flags = flags;
            innerReq.Dname = dname;
            innerReq.Bandwidth = bandwidth;
            var innerTask = this.DomainMigratePrepareWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerCookie = innerRes.Cookie;
            var innerUriOut = innerRes.UriOut;
            return new Tuple<System.Collections.Generic.List<byte>, Xdr.XdrOption<string>>(innerCookie, innerUriOut);
        }
        
        public async Task<Binding.RemoteDomainMigratePrepareRet> DomainMigratePrepareWrappedAsync(Binding.RemoteDomainMigratePrepareArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteDomainMigratePrepareRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainMigratePrepare, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task DomainMigratePerformAsync(Binding.RemoteNonnullDomain dom, System.Collections.Generic.List<byte> cookie, string uri, ulong flags, Xdr.XdrOption<string> dname, ulong bandwidth, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainMigratePerformArgs();
            innerReq.Dom = dom;
            innerReq.Cookie = cookie;
            innerReq.Uri = uri;
            innerReq.Flags = flags;
            innerReq.Dname = dname;
            innerReq.Bandwidth = bandwidth;
            var innerTask = this.DomainMigratePerformWrappedAsync(innerReq, cancellationToken);
            await innerTask;
        }
        
        public async Task DomainMigratePerformWrappedAsync(Binding.RemoteDomainMigratePerformArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Xdr.XdrVoid, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainMigratePerform, arg, cancellationToken);
            await innerTask;
        }
        
        public async Task<Binding.RemoteNonnullDomain> DomainMigrateFinishAsync(string dname, System.Collections.Generic.List<byte> cookie, string uri, ulong flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainMigrateFinishArgs();
            innerReq.Dname = dname;
            innerReq.Cookie = cookie;
            innerReq.Uri = uri;
            innerReq.Flags = flags;
            var innerTask = this.DomainMigrateFinishWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerDdom = innerRes.Ddom;
            return innerDdom;
        }
        
        public async Task<Binding.RemoteDomainMigrateFinishRet> DomainMigrateFinishWrappedAsync(Binding.RemoteDomainMigrateFinishArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteDomainMigrateFinishRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainMigrateFinish, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<Tuple<long, long, long, long, long>> DomainBlockStatsAsync(Binding.RemoteNonnullDomain dom, string path, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainBlockStatsArgs();
            innerReq.Dom = dom;
            innerReq.Path = path;
            var innerTask = this.DomainBlockStatsWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerRdReq = innerRes.RdReq;
            var innerRdBytes = innerRes.RdBytes;
            var innerWrReq = innerRes.WrReq;
            var innerWrBytes = innerRes.WrBytes;
            var innerErrs = innerRes.Errs;
            return new Tuple<long, long, long, long, long>(innerRdReq, innerRdBytes, innerWrReq, innerWrBytes, innerErrs);
        }
        
        public async Task<Binding.RemoteDomainBlockStatsRet> DomainBlockStatsWrappedAsync(Binding.RemoteDomainBlockStatsArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteDomainBlockStatsRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainBlockStats, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<Binding.RemoteDomainInterfaceStatsRet> DomainInterfaceStatsAsync(Binding.RemoteNonnullDomain dom, string device, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainInterfaceStatsArgs();
            innerReq.Dom = dom;
            innerReq.Device = device;
            var innerTask = this.DomainInterfaceStatsWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<Binding.RemoteDomainInterfaceStatsRet> DomainInterfaceStatsWrappedAsync(Binding.RemoteDomainInterfaceStatsArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteDomainInterfaceStatsRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainInterfaceStats, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<System.Collections.Generic.List<Binding.RemoteAuthType>> AuthListAsync(System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.AuthListWrappedAsync(cancellationToken);
            var innerRes = await innerTask;
            var innerTypes = innerRes.Types;
            return innerTypes;
        }
        
        public async Task<Binding.RemoteAuthListRet> AuthListWrappedAsync(System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteAuthListRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcAuthList, null, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<string> AuthSaslInitAsync(System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.AuthSaslInitWrappedAsync(cancellationToken);
            var innerRes = await innerTask;
            var innerMechlist = innerRes.Mechlist;
            return innerMechlist;
        }
        
        public async Task<Binding.RemoteAuthSaslInitRet> AuthSaslInitWrappedAsync(System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteAuthSaslInitRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcAuthSaslInit, null, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<Tuple<int, int, System.Collections.Generic.List<int>>> AuthSaslStartAsync(string mech, int nil, System.Collections.Generic.List<int> data, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteAuthSaslStartArgs();
            innerReq.Mech = mech;
            innerReq.Nil = nil;
            innerReq.Data = data;
            var innerTask = this.AuthSaslStartWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerComplete = innerRes.Complete;
            var innerNil = innerRes.Nil;
            var innerData = innerRes.Data;
            return new Tuple<int, int, System.Collections.Generic.List<int>>(innerComplete, innerNil, innerData);
        }
        
        public async Task<Binding.RemoteAuthSaslStartRet> AuthSaslStartWrappedAsync(Binding.RemoteAuthSaslStartArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteAuthSaslStartRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcAuthSaslStart, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<Tuple<int, int, System.Collections.Generic.List<int>>> AuthSaslStepAsync(int nil, System.Collections.Generic.List<int> data, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteAuthSaslStepArgs();
            innerReq.Nil = nil;
            innerReq.Data = data;
            var innerTask = this.AuthSaslStepWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerComplete = innerRes.Complete;
            var innerNil = innerRes.Nil;
            var innerData = innerRes.Data;
            return new Tuple<int, int, System.Collections.Generic.List<int>>(innerComplete, innerNil, innerData);
        }
        
        public async Task<Binding.RemoteAuthSaslStepRet> AuthSaslStepWrappedAsync(Binding.RemoteAuthSaslStepArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteAuthSaslStepRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcAuthSaslStep, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<int> AuthPolkitAsync(System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.AuthPolkitWrappedAsync(cancellationToken);
            var innerRes = await innerTask;
            var innerComplete = innerRes.Complete;
            return innerComplete;
        }
        
        public async Task<Binding.RemoteAuthPolkitRet> AuthPolkitWrappedAsync(System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteAuthPolkitRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcAuthPolkit, null, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<int> ConnectNumOfStoragePoolsAsync(System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.ConnectNumOfStoragePoolsWrappedAsync(cancellationToken);
            var innerRes = await innerTask;
            var innerNum = innerRes.Num;
            return innerNum;
        }
        
        public async Task<Binding.RemoteConnectNumOfStoragePoolsRet> ConnectNumOfStoragePoolsWrappedAsync(System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteConnectNumOfStoragePoolsRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcConnectNumOfStoragePools, null, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<string> ConnectListStoragePoolsAsync(int maxnames, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteConnectListStoragePoolsArgs();
            innerReq.Maxnames = maxnames;
            var innerTask = this.ConnectListStoragePoolsWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerNames = innerRes.Names;
            return innerNames;
        }
        
        public async Task<Binding.RemoteConnectListStoragePoolsRet> ConnectListStoragePoolsWrappedAsync(Binding.RemoteConnectListStoragePoolsArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteConnectListStoragePoolsRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcConnectListStoragePools, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<int> ConnectNumOfDefinedStoragePoolsAsync(System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.ConnectNumOfDefinedStoragePoolsWrappedAsync(cancellationToken);
            var innerRes = await innerTask;
            var innerNum = innerRes.Num;
            return innerNum;
        }
        
        public async Task<Binding.RemoteConnectNumOfDefinedStoragePoolsRet> ConnectNumOfDefinedStoragePoolsWrappedAsync(System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteConnectNumOfDefinedStoragePoolsRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcConnectNumOfDefinedStoragePools, null, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<string> ConnectListDefinedStoragePoolsAsync(int maxnames, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteConnectListDefinedStoragePoolsArgs();
            innerReq.Maxnames = maxnames;
            var innerTask = this.ConnectListDefinedStoragePoolsWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerNames = innerRes.Names;
            return innerNames;
        }
        
        public async Task<Binding.RemoteConnectListDefinedStoragePoolsRet> ConnectListDefinedStoragePoolsWrappedAsync(Binding.RemoteConnectListDefinedStoragePoolsArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteConnectListDefinedStoragePoolsRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcConnectListDefinedStoragePools, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<string> ConnectFindStoragePoolSourcesAsync(string type, Xdr.XdrOption<string> srcSpec, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteConnectFindStoragePoolSourcesArgs();
            innerReq.Type = type;
            innerReq.SrcSpec = srcSpec;
            innerReq.Flags = flags;
            var innerTask = this.ConnectFindStoragePoolSourcesWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerXml = innerRes.Xml;
            return innerXml;
        }
        
        public async Task<Binding.RemoteConnectFindStoragePoolSourcesRet> ConnectFindStoragePoolSourcesWrappedAsync(Binding.RemoteConnectFindStoragePoolSourcesArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteConnectFindStoragePoolSourcesRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcConnectFindStoragePoolSources, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<Binding.RemoteNonnullStoragePool> StoragePoolCreateXmlAsync(string xml, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteStoragePoolCreateXmlArgs();
            innerReq.Xml = xml;
            innerReq.Flags = flags;
            var innerTask = this.StoragePoolCreateXmlWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerPool = innerRes.Pool;
            return innerPool;
        }
        
        public async Task<Binding.RemoteStoragePoolCreateXmlRet> StoragePoolCreateXmlWrappedAsync(Binding.RemoteStoragePoolCreateXmlArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteStoragePoolCreateXmlRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcStoragePoolCreateXml, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<Binding.RemoteNonnullStoragePool> StoragePoolDefineXmlAsync(string xml, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteStoragePoolDefineXmlArgs();
            innerReq.Xml = xml;
            innerReq.Flags = flags;
            var innerTask = this.StoragePoolDefineXmlWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerPool = innerRes.Pool;
            return innerPool;
        }
        
        public async Task<Binding.RemoteStoragePoolDefineXmlRet> StoragePoolDefineXmlWrappedAsync(Binding.RemoteStoragePoolDefineXmlArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteStoragePoolDefineXmlRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcStoragePoolDefineXml, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task StoragePoolCreateAsync(Binding.RemoteNonnullStoragePool pool, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteStoragePoolCreateArgs();
            innerReq.Pool = pool;
            innerReq.Flags = flags;
            var innerTask = this.StoragePoolCreateWrappedAsync(innerReq, cancellationToken);
            await innerTask;
        }
        
        public async Task StoragePoolCreateWrappedAsync(Binding.RemoteStoragePoolCreateArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Xdr.XdrVoid, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcStoragePoolCreate, arg, cancellationToken);
            await innerTask;
        }
        
        public async Task StoragePoolBuildAsync(Binding.RemoteNonnullStoragePool pool, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteStoragePoolBuildArgs();
            innerReq.Pool = pool;
            innerReq.Flags = flags;
            var innerTask = this.StoragePoolBuildWrappedAsync(innerReq, cancellationToken);
            await innerTask;
        }
        
        public async Task StoragePoolBuildWrappedAsync(Binding.RemoteStoragePoolBuildArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Xdr.XdrVoid, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcStoragePoolBuild, arg, cancellationToken);
            await innerTask;
        }
        
        public async Task StoragePoolDestroyAsync(Binding.RemoteNonnullStoragePool pool, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteStoragePoolDestroyArgs();
            innerReq.Pool = pool;
            var innerTask = this.StoragePoolDestroyWrappedAsync(innerReq, cancellationToken);
            await innerTask;
        }
        
        public async Task StoragePoolDestroyWrappedAsync(Binding.RemoteStoragePoolDestroyArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Xdr.XdrVoid, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcStoragePoolDestroy, arg, cancellationToken);
            await innerTask;
        }
        
        public async Task StoragePoolDeleteAsync(Binding.RemoteNonnullStoragePool pool, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteStoragePoolDeleteArgs();
            innerReq.Pool = pool;
            innerReq.Flags = flags;
            var innerTask = this.StoragePoolDeleteWrappedAsync(innerReq, cancellationToken);
            await innerTask;
        }
        
        public async Task StoragePoolDeleteWrappedAsync(Binding.RemoteStoragePoolDeleteArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Xdr.XdrVoid, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcStoragePoolDelete, arg, cancellationToken);
            await innerTask;
        }
        
        public async Task StoragePoolUndefineAsync(Binding.RemoteNonnullStoragePool pool, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteStoragePoolUndefineArgs();
            innerReq.Pool = pool;
            var innerTask = this.StoragePoolUndefineWrappedAsync(innerReq, cancellationToken);
            await innerTask;
        }
        
        public async Task StoragePoolUndefineWrappedAsync(Binding.RemoteStoragePoolUndefineArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Xdr.XdrVoid, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcStoragePoolUndefine, arg, cancellationToken);
            await innerTask;
        }
        
        public async Task StoragePoolRefreshAsync(Binding.RemoteNonnullStoragePool pool, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteStoragePoolRefreshArgs();
            innerReq.Pool = pool;
            innerReq.Flags = flags;
            var innerTask = this.StoragePoolRefreshWrappedAsync(innerReq, cancellationToken);
            await innerTask;
        }
        
        public async Task StoragePoolRefreshWrappedAsync(Binding.RemoteStoragePoolRefreshArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Xdr.XdrVoid, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcStoragePoolRefresh, arg, cancellationToken);
            await innerTask;
        }
        
        public async Task<Binding.RemoteNonnullStoragePool> StoragePoolLookupByNameAsync(string name, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteStoragePoolLookupByNameArgs();
            innerReq.Name = name;
            var innerTask = this.StoragePoolLookupByNameWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerPool = innerRes.Pool;
            return innerPool;
        }
        
        public async Task<Binding.RemoteStoragePoolLookupByNameRet> StoragePoolLookupByNameWrappedAsync(Binding.RemoteStoragePoolLookupByNameArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteStoragePoolLookupByNameRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcStoragePoolLookupByName, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<Binding.RemoteNonnullStoragePool> StoragePoolLookupByUuidAsync(byte[] uuid, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteStoragePoolLookupByUuidArgs();
            innerReq.Uuid = uuid;
            var innerTask = this.StoragePoolLookupByUuidWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerPool = innerRes.Pool;
            return innerPool;
        }
        
        public async Task<Binding.RemoteStoragePoolLookupByUuidRet> StoragePoolLookupByUuidWrappedAsync(Binding.RemoteStoragePoolLookupByUuidArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteStoragePoolLookupByUuidRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcStoragePoolLookupByUuid, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<Binding.RemoteNonnullStoragePool> StoragePoolLookupByVolumeAsync(Binding.RemoteNonnullStorageVol vol, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteStoragePoolLookupByVolumeArgs();
            innerReq.Vol = vol;
            var innerTask = this.StoragePoolLookupByVolumeWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerPool = innerRes.Pool;
            return innerPool;
        }
        
        public async Task<Binding.RemoteStoragePoolLookupByVolumeRet> StoragePoolLookupByVolumeWrappedAsync(Binding.RemoteStoragePoolLookupByVolumeArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteStoragePoolLookupByVolumeRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcStoragePoolLookupByVolume, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<Tuple<uint, ulong, ulong, ulong>> StoragePoolGetInfoAsync(Binding.RemoteNonnullStoragePool pool, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteStoragePoolGetInfoArgs();
            innerReq.Pool = pool;
            var innerTask = this.StoragePoolGetInfoWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerState = innerRes.State;
            var innerCapacity = innerRes.Capacity;
            var innerAllocation = innerRes.Allocation;
            var innerAvailable = innerRes.Available;
            return new Tuple<uint, ulong, ulong, ulong>(innerState, innerCapacity, innerAllocation, innerAvailable);
        }
        
        public async Task<Binding.RemoteStoragePoolGetInfoRet> StoragePoolGetInfoWrappedAsync(Binding.RemoteStoragePoolGetInfoArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteStoragePoolGetInfoRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcStoragePoolGetInfo, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<string> StoragePoolGetXmlDescAsync(Binding.RemoteNonnullStoragePool pool, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteStoragePoolGetXmlDescArgs();
            innerReq.Pool = pool;
            innerReq.Flags = flags;
            var innerTask = this.StoragePoolGetXmlDescWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerXml = innerRes.Xml;
            return innerXml;
        }
        
        public async Task<Binding.RemoteStoragePoolGetXmlDescRet> StoragePoolGetXmlDescWrappedAsync(Binding.RemoteStoragePoolGetXmlDescArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteStoragePoolGetXmlDescRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcStoragePoolGetXmlDesc, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<int> StoragePoolGetAutostartAsync(Binding.RemoteNonnullStoragePool pool, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteStoragePoolGetAutostartArgs();
            innerReq.Pool = pool;
            var innerTask = this.StoragePoolGetAutostartWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerAutostart = innerRes.Autostart;
            return innerAutostart;
        }
        
        public async Task<Binding.RemoteStoragePoolGetAutostartRet> StoragePoolGetAutostartWrappedAsync(Binding.RemoteStoragePoolGetAutostartArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteStoragePoolGetAutostartRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcStoragePoolGetAutostart, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task StoragePoolSetAutostartAsync(Binding.RemoteNonnullStoragePool pool, int autostart, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteStoragePoolSetAutostartArgs();
            innerReq.Pool = pool;
            innerReq.Autostart = autostart;
            var innerTask = this.StoragePoolSetAutostartWrappedAsync(innerReq, cancellationToken);
            await innerTask;
        }
        
        public async Task StoragePoolSetAutostartWrappedAsync(Binding.RemoteStoragePoolSetAutostartArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Xdr.XdrVoid, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcStoragePoolSetAutostart, arg, cancellationToken);
            await innerTask;
        }
        
        public async Task<int> StoragePoolNumOfVolumesAsync(Binding.RemoteNonnullStoragePool pool, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteStoragePoolNumOfVolumesArgs();
            innerReq.Pool = pool;
            var innerTask = this.StoragePoolNumOfVolumesWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerNum = innerRes.Num;
            return innerNum;
        }
        
        public async Task<Binding.RemoteStoragePoolNumOfVolumesRet> StoragePoolNumOfVolumesWrappedAsync(Binding.RemoteStoragePoolNumOfVolumesArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteStoragePoolNumOfVolumesRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcStoragePoolNumOfVolumes, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<string> StoragePoolListVolumesAsync(Binding.RemoteNonnullStoragePool pool, int maxnames, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteStoragePoolListVolumesArgs();
            innerReq.Pool = pool;
            innerReq.Maxnames = maxnames;
            var innerTask = this.StoragePoolListVolumesWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerNames = innerRes.Names;
            return innerNames;
        }
        
        public async Task<Binding.RemoteStoragePoolListVolumesRet> StoragePoolListVolumesWrappedAsync(Binding.RemoteStoragePoolListVolumesArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteStoragePoolListVolumesRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcStoragePoolListVolumes, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<Binding.RemoteNonnullStorageVol> StorageVolCreateXmlAsync(Binding.RemoteNonnullStoragePool pool, string xml, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteStorageVolCreateXmlArgs();
            innerReq.Pool = pool;
            innerReq.Xml = xml;
            innerReq.Flags = flags;
            var innerTask = this.StorageVolCreateXmlWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerVol = innerRes.Vol;
            return innerVol;
        }
        
        public async Task<Binding.RemoteStorageVolCreateXmlRet> StorageVolCreateXmlWrappedAsync(Binding.RemoteStorageVolCreateXmlArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteStorageVolCreateXmlRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcStorageVolCreateXml, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task StorageVolDeleteAsync(Binding.RemoteNonnullStorageVol vol, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteStorageVolDeleteArgs();
            innerReq.Vol = vol;
            innerReq.Flags = flags;
            var innerTask = this.StorageVolDeleteWrappedAsync(innerReq, cancellationToken);
            await innerTask;
        }
        
        public async Task StorageVolDeleteWrappedAsync(Binding.RemoteStorageVolDeleteArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Xdr.XdrVoid, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcStorageVolDelete, arg, cancellationToken);
            await innerTask;
        }
        
        public async Task<Binding.RemoteNonnullStorageVol> StorageVolLookupByNameAsync(Binding.RemoteNonnullStoragePool pool, string name, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteStorageVolLookupByNameArgs();
            innerReq.Pool = pool;
            innerReq.Name = name;
            var innerTask = this.StorageVolLookupByNameWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerVol = innerRes.Vol;
            return innerVol;
        }
        
        public async Task<Binding.RemoteStorageVolLookupByNameRet> StorageVolLookupByNameWrappedAsync(Binding.RemoteStorageVolLookupByNameArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteStorageVolLookupByNameRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcStorageVolLookupByName, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<Binding.RemoteNonnullStorageVol> StorageVolLookupByKeyAsync(string key, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteStorageVolLookupByKeyArgs();
            innerReq.Key = key;
            var innerTask = this.StorageVolLookupByKeyWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerVol = innerRes.Vol;
            return innerVol;
        }
        
        public async Task<Binding.RemoteStorageVolLookupByKeyRet> StorageVolLookupByKeyWrappedAsync(Binding.RemoteStorageVolLookupByKeyArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteStorageVolLookupByKeyRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcStorageVolLookupByKey, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<Binding.RemoteNonnullStorageVol> StorageVolLookupByPathAsync(string path, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteStorageVolLookupByPathArgs();
            innerReq.Path = path;
            var innerTask = this.StorageVolLookupByPathWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerVol = innerRes.Vol;
            return innerVol;
        }
        
        public async Task<Binding.RemoteStorageVolLookupByPathRet> StorageVolLookupByPathWrappedAsync(Binding.RemoteStorageVolLookupByPathArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteStorageVolLookupByPathRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcStorageVolLookupByPath, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<Tuple<int, ulong, ulong>> StorageVolGetInfoAsync(Binding.RemoteNonnullStorageVol vol, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteStorageVolGetInfoArgs();
            innerReq.Vol = vol;
            var innerTask = this.StorageVolGetInfoWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerType = innerRes.Type;
            var innerCapacity = innerRes.Capacity;
            var innerAllocation = innerRes.Allocation;
            return new Tuple<int, ulong, ulong>(innerType, innerCapacity, innerAllocation);
        }
        
        public async Task<Binding.RemoteStorageVolGetInfoRet> StorageVolGetInfoWrappedAsync(Binding.RemoteStorageVolGetInfoArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteStorageVolGetInfoRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcStorageVolGetInfo, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<string> StorageVolGetXmlDescAsync(Binding.RemoteNonnullStorageVol vol, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteStorageVolGetXmlDescArgs();
            innerReq.Vol = vol;
            innerReq.Flags = flags;
            var innerTask = this.StorageVolGetXmlDescWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerXml = innerRes.Xml;
            return innerXml;
        }
        
        public async Task<Binding.RemoteStorageVolGetXmlDescRet> StorageVolGetXmlDescWrappedAsync(Binding.RemoteStorageVolGetXmlDescArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteStorageVolGetXmlDescRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcStorageVolGetXmlDesc, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<string> StorageVolGetPathAsync(Binding.RemoteNonnullStorageVol vol, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteStorageVolGetPathArgs();
            innerReq.Vol = vol;
            var innerTask = this.StorageVolGetPathWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerName = innerRes.Name;
            return innerName;
        }
        
        public async Task<Binding.RemoteStorageVolGetPathRet> StorageVolGetPathWrappedAsync(Binding.RemoteStorageVolGetPathArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteStorageVolGetPathRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcStorageVolGetPath, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<System.Collections.Generic.List<ulong>> NodeGetCellsFreeMemoryAsync(int startCell, int maxcells, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteNodeGetCellsFreeMemoryArgs();
            innerReq.StartCell = startCell;
            innerReq.Maxcells = maxcells;
            var innerTask = this.NodeGetCellsFreeMemoryWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerCells = innerRes.Cells;
            return innerCells;
        }
        
        public async Task<Binding.RemoteNodeGetCellsFreeMemoryRet> NodeGetCellsFreeMemoryWrappedAsync(Binding.RemoteNodeGetCellsFreeMemoryArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteNodeGetCellsFreeMemoryRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcNodeGetCellsFreeMemory, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<ulong> NodeGetFreeMemoryAsync(System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.NodeGetFreeMemoryWrappedAsync(cancellationToken);
            var innerRes = await innerTask;
            var innerFreeMem = innerRes.FreeMem;
            return innerFreeMem;
        }
        
        public async Task<Binding.RemoteNodeGetFreeMemoryRet> NodeGetFreeMemoryWrappedAsync(System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteNodeGetFreeMemoryRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcNodeGetFreeMemory, null, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<System.Collections.Generic.List<byte>> DomainBlockPeekAsync(Binding.RemoteNonnullDomain dom, string path, ulong offset, uint size, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainBlockPeekArgs();
            innerReq.Dom = dom;
            innerReq.Path = path;
            innerReq.Offset = offset;
            innerReq.Size = size;
            innerReq.Flags = flags;
            var innerTask = this.DomainBlockPeekWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerBuffer = innerRes.Buffer;
            return innerBuffer;
        }
        
        public async Task<Binding.RemoteDomainBlockPeekRet> DomainBlockPeekWrappedAsync(Binding.RemoteDomainBlockPeekArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteDomainBlockPeekRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainBlockPeek, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<System.Collections.Generic.List<byte>> DomainMemoryPeekAsync(Binding.RemoteNonnullDomain dom, ulong offset, uint size, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainMemoryPeekArgs();
            innerReq.Dom = dom;
            innerReq.Offset = offset;
            innerReq.Size = size;
            innerReq.Flags = flags;
            var innerTask = this.DomainMemoryPeekWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerBuffer = innerRes.Buffer;
            return innerBuffer;
        }
        
        public async Task<Binding.RemoteDomainMemoryPeekRet> DomainMemoryPeekWrappedAsync(Binding.RemoteDomainMemoryPeekArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteDomainMemoryPeekRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainMemoryPeek, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<int> ConnectDomainEventRegisterAsync(System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.ConnectDomainEventRegisterWrappedAsync(cancellationToken);
            var innerRes = await innerTask;
            var innerCbRegistered = innerRes.CbRegistered;
            return innerCbRegistered;
        }
        
        public async Task<Binding.RemoteConnectDomainEventRegisterRet> ConnectDomainEventRegisterWrappedAsync(System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteConnectDomainEventRegisterRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcConnectDomainEventRegister, null, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<int> ConnectDomainEventDeregisterAsync(System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.ConnectDomainEventDeregisterWrappedAsync(cancellationToken);
            var innerRes = await innerTask;
            var innerCbRegistered = innerRes.CbRegistered;
            return innerCbRegistered;
        }
        
        public async Task<Binding.RemoteConnectDomainEventDeregisterRet> ConnectDomainEventDeregisterWrappedAsync(System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteConnectDomainEventDeregisterRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcConnectDomainEventDeregister, null, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<Tuple<System.Collections.Generic.List<byte>, Xdr.XdrOption<string>>> DomainMigratePrepare2Async(Xdr.XdrOption<string> uriIn, ulong flags, Xdr.XdrOption<string> dname, ulong bandwidth, string domXml, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainMigratePrepare2Args();
            innerReq.UriIn = uriIn;
            innerReq.Flags = flags;
            innerReq.Dname = dname;
            innerReq.Bandwidth = bandwidth;
            innerReq.DomXml = domXml;
            var innerTask = this.DomainMigratePrepare2WrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerCookie = innerRes.Cookie;
            var innerUriOut = innerRes.UriOut;
            return new Tuple<System.Collections.Generic.List<byte>, Xdr.XdrOption<string>>(innerCookie, innerUriOut);
        }
        
        public async Task<Binding.RemoteDomainMigratePrepare2Ret> DomainMigratePrepare2WrappedAsync(Binding.RemoteDomainMigratePrepare2Args arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteDomainMigratePrepare2Ret, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainMigratePrepare2, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<Binding.RemoteNonnullDomain> DomainMigrateFinish2Async(string dname, System.Collections.Generic.List<byte> cookie, string uri, ulong flags, int retcode, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainMigrateFinish2Args();
            innerReq.Dname = dname;
            innerReq.Cookie = cookie;
            innerReq.Uri = uri;
            innerReq.Flags = flags;
            innerReq.Retcode = retcode;
            var innerTask = this.DomainMigrateFinish2WrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerDdom = innerRes.Ddom;
            return innerDdom;
        }
        
        public async Task<Binding.RemoteDomainMigrateFinish2Ret> DomainMigrateFinish2WrappedAsync(Binding.RemoteDomainMigrateFinish2Args arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteDomainMigrateFinish2Ret, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainMigrateFinish2, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<string> ConnectGetUriAsync(System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.ConnectGetUriWrappedAsync(cancellationToken);
            var innerRes = await innerTask;
            var innerUri = innerRes.Uri;
            return innerUri;
        }
        
        public async Task<Binding.RemoteConnectGetUriRet> ConnectGetUriWrappedAsync(System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteConnectGetUriRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcConnectGetUri, null, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<int> NodeNumOfDevicesAsync(Xdr.XdrOption<string> cap, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteNodeNumOfDevicesArgs();
            innerReq.Cap = cap;
            innerReq.Flags = flags;
            var innerTask = this.NodeNumOfDevicesWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerNum = innerRes.Num;
            return innerNum;
        }
        
        public async Task<Binding.RemoteNodeNumOfDevicesRet> NodeNumOfDevicesWrappedAsync(Binding.RemoteNodeNumOfDevicesArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteNodeNumOfDevicesRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcNodeNumOfDevices, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<string> NodeListDevicesAsync(Xdr.XdrOption<string> cap, int maxnames, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteNodeListDevicesArgs();
            innerReq.Cap = cap;
            innerReq.Maxnames = maxnames;
            innerReq.Flags = flags;
            var innerTask = this.NodeListDevicesWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerNames = innerRes.Names;
            return innerNames;
        }
        
        public async Task<Binding.RemoteNodeListDevicesRet> NodeListDevicesWrappedAsync(Binding.RemoteNodeListDevicesArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteNodeListDevicesRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcNodeListDevices, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<Binding.RemoteNonnullNodeDevice> NodeDeviceLookupByNameAsync(string name, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteNodeDeviceLookupByNameArgs();
            innerReq.Name = name;
            var innerTask = this.NodeDeviceLookupByNameWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerDev = innerRes.Dev;
            return innerDev;
        }
        
        public async Task<Binding.RemoteNodeDeviceLookupByNameRet> NodeDeviceLookupByNameWrappedAsync(Binding.RemoteNodeDeviceLookupByNameArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteNodeDeviceLookupByNameRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcNodeDeviceLookupByName, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<string> NodeDeviceGetXmlDescAsync(string name, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteNodeDeviceGetXmlDescArgs();
            innerReq.Name = name;
            innerReq.Flags = flags;
            var innerTask = this.NodeDeviceGetXmlDescWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerXml = innerRes.Xml;
            return innerXml;
        }
        
        public async Task<Binding.RemoteNodeDeviceGetXmlDescRet> NodeDeviceGetXmlDescWrappedAsync(Binding.RemoteNodeDeviceGetXmlDescArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteNodeDeviceGetXmlDescRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcNodeDeviceGetXmlDesc, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<Xdr.XdrOption<string>> NodeDeviceGetParentAsync(string name, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteNodeDeviceGetParentArgs();
            innerReq.Name = name;
            var innerTask = this.NodeDeviceGetParentWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerParentName = innerRes.ParentName;
            return innerParentName;
        }
        
        public async Task<Binding.RemoteNodeDeviceGetParentRet> NodeDeviceGetParentWrappedAsync(Binding.RemoteNodeDeviceGetParentArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteNodeDeviceGetParentRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcNodeDeviceGetParent, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<int> NodeDeviceNumOfCapsAsync(string name, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteNodeDeviceNumOfCapsArgs();
            innerReq.Name = name;
            var innerTask = this.NodeDeviceNumOfCapsWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerNum = innerRes.Num;
            return innerNum;
        }
        
        public async Task<Binding.RemoteNodeDeviceNumOfCapsRet> NodeDeviceNumOfCapsWrappedAsync(Binding.RemoteNodeDeviceNumOfCapsArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteNodeDeviceNumOfCapsRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcNodeDeviceNumOfCaps, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<string> NodeDeviceListCapsAsync(string name, int maxnames, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteNodeDeviceListCapsArgs();
            innerReq.Name = name;
            innerReq.Maxnames = maxnames;
            var innerTask = this.NodeDeviceListCapsWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerNames = innerRes.Names;
            return innerNames;
        }
        
        public async Task<Binding.RemoteNodeDeviceListCapsRet> NodeDeviceListCapsWrappedAsync(Binding.RemoteNodeDeviceListCapsArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteNodeDeviceListCapsRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcNodeDeviceListCaps, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task NodeDeviceDettachAsync(string name, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteNodeDeviceDettachArgs();
            innerReq.Name = name;
            var innerTask = this.NodeDeviceDettachWrappedAsync(innerReq, cancellationToken);
            await innerTask;
        }
        
        public async Task NodeDeviceDettachWrappedAsync(Binding.RemoteNodeDeviceDettachArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Xdr.XdrVoid, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcNodeDeviceDettach, arg, cancellationToken);
            await innerTask;
        }
        
        public async Task NodeDeviceReAttachAsync(string name, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteNodeDeviceReAttachArgs();
            innerReq.Name = name;
            var innerTask = this.NodeDeviceReAttachWrappedAsync(innerReq, cancellationToken);
            await innerTask;
        }
        
        public async Task NodeDeviceReAttachWrappedAsync(Binding.RemoteNodeDeviceReAttachArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Xdr.XdrVoid, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcNodeDeviceReAttach, arg, cancellationToken);
            await innerTask;
        }
        
        public async Task NodeDeviceResetAsync(string name, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteNodeDeviceResetArgs();
            innerReq.Name = name;
            var innerTask = this.NodeDeviceResetWrappedAsync(innerReq, cancellationToken);
            await innerTask;
        }
        
        public async Task NodeDeviceResetWrappedAsync(Binding.RemoteNodeDeviceResetArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Xdr.XdrVoid, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcNodeDeviceReset, arg, cancellationToken);
            await innerTask;
        }
        
        public async Task<Tuple<System.Collections.Generic.List<int>, int>> DomainGetSecurityLabelAsync(Binding.RemoteNonnullDomain dom, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainGetSecurityLabelArgs();
            innerReq.Dom = dom;
            var innerTask = this.DomainGetSecurityLabelWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerLabel = innerRes.Label;
            var innerEnforcing = innerRes.Enforcing;
            return new Tuple<System.Collections.Generic.List<int>, int>(innerLabel, innerEnforcing);
        }
        
        public async Task<Binding.RemoteDomainGetSecurityLabelRet> DomainGetSecurityLabelWrappedAsync(Binding.RemoteDomainGetSecurityLabelArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteDomainGetSecurityLabelRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainGetSecurityLabel, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<Tuple<System.Collections.Generic.List<int>, System.Collections.Generic.List<int>>> NodeGetSecurityModelAsync(System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.NodeGetSecurityModelWrappedAsync(cancellationToken);
            var innerRes = await innerTask;
            var innerModel = innerRes.Model;
            var innerDoi = innerRes.Doi;
            return new Tuple<System.Collections.Generic.List<int>, System.Collections.Generic.List<int>>(innerModel, innerDoi);
        }
        
        public async Task<Binding.RemoteNodeGetSecurityModelRet> NodeGetSecurityModelWrappedAsync(System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteNodeGetSecurityModelRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcNodeGetSecurityModel, null, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<Binding.RemoteNonnullNodeDevice> NodeDeviceCreateXmlAsync(string xmlDesc, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteNodeDeviceCreateXmlArgs();
            innerReq.XmlDesc = xmlDesc;
            innerReq.Flags = flags;
            var innerTask = this.NodeDeviceCreateXmlWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerDev = innerRes.Dev;
            return innerDev;
        }
        
        public async Task<Binding.RemoteNodeDeviceCreateXmlRet> NodeDeviceCreateXmlWrappedAsync(Binding.RemoteNodeDeviceCreateXmlArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteNodeDeviceCreateXmlRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcNodeDeviceCreateXml, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task NodeDeviceDestroyAsync(string name, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteNodeDeviceDestroyArgs();
            innerReq.Name = name;
            var innerTask = this.NodeDeviceDestroyWrappedAsync(innerReq, cancellationToken);
            await innerTask;
        }
        
        public async Task NodeDeviceDestroyWrappedAsync(Binding.RemoteNodeDeviceDestroyArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Xdr.XdrVoid, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcNodeDeviceDestroy, arg, cancellationToken);
            await innerTask;
        }
        
        public async Task<Binding.RemoteNonnullStorageVol> StorageVolCreateXmlFromAsync(Binding.RemoteNonnullStoragePool pool, string xml, Binding.RemoteNonnullStorageVol clonevol, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteStorageVolCreateXmlFromArgs();
            innerReq.Pool = pool;
            innerReq.Xml = xml;
            innerReq.Clonevol = clonevol;
            innerReq.Flags = flags;
            var innerTask = this.StorageVolCreateXmlFromWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerVol = innerRes.Vol;
            return innerVol;
        }
        
        public async Task<Binding.RemoteStorageVolCreateXmlFromRet> StorageVolCreateXmlFromWrappedAsync(Binding.RemoteStorageVolCreateXmlFromArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteStorageVolCreateXmlFromRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcStorageVolCreateXmlFrom, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<int> ConnectNumOfInterfacesAsync(System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.ConnectNumOfInterfacesWrappedAsync(cancellationToken);
            var innerRes = await innerTask;
            var innerNum = innerRes.Num;
            return innerNum;
        }
        
        public async Task<Binding.RemoteConnectNumOfInterfacesRet> ConnectNumOfInterfacesWrappedAsync(System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteConnectNumOfInterfacesRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcConnectNumOfInterfaces, null, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<string> ConnectListInterfacesAsync(int maxnames, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteConnectListInterfacesArgs();
            innerReq.Maxnames = maxnames;
            var innerTask = this.ConnectListInterfacesWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerNames = innerRes.Names;
            return innerNames;
        }
        
        public async Task<Binding.RemoteConnectListInterfacesRet> ConnectListInterfacesWrappedAsync(Binding.RemoteConnectListInterfacesArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteConnectListInterfacesRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcConnectListInterfaces, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<Binding.RemoteNonnullInterface> InterfaceLookupByNameAsync(string name, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteInterfaceLookupByNameArgs();
            innerReq.Name = name;
            var innerTask = this.InterfaceLookupByNameWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerIface = innerRes.Iface;
            return innerIface;
        }
        
        public async Task<Binding.RemoteInterfaceLookupByNameRet> InterfaceLookupByNameWrappedAsync(Binding.RemoteInterfaceLookupByNameArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteInterfaceLookupByNameRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcInterfaceLookupByName, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<Binding.RemoteNonnullInterface> InterfaceLookupByMacStringAsync(string mac, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteInterfaceLookupByMacStringArgs();
            innerReq.Mac = mac;
            var innerTask = this.InterfaceLookupByMacStringWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerIface = innerRes.Iface;
            return innerIface;
        }
        
        public async Task<Binding.RemoteInterfaceLookupByMacStringRet> InterfaceLookupByMacStringWrappedAsync(Binding.RemoteInterfaceLookupByMacStringArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteInterfaceLookupByMacStringRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcInterfaceLookupByMacString, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<string> InterfaceGetXmlDescAsync(Binding.RemoteNonnullInterface iface, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteInterfaceGetXmlDescArgs();
            innerReq.Iface = iface;
            innerReq.Flags = flags;
            var innerTask = this.InterfaceGetXmlDescWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerXml = innerRes.Xml;
            return innerXml;
        }
        
        public async Task<Binding.RemoteInterfaceGetXmlDescRet> InterfaceGetXmlDescWrappedAsync(Binding.RemoteInterfaceGetXmlDescArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteInterfaceGetXmlDescRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcInterfaceGetXmlDesc, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<Binding.RemoteNonnullInterface> InterfaceDefineXmlAsync(string xml, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteInterfaceDefineXmlArgs();
            innerReq.Xml = xml;
            innerReq.Flags = flags;
            var innerTask = this.InterfaceDefineXmlWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerIface = innerRes.Iface;
            return innerIface;
        }
        
        public async Task<Binding.RemoteInterfaceDefineXmlRet> InterfaceDefineXmlWrappedAsync(Binding.RemoteInterfaceDefineXmlArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteInterfaceDefineXmlRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcInterfaceDefineXml, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task InterfaceUndefineAsync(Binding.RemoteNonnullInterface iface, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteInterfaceUndefineArgs();
            innerReq.Iface = iface;
            var innerTask = this.InterfaceUndefineWrappedAsync(innerReq, cancellationToken);
            await innerTask;
        }
        
        public async Task InterfaceUndefineWrappedAsync(Binding.RemoteInterfaceUndefineArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Xdr.XdrVoid, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcInterfaceUndefine, arg, cancellationToken);
            await innerTask;
        }
        
        public async Task InterfaceCreateAsync(Binding.RemoteNonnullInterface iface, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteInterfaceCreateArgs();
            innerReq.Iface = iface;
            innerReq.Flags = flags;
            var innerTask = this.InterfaceCreateWrappedAsync(innerReq, cancellationToken);
            await innerTask;
        }
        
        public async Task InterfaceCreateWrappedAsync(Binding.RemoteInterfaceCreateArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Xdr.XdrVoid, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcInterfaceCreate, arg, cancellationToken);
            await innerTask;
        }
        
        public async Task InterfaceDestroyAsync(Binding.RemoteNonnullInterface iface, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteInterfaceDestroyArgs();
            innerReq.Iface = iface;
            innerReq.Flags = flags;
            var innerTask = this.InterfaceDestroyWrappedAsync(innerReq, cancellationToken);
            await innerTask;
        }
        
        public async Task InterfaceDestroyWrappedAsync(Binding.RemoteInterfaceDestroyArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Xdr.XdrVoid, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcInterfaceDestroy, arg, cancellationToken);
            await innerTask;
        }
        
        public async Task<string> ConnectDomainXmlFromNativeAsync(string nativeFormat, string nativeConfig, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteConnectDomainXmlFromNativeArgs();
            innerReq.NativeFormat = nativeFormat;
            innerReq.NativeConfig = nativeConfig;
            innerReq.Flags = flags;
            var innerTask = this.ConnectDomainXmlFromNativeWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerDomainXml = innerRes.DomainXml;
            return innerDomainXml;
        }
        
        public async Task<Binding.RemoteConnectDomainXmlFromNativeRet> ConnectDomainXmlFromNativeWrappedAsync(Binding.RemoteConnectDomainXmlFromNativeArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteConnectDomainXmlFromNativeRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcConnectDomainXmlFromNative, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<string> ConnectDomainXmlToNativeAsync(string nativeFormat, string domainXml, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteConnectDomainXmlToNativeArgs();
            innerReq.NativeFormat = nativeFormat;
            innerReq.DomainXml = domainXml;
            innerReq.Flags = flags;
            var innerTask = this.ConnectDomainXmlToNativeWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerNativeConfig = innerRes.NativeConfig;
            return innerNativeConfig;
        }
        
        public async Task<Binding.RemoteConnectDomainXmlToNativeRet> ConnectDomainXmlToNativeWrappedAsync(Binding.RemoteConnectDomainXmlToNativeArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteConnectDomainXmlToNativeRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcConnectDomainXmlToNative, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<int> ConnectNumOfDefinedInterfacesAsync(System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.ConnectNumOfDefinedInterfacesWrappedAsync(cancellationToken);
            var innerRes = await innerTask;
            var innerNum = innerRes.Num;
            return innerNum;
        }
        
        public async Task<Binding.RemoteConnectNumOfDefinedInterfacesRet> ConnectNumOfDefinedInterfacesWrappedAsync(System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteConnectNumOfDefinedInterfacesRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcConnectNumOfDefinedInterfaces, null, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<string> ConnectListDefinedInterfacesAsync(int maxnames, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteConnectListDefinedInterfacesArgs();
            innerReq.Maxnames = maxnames;
            var innerTask = this.ConnectListDefinedInterfacesWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerNames = innerRes.Names;
            return innerNames;
        }
        
        public async Task<Binding.RemoteConnectListDefinedInterfacesRet> ConnectListDefinedInterfacesWrappedAsync(Binding.RemoteConnectListDefinedInterfacesArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteConnectListDefinedInterfacesRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcConnectListDefinedInterfaces, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<int> ConnectNumOfSecretsAsync(System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.ConnectNumOfSecretsWrappedAsync(cancellationToken);
            var innerRes = await innerTask;
            var innerNum = innerRes.Num;
            return innerNum;
        }
        
        public async Task<Binding.RemoteConnectNumOfSecretsRet> ConnectNumOfSecretsWrappedAsync(System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteConnectNumOfSecretsRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcConnectNumOfSecrets, null, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<string> ConnectListSecretsAsync(int maxuuids, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteConnectListSecretsArgs();
            innerReq.Maxuuids = maxuuids;
            var innerTask = this.ConnectListSecretsWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerUuids = innerRes.Uuids;
            return innerUuids;
        }
        
        public async Task<Binding.RemoteConnectListSecretsRet> ConnectListSecretsWrappedAsync(Binding.RemoteConnectListSecretsArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteConnectListSecretsRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcConnectListSecrets, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<Binding.RemoteNonnullSecret> SecretLookupByUuidAsync(byte[] uuid, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteSecretLookupByUuidArgs();
            innerReq.Uuid = uuid;
            var innerTask = this.SecretLookupByUuidWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerSecret = innerRes.Secret;
            return innerSecret;
        }
        
        public async Task<Binding.RemoteSecretLookupByUuidRet> SecretLookupByUuidWrappedAsync(Binding.RemoteSecretLookupByUuidArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteSecretLookupByUuidRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcSecretLookupByUuid, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<Binding.RemoteNonnullSecret> SecretDefineXmlAsync(string xml, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteSecretDefineXmlArgs();
            innerReq.Xml = xml;
            innerReq.Flags = flags;
            var innerTask = this.SecretDefineXmlWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerSecret = innerRes.Secret;
            return innerSecret;
        }
        
        public async Task<Binding.RemoteSecretDefineXmlRet> SecretDefineXmlWrappedAsync(Binding.RemoteSecretDefineXmlArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteSecretDefineXmlRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcSecretDefineXml, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<string> SecretGetXmlDescAsync(Binding.RemoteNonnullSecret secret, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteSecretGetXmlDescArgs();
            innerReq.Secret = secret;
            innerReq.Flags = flags;
            var innerTask = this.SecretGetXmlDescWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerXml = innerRes.Xml;
            return innerXml;
        }
        
        public async Task<Binding.RemoteSecretGetXmlDescRet> SecretGetXmlDescWrappedAsync(Binding.RemoteSecretGetXmlDescArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteSecretGetXmlDescRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcSecretGetXmlDesc, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task SecretSetValueAsync(Binding.RemoteNonnullSecret secret, System.Collections.Generic.List<byte> value, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteSecretSetValueArgs();
            innerReq.Secret = secret;
            innerReq.Value = value;
            innerReq.Flags = flags;
            var innerTask = this.SecretSetValueWrappedAsync(innerReq, cancellationToken);
            await innerTask;
        }
        
        public async Task SecretSetValueWrappedAsync(Binding.RemoteSecretSetValueArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Xdr.XdrVoid, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcSecretSetValue, arg, cancellationToken);
            await innerTask;
        }
        
        public async Task<System.Collections.Generic.List<byte>> SecretGetValueAsync(Binding.RemoteNonnullSecret secret, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteSecretGetValueArgs();
            innerReq.Secret = secret;
            innerReq.Flags = flags;
            var innerTask = this.SecretGetValueWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerValue = innerRes.Value;
            return innerValue;
        }
        
        public async Task<Binding.RemoteSecretGetValueRet> SecretGetValueWrappedAsync(Binding.RemoteSecretGetValueArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteSecretGetValueRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcSecretGetValue, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task SecretUndefineAsync(Binding.RemoteNonnullSecret secret, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteSecretUndefineArgs();
            innerReq.Secret = secret;
            var innerTask = this.SecretUndefineWrappedAsync(innerReq, cancellationToken);
            await innerTask;
        }
        
        public async Task SecretUndefineWrappedAsync(Binding.RemoteSecretUndefineArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Xdr.XdrVoid, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcSecretUndefine, arg, cancellationToken);
            await innerTask;
        }
        
        public async Task<Binding.RemoteNonnullSecret> SecretLookupByUsageAsync(int usageType, string usageId, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteSecretLookupByUsageArgs();
            innerReq.UsageType = usageType;
            innerReq.UsageId = usageId;
            var innerTask = this.SecretLookupByUsageWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerSecret = innerRes.Secret;
            return innerSecret;
        }
        
        public async Task<Binding.RemoteSecretLookupByUsageRet> SecretLookupByUsageWrappedAsync(Binding.RemoteSecretLookupByUsageArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteSecretLookupByUsageRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcSecretLookupByUsage, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<VirtNetStream> DomainMigratePrepareTunnelAsync(ulong flags, Xdr.XdrOption<string> dname, ulong bandwidth, string domXml, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainMigratePrepareTunnelArgs();
            innerReq.Flags = flags;
            innerReq.Dname = dname;
            innerReq.Bandwidth = bandwidth;
            innerReq.DomXml = domXml;
            var innerTask = this.DomainMigratePrepareTunnelWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            return innerRes.Item1;
        }
        
        public async Task<Tuple<VirtNetStream, Xdr.XdrVoid>> DomainMigratePrepareTunnelWrappedAsync(Binding.RemoteDomainMigratePrepareTunnelArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallWithStreamAsync<Xdr.XdrVoid, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainMigratePrepareTunnel, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<int> ConnectIsSecureAsync(System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.ConnectIsSecureWrappedAsync(cancellationToken);
            var innerRes = await innerTask;
            var innerSecure = innerRes.Secure;
            return innerSecure;
        }
        
        public async Task<Binding.RemoteConnectIsSecureRet> ConnectIsSecureWrappedAsync(System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteConnectIsSecureRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcConnectIsSecure, null, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<int> DomainIsActiveAsync(Binding.RemoteNonnullDomain dom, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainIsActiveArgs();
            innerReq.Dom = dom;
            var innerTask = this.DomainIsActiveWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerActive = innerRes.Active;
            return innerActive;
        }
        
        public async Task<Binding.RemoteDomainIsActiveRet> DomainIsActiveWrappedAsync(Binding.RemoteDomainIsActiveArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteDomainIsActiveRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainIsActive, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<int> DomainIsPersistentAsync(Binding.RemoteNonnullDomain dom, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainIsPersistentArgs();
            innerReq.Dom = dom;
            var innerTask = this.DomainIsPersistentWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerPersistent = innerRes.Persistent;
            return innerPersistent;
        }
        
        public async Task<Binding.RemoteDomainIsPersistentRet> DomainIsPersistentWrappedAsync(Binding.RemoteDomainIsPersistentArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteDomainIsPersistentRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainIsPersistent, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<int> NetworkIsActiveAsync(Binding.RemoteNonnullNetwork net, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteNetworkIsActiveArgs();
            innerReq.Net = net;
            var innerTask = this.NetworkIsActiveWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerActive = innerRes.Active;
            return innerActive;
        }
        
        public async Task<Binding.RemoteNetworkIsActiveRet> NetworkIsActiveWrappedAsync(Binding.RemoteNetworkIsActiveArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteNetworkIsActiveRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcNetworkIsActive, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<int> NetworkIsPersistentAsync(Binding.RemoteNonnullNetwork net, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteNetworkIsPersistentArgs();
            innerReq.Net = net;
            var innerTask = this.NetworkIsPersistentWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerPersistent = innerRes.Persistent;
            return innerPersistent;
        }
        
        public async Task<Binding.RemoteNetworkIsPersistentRet> NetworkIsPersistentWrappedAsync(Binding.RemoteNetworkIsPersistentArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteNetworkIsPersistentRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcNetworkIsPersistent, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<int> StoragePoolIsActiveAsync(Binding.RemoteNonnullStoragePool pool, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteStoragePoolIsActiveArgs();
            innerReq.Pool = pool;
            var innerTask = this.StoragePoolIsActiveWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerActive = innerRes.Active;
            return innerActive;
        }
        
        public async Task<Binding.RemoteStoragePoolIsActiveRet> StoragePoolIsActiveWrappedAsync(Binding.RemoteStoragePoolIsActiveArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteStoragePoolIsActiveRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcStoragePoolIsActive, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<int> StoragePoolIsPersistentAsync(Binding.RemoteNonnullStoragePool pool, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteStoragePoolIsPersistentArgs();
            innerReq.Pool = pool;
            var innerTask = this.StoragePoolIsPersistentWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerPersistent = innerRes.Persistent;
            return innerPersistent;
        }
        
        public async Task<Binding.RemoteStoragePoolIsPersistentRet> StoragePoolIsPersistentWrappedAsync(Binding.RemoteStoragePoolIsPersistentArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteStoragePoolIsPersistentRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcStoragePoolIsPersistent, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<int> InterfaceIsActiveAsync(Binding.RemoteNonnullInterface iface, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteInterfaceIsActiveArgs();
            innerReq.Iface = iface;
            var innerTask = this.InterfaceIsActiveWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerActive = innerRes.Active;
            return innerActive;
        }
        
        public async Task<Binding.RemoteInterfaceIsActiveRet> InterfaceIsActiveWrappedAsync(Binding.RemoteInterfaceIsActiveArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteInterfaceIsActiveRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcInterfaceIsActive, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<ulong> ConnectGetLibVersionAsync(System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.ConnectGetLibVersionWrappedAsync(cancellationToken);
            var innerRes = await innerTask;
            var innerLibVer = innerRes.LibVer;
            return innerLibVer;
        }
        
        public async Task<Binding.RemoteConnectGetLibVersionRet> ConnectGetLibVersionWrappedAsync(System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteConnectGetLibVersionRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcConnectGetLibVersion, null, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<int> ConnectCompareCpuAsync(string xml, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteConnectCompareCpuArgs();
            innerReq.Xml = xml;
            innerReq.Flags = flags;
            var innerTask = this.ConnectCompareCpuWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerResult = innerRes.Result;
            return innerResult;
        }
        
        public async Task<Binding.RemoteConnectCompareCpuRet> ConnectCompareCpuWrappedAsync(Binding.RemoteConnectCompareCpuArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteConnectCompareCpuRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcConnectCompareCpu, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<System.Collections.Generic.List<Binding.RemoteDomainMemoryStat>> DomainMemoryStatsAsync(Binding.RemoteNonnullDomain dom, uint maxStats, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainMemoryStatsArgs();
            innerReq.Dom = dom;
            innerReq.MaxStats = maxStats;
            innerReq.Flags = flags;
            var innerTask = this.DomainMemoryStatsWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerStats = innerRes.Stats;
            return innerStats;
        }
        
        public async Task<Binding.RemoteDomainMemoryStatsRet> DomainMemoryStatsWrappedAsync(Binding.RemoteDomainMemoryStatsArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteDomainMemoryStatsRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainMemoryStats, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task DomainAttachDeviceFlagsAsync(Binding.RemoteNonnullDomain dom, string xml, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainAttachDeviceFlagsArgs();
            innerReq.Dom = dom;
            innerReq.Xml = xml;
            innerReq.Flags = flags;
            var innerTask = this.DomainAttachDeviceFlagsWrappedAsync(innerReq, cancellationToken);
            await innerTask;
        }
        
        public async Task DomainAttachDeviceFlagsWrappedAsync(Binding.RemoteDomainAttachDeviceFlagsArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Xdr.XdrVoid, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainAttachDeviceFlags, arg, cancellationToken);
            await innerTask;
        }
        
        public async Task DomainDetachDeviceFlagsAsync(Binding.RemoteNonnullDomain dom, string xml, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainDetachDeviceFlagsArgs();
            innerReq.Dom = dom;
            innerReq.Xml = xml;
            innerReq.Flags = flags;
            var innerTask = this.DomainDetachDeviceFlagsWrappedAsync(innerReq, cancellationToken);
            await innerTask;
        }
        
        public async Task DomainDetachDeviceFlagsWrappedAsync(Binding.RemoteDomainDetachDeviceFlagsArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Xdr.XdrVoid, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainDetachDeviceFlags, arg, cancellationToken);
            await innerTask;
        }
        
        public async Task<string> ConnectBaselineCpuAsync(string xmlCpus, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteConnectBaselineCpuArgs();
            innerReq.XmlCpus = xmlCpus;
            innerReq.Flags = flags;
            var innerTask = this.ConnectBaselineCpuWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerCpu = innerRes.Cpu;
            return innerCpu;
        }
        
        public async Task<Binding.RemoteConnectBaselineCpuRet> ConnectBaselineCpuWrappedAsync(Binding.RemoteConnectBaselineCpuArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteConnectBaselineCpuRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcConnectBaselineCpu, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<Binding.RemoteDomainGetJobInfoRet> DomainGetJobInfoAsync(Binding.RemoteNonnullDomain dom, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainGetJobInfoArgs();
            innerReq.Dom = dom;
            var innerTask = this.DomainGetJobInfoWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<Binding.RemoteDomainGetJobInfoRet> DomainGetJobInfoWrappedAsync(Binding.RemoteDomainGetJobInfoArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteDomainGetJobInfoRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainGetJobInfo, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task DomainAbortJobAsync(Binding.RemoteNonnullDomain dom, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainAbortJobArgs();
            innerReq.Dom = dom;
            var innerTask = this.DomainAbortJobWrappedAsync(innerReq, cancellationToken);
            await innerTask;
        }
        
        public async Task DomainAbortJobWrappedAsync(Binding.RemoteDomainAbortJobArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Xdr.XdrVoid, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainAbortJob, arg, cancellationToken);
            await innerTask;
        }
        
        public async Task StorageVolWipeAsync(Binding.RemoteNonnullStorageVol vol, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteStorageVolWipeArgs();
            innerReq.Vol = vol;
            innerReq.Flags = flags;
            var innerTask = this.StorageVolWipeWrappedAsync(innerReq, cancellationToken);
            await innerTask;
        }
        
        public async Task StorageVolWipeWrappedAsync(Binding.RemoteStorageVolWipeArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Xdr.XdrVoid, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcStorageVolWipe, arg, cancellationToken);
            await innerTask;
        }
        
        public async Task DomainMigrateSetMaxDowntimeAsync(Binding.RemoteNonnullDomain dom, ulong downtime, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainMigrateSetMaxDowntimeArgs();
            innerReq.Dom = dom;
            innerReq.Downtime = downtime;
            innerReq.Flags = flags;
            var innerTask = this.DomainMigrateSetMaxDowntimeWrappedAsync(innerReq, cancellationToken);
            await innerTask;
        }
        
        public async Task DomainMigrateSetMaxDowntimeWrappedAsync(Binding.RemoteDomainMigrateSetMaxDowntimeArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Xdr.XdrVoid, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainMigrateSetMaxDowntime, arg, cancellationToken);
            await innerTask;
        }
        
        public async Task ConnectDomainEventRegisterAnyAsync(int eventId, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteConnectDomainEventRegisterAnyArgs();
            innerReq.EventId = eventId;
            var innerTask = this.ConnectDomainEventRegisterAnyWrappedAsync(innerReq, cancellationToken);
            await innerTask;
        }
        
        public async Task ConnectDomainEventRegisterAnyWrappedAsync(Binding.RemoteConnectDomainEventRegisterAnyArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Xdr.XdrVoid, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcConnectDomainEventRegisterAny, arg, cancellationToken);
            await innerTask;
        }
        
        public async Task ConnectDomainEventDeregisterAnyAsync(int eventId, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteConnectDomainEventDeregisterAnyArgs();
            innerReq.EventId = eventId;
            var innerTask = this.ConnectDomainEventDeregisterAnyWrappedAsync(innerReq, cancellationToken);
            await innerTask;
        }
        
        public async Task ConnectDomainEventDeregisterAnyWrappedAsync(Binding.RemoteConnectDomainEventDeregisterAnyArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Xdr.XdrVoid, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcConnectDomainEventDeregisterAny, arg, cancellationToken);
            await innerTask;
        }
        
        public async Task DomainUpdateDeviceFlagsAsync(Binding.RemoteNonnullDomain dom, string xml, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainUpdateDeviceFlagsArgs();
            innerReq.Dom = dom;
            innerReq.Xml = xml;
            innerReq.Flags = flags;
            var innerTask = this.DomainUpdateDeviceFlagsWrappedAsync(innerReq, cancellationToken);
            await innerTask;
        }
        
        public async Task DomainUpdateDeviceFlagsWrappedAsync(Binding.RemoteDomainUpdateDeviceFlagsArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Xdr.XdrVoid, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainUpdateDeviceFlags, arg, cancellationToken);
            await innerTask;
        }
        
        public async Task<Binding.RemoteNonnullNwfilter> NwfilterLookupByNameAsync(string name, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteNwfilterLookupByNameArgs();
            innerReq.Name = name;
            var innerTask = this.NwfilterLookupByNameWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerNwfilter = innerRes.Nwfilter;
            return innerNwfilter;
        }
        
        public async Task<Binding.RemoteNwfilterLookupByNameRet> NwfilterLookupByNameWrappedAsync(Binding.RemoteNwfilterLookupByNameArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteNwfilterLookupByNameRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcNwfilterLookupByName, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<Binding.RemoteNonnullNwfilter> NwfilterLookupByUuidAsync(byte[] uuid, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteNwfilterLookupByUuidArgs();
            innerReq.Uuid = uuid;
            var innerTask = this.NwfilterLookupByUuidWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerNwfilter = innerRes.Nwfilter;
            return innerNwfilter;
        }
        
        public async Task<Binding.RemoteNwfilterLookupByUuidRet> NwfilterLookupByUuidWrappedAsync(Binding.RemoteNwfilterLookupByUuidArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteNwfilterLookupByUuidRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcNwfilterLookupByUuid, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<string> NwfilterGetXmlDescAsync(Binding.RemoteNonnullNwfilter nwfilter, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteNwfilterGetXmlDescArgs();
            innerReq.Nwfilter = nwfilter;
            innerReq.Flags = flags;
            var innerTask = this.NwfilterGetXmlDescWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerXml = innerRes.Xml;
            return innerXml;
        }
        
        public async Task<Binding.RemoteNwfilterGetXmlDescRet> NwfilterGetXmlDescWrappedAsync(Binding.RemoteNwfilterGetXmlDescArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteNwfilterGetXmlDescRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcNwfilterGetXmlDesc, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<int> ConnectNumOfNwfiltersAsync(System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.ConnectNumOfNwfiltersWrappedAsync(cancellationToken);
            var innerRes = await innerTask;
            var innerNum = innerRes.Num;
            return innerNum;
        }
        
        public async Task<Binding.RemoteConnectNumOfNwfiltersRet> ConnectNumOfNwfiltersWrappedAsync(System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteConnectNumOfNwfiltersRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcConnectNumOfNwfilters, null, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<string> ConnectListNwfiltersAsync(int maxnames, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteConnectListNwfiltersArgs();
            innerReq.Maxnames = maxnames;
            var innerTask = this.ConnectListNwfiltersWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerNames = innerRes.Names;
            return innerNames;
        }
        
        public async Task<Binding.RemoteConnectListNwfiltersRet> ConnectListNwfiltersWrappedAsync(Binding.RemoteConnectListNwfiltersArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteConnectListNwfiltersRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcConnectListNwfilters, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<Binding.RemoteNonnullNwfilter> NwfilterDefineXmlAsync(string xml, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteNwfilterDefineXmlArgs();
            innerReq.Xml = xml;
            var innerTask = this.NwfilterDefineXmlWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerNwfilter = innerRes.Nwfilter;
            return innerNwfilter;
        }
        
        public async Task<Binding.RemoteNwfilterDefineXmlRet> NwfilterDefineXmlWrappedAsync(Binding.RemoteNwfilterDefineXmlArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteNwfilterDefineXmlRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcNwfilterDefineXml, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task NwfilterUndefineAsync(Binding.RemoteNonnullNwfilter nwfilter, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteNwfilterUndefineArgs();
            innerReq.Nwfilter = nwfilter;
            var innerTask = this.NwfilterUndefineWrappedAsync(innerReq, cancellationToken);
            await innerTask;
        }
        
        public async Task NwfilterUndefineWrappedAsync(Binding.RemoteNwfilterUndefineArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Xdr.XdrVoid, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcNwfilterUndefine, arg, cancellationToken);
            await innerTask;
        }
        
        public async Task DomainManagedSaveAsync(Binding.RemoteNonnullDomain dom, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainManagedSaveArgs();
            innerReq.Dom = dom;
            innerReq.Flags = flags;
            var innerTask = this.DomainManagedSaveWrappedAsync(innerReq, cancellationToken);
            await innerTask;
        }
        
        public async Task DomainManagedSaveWrappedAsync(Binding.RemoteDomainManagedSaveArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Xdr.XdrVoid, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainManagedSave, arg, cancellationToken);
            await innerTask;
        }
        
        public async Task<int> DomainHasManagedSaveImageAsync(Binding.RemoteNonnullDomain dom, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainHasManagedSaveImageArgs();
            innerReq.Dom = dom;
            innerReq.Flags = flags;
            var innerTask = this.DomainHasManagedSaveImageWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerResult = innerRes.Result;
            return innerResult;
        }
        
        public async Task<Binding.RemoteDomainHasManagedSaveImageRet> DomainHasManagedSaveImageWrappedAsync(Binding.RemoteDomainHasManagedSaveImageArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteDomainHasManagedSaveImageRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainHasManagedSaveImage, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task DomainManagedSaveRemoveAsync(Binding.RemoteNonnullDomain dom, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainManagedSaveRemoveArgs();
            innerReq.Dom = dom;
            innerReq.Flags = flags;
            var innerTask = this.DomainManagedSaveRemoveWrappedAsync(innerReq, cancellationToken);
            await innerTask;
        }
        
        public async Task DomainManagedSaveRemoveWrappedAsync(Binding.RemoteDomainManagedSaveRemoveArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Xdr.XdrVoid, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainManagedSaveRemove, arg, cancellationToken);
            await innerTask;
        }
        
        public async Task<Binding.RemoteNonnullDomainSnapshot> DomainSnapshotCreateXmlAsync(Binding.RemoteNonnullDomain dom, string xmlDesc, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainSnapshotCreateXmlArgs();
            innerReq.Dom = dom;
            innerReq.XmlDesc = xmlDesc;
            innerReq.Flags = flags;
            var innerTask = this.DomainSnapshotCreateXmlWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerSnap = innerRes.Snap;
            return innerSnap;
        }
        
        public async Task<Binding.RemoteDomainSnapshotCreateXmlRet> DomainSnapshotCreateXmlWrappedAsync(Binding.RemoteDomainSnapshotCreateXmlArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteDomainSnapshotCreateXmlRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainSnapshotCreateXml, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<string> DomainSnapshotGetXmlDescAsync(Binding.RemoteNonnullDomainSnapshot snap, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainSnapshotGetXmlDescArgs();
            innerReq.Snap = snap;
            innerReq.Flags = flags;
            var innerTask = this.DomainSnapshotGetXmlDescWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerXml = innerRes.Xml;
            return innerXml;
        }
        
        public async Task<Binding.RemoteDomainSnapshotGetXmlDescRet> DomainSnapshotGetXmlDescWrappedAsync(Binding.RemoteDomainSnapshotGetXmlDescArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteDomainSnapshotGetXmlDescRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainSnapshotGetXmlDesc, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<int> DomainSnapshotNumAsync(Binding.RemoteNonnullDomain dom, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainSnapshotNumArgs();
            innerReq.Dom = dom;
            innerReq.Flags = flags;
            var innerTask = this.DomainSnapshotNumWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerNum = innerRes.Num;
            return innerNum;
        }
        
        public async Task<Binding.RemoteDomainSnapshotNumRet> DomainSnapshotNumWrappedAsync(Binding.RemoteDomainSnapshotNumArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteDomainSnapshotNumRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainSnapshotNum, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<string> DomainSnapshotListNamesAsync(Binding.RemoteNonnullDomain dom, int maxnames, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainSnapshotListNamesArgs();
            innerReq.Dom = dom;
            innerReq.Maxnames = maxnames;
            innerReq.Flags = flags;
            var innerTask = this.DomainSnapshotListNamesWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerNames = innerRes.Names;
            return innerNames;
        }
        
        public async Task<Binding.RemoteDomainSnapshotListNamesRet> DomainSnapshotListNamesWrappedAsync(Binding.RemoteDomainSnapshotListNamesArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteDomainSnapshotListNamesRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainSnapshotListNames, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<Binding.RemoteNonnullDomainSnapshot> DomainSnapshotLookupByNameAsync(Binding.RemoteNonnullDomain dom, string name, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainSnapshotLookupByNameArgs();
            innerReq.Dom = dom;
            innerReq.Name = name;
            innerReq.Flags = flags;
            var innerTask = this.DomainSnapshotLookupByNameWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerSnap = innerRes.Snap;
            return innerSnap;
        }
        
        public async Task<Binding.RemoteDomainSnapshotLookupByNameRet> DomainSnapshotLookupByNameWrappedAsync(Binding.RemoteDomainSnapshotLookupByNameArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteDomainSnapshotLookupByNameRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainSnapshotLookupByName, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<int> DomainHasCurrentSnapshotAsync(Binding.RemoteNonnullDomain dom, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainHasCurrentSnapshotArgs();
            innerReq.Dom = dom;
            innerReq.Flags = flags;
            var innerTask = this.DomainHasCurrentSnapshotWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerResult = innerRes.Result;
            return innerResult;
        }
        
        public async Task<Binding.RemoteDomainHasCurrentSnapshotRet> DomainHasCurrentSnapshotWrappedAsync(Binding.RemoteDomainHasCurrentSnapshotArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteDomainHasCurrentSnapshotRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainHasCurrentSnapshot, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<Binding.RemoteNonnullDomainSnapshot> DomainSnapshotCurrentAsync(Binding.RemoteNonnullDomain dom, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainSnapshotCurrentArgs();
            innerReq.Dom = dom;
            innerReq.Flags = flags;
            var innerTask = this.DomainSnapshotCurrentWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerSnap = innerRes.Snap;
            return innerSnap;
        }
        
        public async Task<Binding.RemoteDomainSnapshotCurrentRet> DomainSnapshotCurrentWrappedAsync(Binding.RemoteDomainSnapshotCurrentArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteDomainSnapshotCurrentRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainSnapshotCurrent, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task DomainRevertToSnapshotAsync(Binding.RemoteNonnullDomainSnapshot snap, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainRevertToSnapshotArgs();
            innerReq.Snap = snap;
            innerReq.Flags = flags;
            var innerTask = this.DomainRevertToSnapshotWrappedAsync(innerReq, cancellationToken);
            await innerTask;
        }
        
        public async Task DomainRevertToSnapshotWrappedAsync(Binding.RemoteDomainRevertToSnapshotArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Xdr.XdrVoid, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainRevertToSnapshot, arg, cancellationToken);
            await innerTask;
        }
        
        public async Task DomainSnapshotDeleteAsync(Binding.RemoteNonnullDomainSnapshot snap, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainSnapshotDeleteArgs();
            innerReq.Snap = snap;
            innerReq.Flags = flags;
            var innerTask = this.DomainSnapshotDeleteWrappedAsync(innerReq, cancellationToken);
            await innerTask;
        }
        
        public async Task DomainSnapshotDeleteWrappedAsync(Binding.RemoteDomainSnapshotDeleteArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Xdr.XdrVoid, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainSnapshotDelete, arg, cancellationToken);
            await innerTask;
        }
        
        public async Task<Tuple<ulong, ulong, ulong>> DomainGetBlockInfoAsync(Binding.RemoteNonnullDomain dom, string path, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainGetBlockInfoArgs();
            innerReq.Dom = dom;
            innerReq.Path = path;
            innerReq.Flags = flags;
            var innerTask = this.DomainGetBlockInfoWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerAllocation = innerRes.Allocation;
            var innerCapacity = innerRes.Capacity;
            var innerPhysical = innerRes.Physical;
            return new Tuple<ulong, ulong, ulong>(innerAllocation, innerCapacity, innerPhysical);
        }
        
        public async Task<Binding.RemoteDomainGetBlockInfoRet> DomainGetBlockInfoWrappedAsync(Binding.RemoteDomainGetBlockInfoArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteDomainGetBlockInfoRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainGetBlockInfo, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<Binding.RemoteNonnullDomain> DomainCreateWithFlagsAsync(Binding.RemoteNonnullDomain dom, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainCreateWithFlagsArgs();
            innerReq.Dom = dom;
            innerReq.Flags = flags;
            var innerTask = this.DomainCreateWithFlagsWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerDom = innerRes.Dom;
            return innerDom;
        }
        
        public async Task<Binding.RemoteDomainCreateWithFlagsRet> DomainCreateWithFlagsWrappedAsync(Binding.RemoteDomainCreateWithFlagsArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteDomainCreateWithFlagsRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainCreateWithFlags, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task DomainSetMemoryParametersAsync(Binding.RemoteNonnullDomain dom, System.Collections.Generic.List<Binding.RemoteTypedParam> @params, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainSetMemoryParametersArgs();
            innerReq.Dom = dom;
            innerReq.Params = @params;
            innerReq.Flags = flags;
            var innerTask = this.DomainSetMemoryParametersWrappedAsync(innerReq, cancellationToken);
            await innerTask;
        }
        
        public async Task DomainSetMemoryParametersWrappedAsync(Binding.RemoteDomainSetMemoryParametersArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Xdr.XdrVoid, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainSetMemoryParameters, arg, cancellationToken);
            await innerTask;
        }
        
        public async Task<Tuple<System.Collections.Generic.List<Binding.RemoteTypedParam>, int>> DomainGetMemoryParametersAsync(Binding.RemoteNonnullDomain dom, int nparams, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainGetMemoryParametersArgs();
            innerReq.Dom = dom;
            innerReq.Nparams = nparams;
            innerReq.Flags = flags;
            var innerTask = this.DomainGetMemoryParametersWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerParams = innerRes.Params;
            var innerNparams = innerRes.Nparams;
            return new Tuple<System.Collections.Generic.List<Binding.RemoteTypedParam>, int>(innerParams, innerNparams);
        }
        
        public async Task<Binding.RemoteDomainGetMemoryParametersRet> DomainGetMemoryParametersWrappedAsync(Binding.RemoteDomainGetMemoryParametersArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteDomainGetMemoryParametersRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainGetMemoryParameters, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task DomainSetVcpusFlagsAsync(Binding.RemoteNonnullDomain dom, uint nvcpus, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainSetVcpusFlagsArgs();
            innerReq.Dom = dom;
            innerReq.Nvcpus = nvcpus;
            innerReq.Flags = flags;
            var innerTask = this.DomainSetVcpusFlagsWrappedAsync(innerReq, cancellationToken);
            await innerTask;
        }
        
        public async Task DomainSetVcpusFlagsWrappedAsync(Binding.RemoteDomainSetVcpusFlagsArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Xdr.XdrVoid, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainSetVcpusFlags, arg, cancellationToken);
            await innerTask;
        }
        
        public async Task<int> DomainGetVcpusFlagsAsync(Binding.RemoteNonnullDomain dom, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainGetVcpusFlagsArgs();
            innerReq.Dom = dom;
            innerReq.Flags = flags;
            var innerTask = this.DomainGetVcpusFlagsWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerNum = innerRes.Num;
            return innerNum;
        }
        
        public async Task<Binding.RemoteDomainGetVcpusFlagsRet> DomainGetVcpusFlagsWrappedAsync(Binding.RemoteDomainGetVcpusFlagsArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteDomainGetVcpusFlagsRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainGetVcpusFlags, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<VirtNetStream> DomainOpenConsoleAsync(Binding.RemoteNonnullDomain dom, Xdr.XdrOption<string> devName, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainOpenConsoleArgs();
            innerReq.Dom = dom;
            innerReq.DevName = devName;
            innerReq.Flags = flags;
            var innerTask = this.DomainOpenConsoleWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            return innerRes.Item1;
        }
        
        public async Task<Tuple<VirtNetStream, Xdr.XdrVoid>> DomainOpenConsoleWrappedAsync(Binding.RemoteDomainOpenConsoleArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallWithStreamAsync<Xdr.XdrVoid, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainOpenConsole, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<int> DomainIsUpdatedAsync(Binding.RemoteNonnullDomain dom, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainIsUpdatedArgs();
            innerReq.Dom = dom;
            var innerTask = this.DomainIsUpdatedWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerUpdated = innerRes.Updated;
            return innerUpdated;
        }
        
        public async Task<Binding.RemoteDomainIsUpdatedRet> DomainIsUpdatedWrappedAsync(Binding.RemoteDomainIsUpdatedArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteDomainIsUpdatedRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainIsUpdated, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<string> ConnectGetSysinfoAsync(uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteConnectGetSysinfoArgs();
            innerReq.Flags = flags;
            var innerTask = this.ConnectGetSysinfoWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerSysinfo = innerRes.Sysinfo;
            return innerSysinfo;
        }
        
        public async Task<Binding.RemoteConnectGetSysinfoRet> ConnectGetSysinfoWrappedAsync(Binding.RemoteConnectGetSysinfoArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteConnectGetSysinfoRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcConnectGetSysinfo, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task DomainSetMemoryFlagsAsync(Binding.RemoteNonnullDomain dom, ulong memory, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainSetMemoryFlagsArgs();
            innerReq.Dom = dom;
            innerReq.Memory = memory;
            innerReq.Flags = flags;
            var innerTask = this.DomainSetMemoryFlagsWrappedAsync(innerReq, cancellationToken);
            await innerTask;
        }
        
        public async Task DomainSetMemoryFlagsWrappedAsync(Binding.RemoteDomainSetMemoryFlagsArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Xdr.XdrVoid, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainSetMemoryFlags, arg, cancellationToken);
            await innerTask;
        }
        
        public async Task DomainSetBlkioParametersAsync(Binding.RemoteNonnullDomain dom, System.Collections.Generic.List<Binding.RemoteTypedParam> @params, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainSetBlkioParametersArgs();
            innerReq.Dom = dom;
            innerReq.Params = @params;
            innerReq.Flags = flags;
            var innerTask = this.DomainSetBlkioParametersWrappedAsync(innerReq, cancellationToken);
            await innerTask;
        }
        
        public async Task DomainSetBlkioParametersWrappedAsync(Binding.RemoteDomainSetBlkioParametersArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Xdr.XdrVoid, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainSetBlkioParameters, arg, cancellationToken);
            await innerTask;
        }
        
        public async Task<Tuple<System.Collections.Generic.List<Binding.RemoteTypedParam>, int>> DomainGetBlkioParametersAsync(Binding.RemoteNonnullDomain dom, int nparams, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainGetBlkioParametersArgs();
            innerReq.Dom = dom;
            innerReq.Nparams = nparams;
            innerReq.Flags = flags;
            var innerTask = this.DomainGetBlkioParametersWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerParams = innerRes.Params;
            var innerNparams = innerRes.Nparams;
            return new Tuple<System.Collections.Generic.List<Binding.RemoteTypedParam>, int>(innerParams, innerNparams);
        }
        
        public async Task<Binding.RemoteDomainGetBlkioParametersRet> DomainGetBlkioParametersWrappedAsync(Binding.RemoteDomainGetBlkioParametersArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteDomainGetBlkioParametersRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainGetBlkioParameters, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task DomainMigrateSetMaxSpeedAsync(Binding.RemoteNonnullDomain dom, ulong bandwidth, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainMigrateSetMaxSpeedArgs();
            innerReq.Dom = dom;
            innerReq.Bandwidth = bandwidth;
            innerReq.Flags = flags;
            var innerTask = this.DomainMigrateSetMaxSpeedWrappedAsync(innerReq, cancellationToken);
            await innerTask;
        }
        
        public async Task DomainMigrateSetMaxSpeedWrappedAsync(Binding.RemoteDomainMigrateSetMaxSpeedArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Xdr.XdrVoid, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainMigrateSetMaxSpeed, arg, cancellationToken);
            await innerTask;
        }
        
        public async Task<VirtNetStream> StorageVolUploadAsync(Binding.RemoteNonnullStorageVol vol, ulong offset, ulong length, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteStorageVolUploadArgs();
            innerReq.Vol = vol;
            innerReq.Offset = offset;
            innerReq.Length = length;
            innerReq.Flags = flags;
            var innerTask = this.StorageVolUploadWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            return innerRes.Item1;
        }
        
        public async Task<Tuple<VirtNetStream, Xdr.XdrVoid>> StorageVolUploadWrappedAsync(Binding.RemoteStorageVolUploadArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallWithStreamAsync<Xdr.XdrVoid, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcStorageVolUpload, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<VirtNetStream> StorageVolDownloadAsync(Binding.RemoteNonnullStorageVol vol, ulong offset, ulong length, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteStorageVolDownloadArgs();
            innerReq.Vol = vol;
            innerReq.Offset = offset;
            innerReq.Length = length;
            innerReq.Flags = flags;
            var innerTask = this.StorageVolDownloadWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            return innerRes.Item1;
        }
        
        public async Task<Tuple<VirtNetStream, Xdr.XdrVoid>> StorageVolDownloadWrappedAsync(Binding.RemoteStorageVolDownloadArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallWithStreamAsync<Xdr.XdrVoid, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcStorageVolDownload, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task DomainInjectNmiAsync(Binding.RemoteNonnullDomain dom, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainInjectNmiArgs();
            innerReq.Dom = dom;
            innerReq.Flags = flags;
            var innerTask = this.DomainInjectNmiWrappedAsync(innerReq, cancellationToken);
            await innerTask;
        }
        
        public async Task DomainInjectNmiWrappedAsync(Binding.RemoteDomainInjectNmiArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Xdr.XdrVoid, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainInjectNmi, arg, cancellationToken);
            await innerTask;
        }
        
        public async Task<Tuple<VirtNetStream, Xdr.XdrOption<string>>> DomainScreenshotAsync(Binding.RemoteNonnullDomain dom, uint screen, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainScreenshotArgs();
            innerReq.Dom = dom;
            innerReq.Screen = screen;
            innerReq.Flags = flags;
            var innerTask = this.DomainScreenshotWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerStream = innerRes.Item1;
            var innerRes2 = innerRes.Item2;
            var innerMime = innerRes2.Mime;
            return new Tuple<VirtNetStream, Xdr.XdrOption<string>>(innerStream, innerMime);
        }
        
        public async Task<Tuple<VirtNetStream, Binding.RemoteDomainScreenshotRet>> DomainScreenshotWrappedAsync(Binding.RemoteDomainScreenshotArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallWithStreamAsync<Binding.RemoteDomainScreenshotRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainScreenshot, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<Tuple<int, int>> DomainGetStateAsync(Binding.RemoteNonnullDomain dom, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainGetStateArgs();
            innerReq.Dom = dom;
            innerReq.Flags = flags;
            var innerTask = this.DomainGetStateWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerState = innerRes.State;
            var innerReason = innerRes.Reason;
            return new Tuple<int, int>(innerState, innerReason);
        }
        
        public async Task<Binding.RemoteDomainGetStateRet> DomainGetStateWrappedAsync(Binding.RemoteDomainGetStateArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteDomainGetStateRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainGetState, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<Tuple<System.Collections.Generic.List<byte>, string>> DomainMigrateBegin3Async(Binding.RemoteNonnullDomain dom, Xdr.XdrOption<string> xmlin, ulong flags, Xdr.XdrOption<string> dname, ulong bandwidth, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainMigrateBegin3Args();
            innerReq.Dom = dom;
            innerReq.Xmlin = xmlin;
            innerReq.Flags = flags;
            innerReq.Dname = dname;
            innerReq.Bandwidth = bandwidth;
            var innerTask = this.DomainMigrateBegin3WrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerCookieOut = innerRes.CookieOut;
            var innerXml = innerRes.Xml;
            return new Tuple<System.Collections.Generic.List<byte>, string>(innerCookieOut, innerXml);
        }
        
        public async Task<Binding.RemoteDomainMigrateBegin3Ret> DomainMigrateBegin3WrappedAsync(Binding.RemoteDomainMigrateBegin3Args arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteDomainMigrateBegin3Ret, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainMigrateBegin3, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<Tuple<System.Collections.Generic.List<byte>, Xdr.XdrOption<string>>> DomainMigratePrepare3Async(System.Collections.Generic.List<byte> cookieIn, Xdr.XdrOption<string> uriIn, ulong flags, Xdr.XdrOption<string> dname, ulong bandwidth, string domXml, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainMigratePrepare3Args();
            innerReq.CookieIn = cookieIn;
            innerReq.UriIn = uriIn;
            innerReq.Flags = flags;
            innerReq.Dname = dname;
            innerReq.Bandwidth = bandwidth;
            innerReq.DomXml = domXml;
            var innerTask = this.DomainMigratePrepare3WrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerCookieOut = innerRes.CookieOut;
            var innerUriOut = innerRes.UriOut;
            return new Tuple<System.Collections.Generic.List<byte>, Xdr.XdrOption<string>>(innerCookieOut, innerUriOut);
        }
        
        public async Task<Binding.RemoteDomainMigratePrepare3Ret> DomainMigratePrepare3WrappedAsync(Binding.RemoteDomainMigratePrepare3Args arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteDomainMigratePrepare3Ret, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainMigratePrepare3, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<Tuple<VirtNetStream, System.Collections.Generic.List<byte>>> DomainMigratePrepareTunnel3Async(System.Collections.Generic.List<byte> cookieIn, ulong flags, Xdr.XdrOption<string> dname, ulong bandwidth, string domXml, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainMigratePrepareTunnel3Args();
            innerReq.CookieIn = cookieIn;
            innerReq.Flags = flags;
            innerReq.Dname = dname;
            innerReq.Bandwidth = bandwidth;
            innerReq.DomXml = domXml;
            var innerTask = this.DomainMigratePrepareTunnel3WrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerStream = innerRes.Item1;
            var innerRes2 = innerRes.Item2;
            var innerCookieOut = innerRes2.CookieOut;
            return new Tuple<VirtNetStream, System.Collections.Generic.List<byte>>(innerStream, innerCookieOut);
        }
        
        public async Task<Tuple<VirtNetStream, Binding.RemoteDomainMigratePrepareTunnel3Ret>> DomainMigratePrepareTunnel3WrappedAsync(Binding.RemoteDomainMigratePrepareTunnel3Args arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallWithStreamAsync<Binding.RemoteDomainMigratePrepareTunnel3Ret, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainMigratePrepareTunnel3, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<System.Collections.Generic.List<byte>> DomainMigratePerform3Async(Binding.RemoteNonnullDomain dom, Xdr.XdrOption<string> xmlin, System.Collections.Generic.List<byte> cookieIn, Xdr.XdrOption<string> dconnuri, Xdr.XdrOption<string> uri, ulong flags, Xdr.XdrOption<string> dname, ulong bandwidth, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainMigratePerform3Args();
            innerReq.Dom = dom;
            innerReq.Xmlin = xmlin;
            innerReq.CookieIn = cookieIn;
            innerReq.Dconnuri = dconnuri;
            innerReq.Uri = uri;
            innerReq.Flags = flags;
            innerReq.Dname = dname;
            innerReq.Bandwidth = bandwidth;
            var innerTask = this.DomainMigratePerform3WrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerCookieOut = innerRes.CookieOut;
            return innerCookieOut;
        }
        
        public async Task<Binding.RemoteDomainMigratePerform3Ret> DomainMigratePerform3WrappedAsync(Binding.RemoteDomainMigratePerform3Args arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteDomainMigratePerform3Ret, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainMigratePerform3, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<Tuple<Binding.RemoteNonnullDomain, System.Collections.Generic.List<byte>>> DomainMigrateFinish3Async(string dname, System.Collections.Generic.List<byte> cookieIn, Xdr.XdrOption<string> dconnuri, Xdr.XdrOption<string> uri, ulong flags, int cancelled, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainMigrateFinish3Args();
            innerReq.Dname = dname;
            innerReq.CookieIn = cookieIn;
            innerReq.Dconnuri = dconnuri;
            innerReq.Uri = uri;
            innerReq.Flags = flags;
            innerReq.Cancelled = cancelled;
            var innerTask = this.DomainMigrateFinish3WrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerDom = innerRes.Dom;
            var innerCookieOut = innerRes.CookieOut;
            return new Tuple<Binding.RemoteNonnullDomain, System.Collections.Generic.List<byte>>(innerDom, innerCookieOut);
        }
        
        public async Task<Binding.RemoteDomainMigrateFinish3Ret> DomainMigrateFinish3WrappedAsync(Binding.RemoteDomainMigrateFinish3Args arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteDomainMigrateFinish3Ret, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainMigrateFinish3, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task DomainMigrateConfirm3Async(Binding.RemoteNonnullDomain dom, System.Collections.Generic.List<byte> cookieIn, ulong flags, int cancelled, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainMigrateConfirm3Args();
            innerReq.Dom = dom;
            innerReq.CookieIn = cookieIn;
            innerReq.Flags = flags;
            innerReq.Cancelled = cancelled;
            var innerTask = this.DomainMigrateConfirm3WrappedAsync(innerReq, cancellationToken);
            await innerTask;
        }
        
        public async Task DomainMigrateConfirm3WrappedAsync(Binding.RemoteDomainMigrateConfirm3Args arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Xdr.XdrVoid, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainMigrateConfirm3, arg, cancellationToken);
            await innerTask;
        }
        
        public async Task DomainSetSchedulerParametersFlagsAsync(Binding.RemoteNonnullDomain dom, System.Collections.Generic.List<Binding.RemoteTypedParam> @params, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainSetSchedulerParametersFlagsArgs();
            innerReq.Dom = dom;
            innerReq.Params = @params;
            innerReq.Flags = flags;
            var innerTask = this.DomainSetSchedulerParametersFlagsWrappedAsync(innerReq, cancellationToken);
            await innerTask;
        }
        
        public async Task DomainSetSchedulerParametersFlagsWrappedAsync(Binding.RemoteDomainSetSchedulerParametersFlagsArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Xdr.XdrVoid, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainSetSchedulerParametersFlags, arg, cancellationToken);
            await innerTask;
        }
        
        public async Task InterfaceChangeBeginAsync(uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteInterfaceChangeBeginArgs();
            innerReq.Flags = flags;
            var innerTask = this.InterfaceChangeBeginWrappedAsync(innerReq, cancellationToken);
            await innerTask;
        }
        
        public async Task InterfaceChangeBeginWrappedAsync(Binding.RemoteInterfaceChangeBeginArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Xdr.XdrVoid, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcInterfaceChangeBegin, arg, cancellationToken);
            await innerTask;
        }
        
        public async Task InterfaceChangeCommitAsync(uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteInterfaceChangeCommitArgs();
            innerReq.Flags = flags;
            var innerTask = this.InterfaceChangeCommitWrappedAsync(innerReq, cancellationToken);
            await innerTask;
        }
        
        public async Task InterfaceChangeCommitWrappedAsync(Binding.RemoteInterfaceChangeCommitArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Xdr.XdrVoid, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcInterfaceChangeCommit, arg, cancellationToken);
            await innerTask;
        }
        
        public async Task InterfaceChangeRollbackAsync(uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteInterfaceChangeRollbackArgs();
            innerReq.Flags = flags;
            var innerTask = this.InterfaceChangeRollbackWrappedAsync(innerReq, cancellationToken);
            await innerTask;
        }
        
        public async Task InterfaceChangeRollbackWrappedAsync(Binding.RemoteInterfaceChangeRollbackArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Xdr.XdrVoid, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcInterfaceChangeRollback, arg, cancellationToken);
            await innerTask;
        }
        
        public async Task<System.Collections.Generic.List<Binding.RemoteTypedParam>> DomainGetSchedulerParametersFlagsAsync(Binding.RemoteNonnullDomain dom, int nparams, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainGetSchedulerParametersFlagsArgs();
            innerReq.Dom = dom;
            innerReq.Nparams = nparams;
            innerReq.Flags = flags;
            var innerTask = this.DomainGetSchedulerParametersFlagsWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerParams = innerRes.Params;
            return innerParams;
        }
        
        public async Task<Binding.RemoteDomainGetSchedulerParametersFlagsRet> DomainGetSchedulerParametersFlagsWrappedAsync(Binding.RemoteDomainGetSchedulerParametersFlagsArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteDomainGetSchedulerParametersFlagsRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainGetSchedulerParametersFlags, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task DomainPinVcpuFlagsAsync(Binding.RemoteNonnullDomain dom, uint vcpu, System.Collections.Generic.List<byte> cpumap, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainPinVcpuFlagsArgs();
            innerReq.Dom = dom;
            innerReq.Vcpu = vcpu;
            innerReq.Cpumap = cpumap;
            innerReq.Flags = flags;
            var innerTask = this.DomainPinVcpuFlagsWrappedAsync(innerReq, cancellationToken);
            await innerTask;
        }
        
        public async Task DomainPinVcpuFlagsWrappedAsync(Binding.RemoteDomainPinVcpuFlagsArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Xdr.XdrVoid, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainPinVcpuFlags, arg, cancellationToken);
            await innerTask;
        }
        
        public async Task DomainSendKeyAsync(Binding.RemoteNonnullDomain dom, uint codeset, uint holdtime, System.Collections.Generic.List<uint> keycodes, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainSendKeyArgs();
            innerReq.Dom = dom;
            innerReq.Codeset = codeset;
            innerReq.Holdtime = holdtime;
            innerReq.Keycodes = keycodes;
            innerReq.Flags = flags;
            var innerTask = this.DomainSendKeyWrappedAsync(innerReq, cancellationToken);
            await innerTask;
        }
        
        public async Task DomainSendKeyWrappedAsync(Binding.RemoteDomainSendKeyArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Xdr.XdrVoid, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainSendKey, arg, cancellationToken);
            await innerTask;
        }
        
        public async Task<Tuple<System.Collections.Generic.List<Binding.RemoteNodeGetCpuStats>, int>> NodeGetCpuStatsAsync(int cpuNum, int nparams, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteNodeGetCpuStatsArgs();
            innerReq.CpuNum = cpuNum;
            innerReq.Nparams = nparams;
            innerReq.Flags = flags;
            var innerTask = this.NodeGetCpuStatsWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerParams = innerRes.Params;
            var innerNparams = innerRes.Nparams;
            return new Tuple<System.Collections.Generic.List<Binding.RemoteNodeGetCpuStats>, int>(innerParams, innerNparams);
        }
        
        public async Task<Binding.RemoteNodeGetCpuStatsRet> NodeGetCpuStatsWrappedAsync(Binding.RemoteNodeGetCpuStatsArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteNodeGetCpuStatsRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcNodeGetCpuStats, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<Tuple<System.Collections.Generic.List<Binding.RemoteNodeGetMemoryStats>, int>> NodeGetMemoryStatsAsync(int nparams, int cellNum, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteNodeGetMemoryStatsArgs();
            innerReq.Nparams = nparams;
            innerReq.CellNum = cellNum;
            innerReq.Flags = flags;
            var innerTask = this.NodeGetMemoryStatsWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerParams = innerRes.Params;
            var innerNparams = innerRes.Nparams;
            return new Tuple<System.Collections.Generic.List<Binding.RemoteNodeGetMemoryStats>, int>(innerParams, innerNparams);
        }
        
        public async Task<Binding.RemoteNodeGetMemoryStatsRet> NodeGetMemoryStatsWrappedAsync(Binding.RemoteNodeGetMemoryStatsArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteNodeGetMemoryStatsRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcNodeGetMemoryStats, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<Tuple<uint, uint, ulong>> DomainGetControlInfoAsync(Binding.RemoteNonnullDomain dom, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainGetControlInfoArgs();
            innerReq.Dom = dom;
            innerReq.Flags = flags;
            var innerTask = this.DomainGetControlInfoWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerState = innerRes.State;
            var innerDetails = innerRes.Details;
            var innerStateTime = innerRes.StateTime;
            return new Tuple<uint, uint, ulong>(innerState, innerDetails, innerStateTime);
        }
        
        public async Task<Binding.RemoteDomainGetControlInfoRet> DomainGetControlInfoWrappedAsync(Binding.RemoteDomainGetControlInfoArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteDomainGetControlInfoRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainGetControlInfo, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<Tuple<System.Collections.Generic.List<byte>, int>> DomainGetVcpuPinInfoAsync(Binding.RemoteNonnullDomain dom, int ncpumaps, int maplen, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainGetVcpuPinInfoArgs();
            innerReq.Dom = dom;
            innerReq.Ncpumaps = ncpumaps;
            innerReq.Maplen = maplen;
            innerReq.Flags = flags;
            var innerTask = this.DomainGetVcpuPinInfoWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerCpumaps = innerRes.Cpumaps;
            var innerNum = innerRes.Num;
            return new Tuple<System.Collections.Generic.List<byte>, int>(innerCpumaps, innerNum);
        }
        
        public async Task<Binding.RemoteDomainGetVcpuPinInfoRet> DomainGetVcpuPinInfoWrappedAsync(Binding.RemoteDomainGetVcpuPinInfoArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteDomainGetVcpuPinInfoRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainGetVcpuPinInfo, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task DomainUndefineFlagsAsync(Binding.RemoteNonnullDomain dom, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainUndefineFlagsArgs();
            innerReq.Dom = dom;
            innerReq.Flags = flags;
            var innerTask = this.DomainUndefineFlagsWrappedAsync(innerReq, cancellationToken);
            await innerTask;
        }
        
        public async Task DomainUndefineFlagsWrappedAsync(Binding.RemoteDomainUndefineFlagsArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Xdr.XdrVoid, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainUndefineFlags, arg, cancellationToken);
            await innerTask;
        }
        
        public async Task DomainSaveFlagsAsync(Binding.RemoteNonnullDomain dom, string to, Xdr.XdrOption<string> dxml, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainSaveFlagsArgs();
            innerReq.Dom = dom;
            innerReq.To = to;
            innerReq.Dxml = dxml;
            innerReq.Flags = flags;
            var innerTask = this.DomainSaveFlagsWrappedAsync(innerReq, cancellationToken);
            await innerTask;
        }
        
        public async Task DomainSaveFlagsWrappedAsync(Binding.RemoteDomainSaveFlagsArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Xdr.XdrVoid, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainSaveFlags, arg, cancellationToken);
            await innerTask;
        }
        
        public async Task DomainRestoreFlagsAsync(string from, Xdr.XdrOption<string> dxml, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainRestoreFlagsArgs();
            innerReq.From = from;
            innerReq.Dxml = dxml;
            innerReq.Flags = flags;
            var innerTask = this.DomainRestoreFlagsWrappedAsync(innerReq, cancellationToken);
            await innerTask;
        }
        
        public async Task DomainRestoreFlagsWrappedAsync(Binding.RemoteDomainRestoreFlagsArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Xdr.XdrVoid, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainRestoreFlags, arg, cancellationToken);
            await innerTask;
        }
        
        public async Task DomainDestroyFlagsAsync(Binding.RemoteNonnullDomain dom, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainDestroyFlagsArgs();
            innerReq.Dom = dom;
            innerReq.Flags = flags;
            var innerTask = this.DomainDestroyFlagsWrappedAsync(innerReq, cancellationToken);
            await innerTask;
        }
        
        public async Task DomainDestroyFlagsWrappedAsync(Binding.RemoteDomainDestroyFlagsArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Xdr.XdrVoid, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainDestroyFlags, arg, cancellationToken);
            await innerTask;
        }
        
        public async Task<string> DomainSaveImageGetXmlDescAsync(string file, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainSaveImageGetXmlDescArgs();
            innerReq.File = file;
            innerReq.Flags = flags;
            var innerTask = this.DomainSaveImageGetXmlDescWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerXml = innerRes.Xml;
            return innerXml;
        }
        
        public async Task<Binding.RemoteDomainSaveImageGetXmlDescRet> DomainSaveImageGetXmlDescWrappedAsync(Binding.RemoteDomainSaveImageGetXmlDescArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteDomainSaveImageGetXmlDescRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainSaveImageGetXmlDesc, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task DomainSaveImageDefineXmlAsync(string file, string dxml, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainSaveImageDefineXmlArgs();
            innerReq.File = file;
            innerReq.Dxml = dxml;
            innerReq.Flags = flags;
            var innerTask = this.DomainSaveImageDefineXmlWrappedAsync(innerReq, cancellationToken);
            await innerTask;
        }
        
        public async Task DomainSaveImageDefineXmlWrappedAsync(Binding.RemoteDomainSaveImageDefineXmlArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Xdr.XdrVoid, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainSaveImageDefineXml, arg, cancellationToken);
            await innerTask;
        }
        
        public async Task DomainBlockJobAbortAsync(Binding.RemoteNonnullDomain dom, string path, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainBlockJobAbortArgs();
            innerReq.Dom = dom;
            innerReq.Path = path;
            innerReq.Flags = flags;
            var innerTask = this.DomainBlockJobAbortWrappedAsync(innerReq, cancellationToken);
            await innerTask;
        }
        
        public async Task DomainBlockJobAbortWrappedAsync(Binding.RemoteDomainBlockJobAbortArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Xdr.XdrVoid, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainBlockJobAbort, arg, cancellationToken);
            await innerTask;
        }
        
        public async Task<Tuple<int, int, ulong, ulong, ulong>> DomainGetBlockJobInfoAsync(Binding.RemoteNonnullDomain dom, string path, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainGetBlockJobInfoArgs();
            innerReq.Dom = dom;
            innerReq.Path = path;
            innerReq.Flags = flags;
            var innerTask = this.DomainGetBlockJobInfoWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerFound = innerRes.Found;
            var innerType = innerRes.Type;
            var innerBandwidth = innerRes.Bandwidth;
            var innerCur = innerRes.Cur;
            var innerEnd = innerRes.End;
            return new Tuple<int, int, ulong, ulong, ulong>(innerFound, innerType, innerBandwidth, innerCur, innerEnd);
        }
        
        public async Task<Binding.RemoteDomainGetBlockJobInfoRet> DomainGetBlockJobInfoWrappedAsync(Binding.RemoteDomainGetBlockJobInfoArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteDomainGetBlockJobInfoRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainGetBlockJobInfo, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task DomainBlockJobSetSpeedAsync(Binding.RemoteNonnullDomain dom, string path, ulong bandwidth, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainBlockJobSetSpeedArgs();
            innerReq.Dom = dom;
            innerReq.Path = path;
            innerReq.Bandwidth = bandwidth;
            innerReq.Flags = flags;
            var innerTask = this.DomainBlockJobSetSpeedWrappedAsync(innerReq, cancellationToken);
            await innerTask;
        }
        
        public async Task DomainBlockJobSetSpeedWrappedAsync(Binding.RemoteDomainBlockJobSetSpeedArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Xdr.XdrVoid, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainBlockJobSetSpeed, arg, cancellationToken);
            await innerTask;
        }
        
        public async Task DomainBlockPullAsync(Binding.RemoteNonnullDomain dom, string path, ulong bandwidth, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainBlockPullArgs();
            innerReq.Dom = dom;
            innerReq.Path = path;
            innerReq.Bandwidth = bandwidth;
            innerReq.Flags = flags;
            var innerTask = this.DomainBlockPullWrappedAsync(innerReq, cancellationToken);
            await innerTask;
        }
        
        public async Task DomainBlockPullWrappedAsync(Binding.RemoteDomainBlockPullArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Xdr.XdrVoid, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainBlockPull, arg, cancellationToken);
            await innerTask;
        }
        
        public async Task<ulong> DomainMigrateGetMaxSpeedAsync(Binding.RemoteNonnullDomain dom, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainMigrateGetMaxSpeedArgs();
            innerReq.Dom = dom;
            innerReq.Flags = flags;
            var innerTask = this.DomainMigrateGetMaxSpeedWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerBandwidth = innerRes.Bandwidth;
            return innerBandwidth;
        }
        
        public async Task<Binding.RemoteDomainMigrateGetMaxSpeedRet> DomainMigrateGetMaxSpeedWrappedAsync(Binding.RemoteDomainMigrateGetMaxSpeedArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteDomainMigrateGetMaxSpeedRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainMigrateGetMaxSpeed, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<Tuple<System.Collections.Generic.List<Binding.RemoteTypedParam>, int>> DomainBlockStatsFlagsAsync(Binding.RemoteNonnullDomain dom, string path, int nparams, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainBlockStatsFlagsArgs();
            innerReq.Dom = dom;
            innerReq.Path = path;
            innerReq.Nparams = nparams;
            innerReq.Flags = flags;
            var innerTask = this.DomainBlockStatsFlagsWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerParams = innerRes.Params;
            var innerNparams = innerRes.Nparams;
            return new Tuple<System.Collections.Generic.List<Binding.RemoteTypedParam>, int>(innerParams, innerNparams);
        }
        
        public async Task<Binding.RemoteDomainBlockStatsFlagsRet> DomainBlockStatsFlagsWrappedAsync(Binding.RemoteDomainBlockStatsFlagsArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteDomainBlockStatsFlagsRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainBlockStatsFlags, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<Binding.RemoteNonnullDomainSnapshot> DomainSnapshotGetParentAsync(Binding.RemoteNonnullDomainSnapshot snap, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainSnapshotGetParentArgs();
            innerReq.Snap = snap;
            innerReq.Flags = flags;
            var innerTask = this.DomainSnapshotGetParentWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerSnap = innerRes.Snap;
            return innerSnap;
        }
        
        public async Task<Binding.RemoteDomainSnapshotGetParentRet> DomainSnapshotGetParentWrappedAsync(Binding.RemoteDomainSnapshotGetParentArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteDomainSnapshotGetParentRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainSnapshotGetParent, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task DomainResetAsync(Binding.RemoteNonnullDomain dom, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainResetArgs();
            innerReq.Dom = dom;
            innerReq.Flags = flags;
            var innerTask = this.DomainResetWrappedAsync(innerReq, cancellationToken);
            await innerTask;
        }
        
        public async Task DomainResetWrappedAsync(Binding.RemoteDomainResetArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Xdr.XdrVoid, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainReset, arg, cancellationToken);
            await innerTask;
        }
        
        public async Task<int> DomainSnapshotNumChildrenAsync(Binding.RemoteNonnullDomainSnapshot snap, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainSnapshotNumChildrenArgs();
            innerReq.Snap = snap;
            innerReq.Flags = flags;
            var innerTask = this.DomainSnapshotNumChildrenWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerNum = innerRes.Num;
            return innerNum;
        }
        
        public async Task<Binding.RemoteDomainSnapshotNumChildrenRet> DomainSnapshotNumChildrenWrappedAsync(Binding.RemoteDomainSnapshotNumChildrenArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteDomainSnapshotNumChildrenRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainSnapshotNumChildren, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<string> DomainSnapshotListChildrenNamesAsync(Binding.RemoteNonnullDomainSnapshot snap, int maxnames, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainSnapshotListChildrenNamesArgs();
            innerReq.Snap = snap;
            innerReq.Maxnames = maxnames;
            innerReq.Flags = flags;
            var innerTask = this.DomainSnapshotListChildrenNamesWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerNames = innerRes.Names;
            return innerNames;
        }
        
        public async Task<Binding.RemoteDomainSnapshotListChildrenNamesRet> DomainSnapshotListChildrenNamesWrappedAsync(Binding.RemoteDomainSnapshotListChildrenNamesArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteDomainSnapshotListChildrenNamesRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainSnapshotListChildrenNames, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task DomainOpenGraphicsAsync(Binding.RemoteNonnullDomain dom, uint idx, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainOpenGraphicsArgs();
            innerReq.Dom = dom;
            innerReq.Idx = idx;
            innerReq.Flags = flags;
            var innerTask = this.DomainOpenGraphicsWrappedAsync(innerReq, cancellationToken);
            await innerTask;
        }
        
        public async Task DomainOpenGraphicsWrappedAsync(Binding.RemoteDomainOpenGraphicsArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Xdr.XdrVoid, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainOpenGraphics, arg, cancellationToken);
            await innerTask;
        }
        
        public async Task NodeSuspendForDurationAsync(uint target, ulong duration, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteNodeSuspendForDurationArgs();
            innerReq.Target = target;
            innerReq.Duration = duration;
            innerReq.Flags = flags;
            var innerTask = this.NodeSuspendForDurationWrappedAsync(innerReq, cancellationToken);
            await innerTask;
        }
        
        public async Task NodeSuspendForDurationWrappedAsync(Binding.RemoteNodeSuspendForDurationArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Xdr.XdrVoid, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcNodeSuspendForDuration, arg, cancellationToken);
            await innerTask;
        }
        
        public async Task DomainBlockResizeAsync(Binding.RemoteNonnullDomain dom, string disk, ulong size, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainBlockResizeArgs();
            innerReq.Dom = dom;
            innerReq.Disk = disk;
            innerReq.Size = size;
            innerReq.Flags = flags;
            var innerTask = this.DomainBlockResizeWrappedAsync(innerReq, cancellationToken);
            await innerTask;
        }
        
        public async Task DomainBlockResizeWrappedAsync(Binding.RemoteDomainBlockResizeArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Xdr.XdrVoid, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainBlockResize, arg, cancellationToken);
            await innerTask;
        }
        
        public async Task DomainSetBlockIoTuneAsync(Binding.RemoteNonnullDomain dom, string disk, System.Collections.Generic.List<Binding.RemoteTypedParam> @params, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainSetBlockIoTuneArgs();
            innerReq.Dom = dom;
            innerReq.Disk = disk;
            innerReq.Params = @params;
            innerReq.Flags = flags;
            var innerTask = this.DomainSetBlockIoTuneWrappedAsync(innerReq, cancellationToken);
            await innerTask;
        }
        
        public async Task DomainSetBlockIoTuneWrappedAsync(Binding.RemoteDomainSetBlockIoTuneArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Xdr.XdrVoid, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainSetBlockIoTune, arg, cancellationToken);
            await innerTask;
        }
        
        public async Task<Tuple<System.Collections.Generic.List<Binding.RemoteTypedParam>, int>> DomainGetBlockIoTuneAsync(Binding.RemoteNonnullDomain dom, Xdr.XdrOption<string> disk, int nparams, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainGetBlockIoTuneArgs();
            innerReq.Dom = dom;
            innerReq.Disk = disk;
            innerReq.Nparams = nparams;
            innerReq.Flags = flags;
            var innerTask = this.DomainGetBlockIoTuneWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerParams = innerRes.Params;
            var innerNparams = innerRes.Nparams;
            return new Tuple<System.Collections.Generic.List<Binding.RemoteTypedParam>, int>(innerParams, innerNparams);
        }
        
        public async Task<Binding.RemoteDomainGetBlockIoTuneRet> DomainGetBlockIoTuneWrappedAsync(Binding.RemoteDomainGetBlockIoTuneArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteDomainGetBlockIoTuneRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainGetBlockIoTune, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task DomainSetNumaParametersAsync(Binding.RemoteNonnullDomain dom, System.Collections.Generic.List<Binding.RemoteTypedParam> @params, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainSetNumaParametersArgs();
            innerReq.Dom = dom;
            innerReq.Params = @params;
            innerReq.Flags = flags;
            var innerTask = this.DomainSetNumaParametersWrappedAsync(innerReq, cancellationToken);
            await innerTask;
        }
        
        public async Task DomainSetNumaParametersWrappedAsync(Binding.RemoteDomainSetNumaParametersArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Xdr.XdrVoid, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainSetNumaParameters, arg, cancellationToken);
            await innerTask;
        }
        
        public async Task<Tuple<System.Collections.Generic.List<Binding.RemoteTypedParam>, int>> DomainGetNumaParametersAsync(Binding.RemoteNonnullDomain dom, int nparams, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainGetNumaParametersArgs();
            innerReq.Dom = dom;
            innerReq.Nparams = nparams;
            innerReq.Flags = flags;
            var innerTask = this.DomainGetNumaParametersWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerParams = innerRes.Params;
            var innerNparams = innerRes.Nparams;
            return new Tuple<System.Collections.Generic.List<Binding.RemoteTypedParam>, int>(innerParams, innerNparams);
        }
        
        public async Task<Binding.RemoteDomainGetNumaParametersRet> DomainGetNumaParametersWrappedAsync(Binding.RemoteDomainGetNumaParametersArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteDomainGetNumaParametersRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainGetNumaParameters, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task DomainSetInterfaceParametersAsync(Binding.RemoteNonnullDomain dom, string device, System.Collections.Generic.List<Binding.RemoteTypedParam> @params, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainSetInterfaceParametersArgs();
            innerReq.Dom = dom;
            innerReq.Device = device;
            innerReq.Params = @params;
            innerReq.Flags = flags;
            var innerTask = this.DomainSetInterfaceParametersWrappedAsync(innerReq, cancellationToken);
            await innerTask;
        }
        
        public async Task DomainSetInterfaceParametersWrappedAsync(Binding.RemoteDomainSetInterfaceParametersArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Xdr.XdrVoid, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainSetInterfaceParameters, arg, cancellationToken);
            await innerTask;
        }
        
        public async Task<Tuple<System.Collections.Generic.List<Binding.RemoteTypedParam>, int>> DomainGetInterfaceParametersAsync(Binding.RemoteNonnullDomain dom, string device, int nparams, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainGetInterfaceParametersArgs();
            innerReq.Dom = dom;
            innerReq.Device = device;
            innerReq.Nparams = nparams;
            innerReq.Flags = flags;
            var innerTask = this.DomainGetInterfaceParametersWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerParams = innerRes.Params;
            var innerNparams = innerRes.Nparams;
            return new Tuple<System.Collections.Generic.List<Binding.RemoteTypedParam>, int>(innerParams, innerNparams);
        }
        
        public async Task<Binding.RemoteDomainGetInterfaceParametersRet> DomainGetInterfaceParametersWrappedAsync(Binding.RemoteDomainGetInterfaceParametersArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteDomainGetInterfaceParametersRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainGetInterfaceParameters, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task DomainShutdownFlagsAsync(Binding.RemoteNonnullDomain dom, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainShutdownFlagsArgs();
            innerReq.Dom = dom;
            innerReq.Flags = flags;
            var innerTask = this.DomainShutdownFlagsWrappedAsync(innerReq, cancellationToken);
            await innerTask;
        }
        
        public async Task DomainShutdownFlagsWrappedAsync(Binding.RemoteDomainShutdownFlagsArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Xdr.XdrVoid, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainShutdownFlags, arg, cancellationToken);
            await innerTask;
        }
        
        public async Task StorageVolWipePatternAsync(Binding.RemoteNonnullStorageVol vol, uint algorithm, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteStorageVolWipePatternArgs();
            innerReq.Vol = vol;
            innerReq.Algorithm = algorithm;
            innerReq.Flags = flags;
            var innerTask = this.StorageVolWipePatternWrappedAsync(innerReq, cancellationToken);
            await innerTask;
        }
        
        public async Task StorageVolWipePatternWrappedAsync(Binding.RemoteStorageVolWipePatternArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Xdr.XdrVoid, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcStorageVolWipePattern, arg, cancellationToken);
            await innerTask;
        }
        
        public async Task StorageVolResizeAsync(Binding.RemoteNonnullStorageVol vol, ulong capacity, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteStorageVolResizeArgs();
            innerReq.Vol = vol;
            innerReq.Capacity = capacity;
            innerReq.Flags = flags;
            var innerTask = this.StorageVolResizeWrappedAsync(innerReq, cancellationToken);
            await innerTask;
        }
        
        public async Task StorageVolResizeWrappedAsync(Binding.RemoteStorageVolResizeArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Xdr.XdrVoid, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcStorageVolResize, arg, cancellationToken);
            await innerTask;
        }
        
        public async Task DomainPmSuspendForDurationAsync(Binding.RemoteNonnullDomain dom, uint target, ulong duration, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainPmSuspendForDurationArgs();
            innerReq.Dom = dom;
            innerReq.Target = target;
            innerReq.Duration = duration;
            innerReq.Flags = flags;
            var innerTask = this.DomainPmSuspendForDurationWrappedAsync(innerReq, cancellationToken);
            await innerTask;
        }
        
        public async Task DomainPmSuspendForDurationWrappedAsync(Binding.RemoteDomainPmSuspendForDurationArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Xdr.XdrVoid, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainPmSuspendForDuration, arg, cancellationToken);
            await innerTask;
        }
        
        public async Task<Tuple<System.Collections.Generic.List<Binding.RemoteTypedParam>, int>> DomainGetCpuStatsAsync(Binding.RemoteNonnullDomain dom, uint nparams, int startCpu, uint ncpus, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainGetCpuStatsArgs();
            innerReq.Dom = dom;
            innerReq.Nparams = nparams;
            innerReq.StartCpu = startCpu;
            innerReq.Ncpus = ncpus;
            innerReq.Flags = flags;
            var innerTask = this.DomainGetCpuStatsWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerParams = innerRes.Params;
            var innerNparams = innerRes.Nparams;
            return new Tuple<System.Collections.Generic.List<Binding.RemoteTypedParam>, int>(innerParams, innerNparams);
        }
        
        public async Task<Binding.RemoteDomainGetCpuStatsRet> DomainGetCpuStatsWrappedAsync(Binding.RemoteDomainGetCpuStatsArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteDomainGetCpuStatsRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainGetCpuStats, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<Tuple<System.Collections.Generic.List<Binding.RemoteDomainDiskError>, int>> DomainGetDiskErrorsAsync(Binding.RemoteNonnullDomain dom, uint maxerrors, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainGetDiskErrorsArgs();
            innerReq.Dom = dom;
            innerReq.Maxerrors = maxerrors;
            innerReq.Flags = flags;
            var innerTask = this.DomainGetDiskErrorsWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerErrors = innerRes.Errors;
            var innerNerrors = innerRes.Nerrors;
            return new Tuple<System.Collections.Generic.List<Binding.RemoteDomainDiskError>, int>(innerErrors, innerNerrors);
        }
        
        public async Task<Binding.RemoteDomainGetDiskErrorsRet> DomainGetDiskErrorsWrappedAsync(Binding.RemoteDomainGetDiskErrorsArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteDomainGetDiskErrorsRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainGetDiskErrors, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task DomainSetMetadataAsync(Binding.RemoteNonnullDomain dom, int type, Xdr.XdrOption<string> metadata, Xdr.XdrOption<string> key, Xdr.XdrOption<string> uri, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainSetMetadataArgs();
            innerReq.Dom = dom;
            innerReq.Type = type;
            innerReq.Metadata = metadata;
            innerReq.Key = key;
            innerReq.Uri = uri;
            innerReq.Flags = flags;
            var innerTask = this.DomainSetMetadataWrappedAsync(innerReq, cancellationToken);
            await innerTask;
        }
        
        public async Task DomainSetMetadataWrappedAsync(Binding.RemoteDomainSetMetadataArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Xdr.XdrVoid, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainSetMetadata, arg, cancellationToken);
            await innerTask;
        }
        
        public async Task<string> DomainGetMetadataAsync(Binding.RemoteNonnullDomain dom, int type, Xdr.XdrOption<string> uri, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainGetMetadataArgs();
            innerReq.Dom = dom;
            innerReq.Type = type;
            innerReq.Uri = uri;
            innerReq.Flags = flags;
            var innerTask = this.DomainGetMetadataWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerMetadata = innerRes.Metadata;
            return innerMetadata;
        }
        
        public async Task<Binding.RemoteDomainGetMetadataRet> DomainGetMetadataWrappedAsync(Binding.RemoteDomainGetMetadataArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteDomainGetMetadataRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainGetMetadata, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task DomainBlockRebaseAsync(Binding.RemoteNonnullDomain dom, string path, Xdr.XdrOption<string> @base, ulong bandwidth, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainBlockRebaseArgs();
            innerReq.Dom = dom;
            innerReq.Path = path;
            innerReq.Base = @base;
            innerReq.Bandwidth = bandwidth;
            innerReq.Flags = flags;
            var innerTask = this.DomainBlockRebaseWrappedAsync(innerReq, cancellationToken);
            await innerTask;
        }
        
        public async Task DomainBlockRebaseWrappedAsync(Binding.RemoteDomainBlockRebaseArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Xdr.XdrVoid, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainBlockRebase, arg, cancellationToken);
            await innerTask;
        }
        
        public async Task DomainPmWakeupAsync(Binding.RemoteNonnullDomain dom, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainPmWakeupArgs();
            innerReq.Dom = dom;
            innerReq.Flags = flags;
            var innerTask = this.DomainPmWakeupWrappedAsync(innerReq, cancellationToken);
            await innerTask;
        }
        
        public async Task DomainPmWakeupWrappedAsync(Binding.RemoteDomainPmWakeupArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Xdr.XdrVoid, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainPmWakeup, arg, cancellationToken);
            await innerTask;
        }
        
        public async Task<int> DomainSnapshotIsCurrentAsync(Binding.RemoteNonnullDomainSnapshot snap, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainSnapshotIsCurrentArgs();
            innerReq.Snap = snap;
            innerReq.Flags = flags;
            var innerTask = this.DomainSnapshotIsCurrentWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerCurrent = innerRes.Current;
            return innerCurrent;
        }
        
        public async Task<Binding.RemoteDomainSnapshotIsCurrentRet> DomainSnapshotIsCurrentWrappedAsync(Binding.RemoteDomainSnapshotIsCurrentArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteDomainSnapshotIsCurrentRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainSnapshotIsCurrent, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<int> DomainSnapshotHasMetadataAsync(Binding.RemoteNonnullDomainSnapshot snap, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainSnapshotHasMetadataArgs();
            innerReq.Snap = snap;
            innerReq.Flags = flags;
            var innerTask = this.DomainSnapshotHasMetadataWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerMetadata = innerRes.Metadata;
            return innerMetadata;
        }
        
        public async Task<Binding.RemoteDomainSnapshotHasMetadataRet> DomainSnapshotHasMetadataWrappedAsync(Binding.RemoteDomainSnapshotHasMetadataArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteDomainSnapshotHasMetadataRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainSnapshotHasMetadata, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<Tuple<System.Collections.Generic.List<Binding.RemoteNonnullDomain>, uint>> ConnectListAllDomainsAsync(int needResults, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteConnectListAllDomainsArgs();
            innerReq.NeedResults = needResults;
            innerReq.Flags = flags;
            var innerTask = this.ConnectListAllDomainsWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerDomains = innerRes.Domains;
            var innerRet = innerRes.Ret;
            return new Tuple<System.Collections.Generic.List<Binding.RemoteNonnullDomain>, uint>(innerDomains, innerRet);
        }
        
        public async Task<Binding.RemoteConnectListAllDomainsRet> ConnectListAllDomainsWrappedAsync(Binding.RemoteConnectListAllDomainsArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteConnectListAllDomainsRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcConnectListAllDomains, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<Tuple<System.Collections.Generic.List<Binding.RemoteNonnullDomainSnapshot>, int>> DomainListAllSnapshotsAsync(Binding.RemoteNonnullDomain dom, int needResults, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainListAllSnapshotsArgs();
            innerReq.Dom = dom;
            innerReq.NeedResults = needResults;
            innerReq.Flags = flags;
            var innerTask = this.DomainListAllSnapshotsWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerSnapshots = innerRes.Snapshots;
            var innerRet = innerRes.Ret;
            return new Tuple<System.Collections.Generic.List<Binding.RemoteNonnullDomainSnapshot>, int>(innerSnapshots, innerRet);
        }
        
        public async Task<Binding.RemoteDomainListAllSnapshotsRet> DomainListAllSnapshotsWrappedAsync(Binding.RemoteDomainListAllSnapshotsArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteDomainListAllSnapshotsRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainListAllSnapshots, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<Tuple<System.Collections.Generic.List<Binding.RemoteNonnullDomainSnapshot>, int>> DomainSnapshotListAllChildrenAsync(Binding.RemoteNonnullDomainSnapshot snapshot, int needResults, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainSnapshotListAllChildrenArgs();
            innerReq.Snapshot = snapshot;
            innerReq.NeedResults = needResults;
            innerReq.Flags = flags;
            var innerTask = this.DomainSnapshotListAllChildrenWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerSnapshots = innerRes.Snapshots;
            var innerRet = innerRes.Ret;
            return new Tuple<System.Collections.Generic.List<Binding.RemoteNonnullDomainSnapshot>, int>(innerSnapshots, innerRet);
        }
        
        public async Task<Binding.RemoteDomainSnapshotListAllChildrenRet> DomainSnapshotListAllChildrenWrappedAsync(Binding.RemoteDomainSnapshotListAllChildrenArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteDomainSnapshotListAllChildrenRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainSnapshotListAllChildren, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<string> DomainGetHostnameAsync(Binding.RemoteNonnullDomain dom, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainGetHostnameArgs();
            innerReq.Dom = dom;
            innerReq.Flags = flags;
            var innerTask = this.DomainGetHostnameWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerHostname = innerRes.Hostname;
            return innerHostname;
        }
        
        public async Task<Binding.RemoteDomainGetHostnameRet> DomainGetHostnameWrappedAsync(Binding.RemoteDomainGetHostnameArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteDomainGetHostnameRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainGetHostname, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<Tuple<System.Collections.Generic.List<Binding.RemoteDomainGetSecurityLabelRet>, int>> DomainGetSecurityLabelListAsync(Binding.RemoteNonnullDomain dom, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainGetSecurityLabelListArgs();
            innerReq.Dom = dom;
            var innerTask = this.DomainGetSecurityLabelListWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerLabels = innerRes.Labels;
            var innerRet = innerRes.Ret;
            return new Tuple<System.Collections.Generic.List<Binding.RemoteDomainGetSecurityLabelRet>, int>(innerLabels, innerRet);
        }
        
        public async Task<Binding.RemoteDomainGetSecurityLabelListRet> DomainGetSecurityLabelListWrappedAsync(Binding.RemoteDomainGetSecurityLabelListArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteDomainGetSecurityLabelListRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainGetSecurityLabelList, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task DomainPinEmulatorAsync(Binding.RemoteNonnullDomain dom, System.Collections.Generic.List<byte> cpumap, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainPinEmulatorArgs();
            innerReq.Dom = dom;
            innerReq.Cpumap = cpumap;
            innerReq.Flags = flags;
            var innerTask = this.DomainPinEmulatorWrappedAsync(innerReq, cancellationToken);
            await innerTask;
        }
        
        public async Task DomainPinEmulatorWrappedAsync(Binding.RemoteDomainPinEmulatorArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Xdr.XdrVoid, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainPinEmulator, arg, cancellationToken);
            await innerTask;
        }
        
        public async Task<Tuple<System.Collections.Generic.List<byte>, int>> DomainGetEmulatorPinInfoAsync(Binding.RemoteNonnullDomain dom, int maplen, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainGetEmulatorPinInfoArgs();
            innerReq.Dom = dom;
            innerReq.Maplen = maplen;
            innerReq.Flags = flags;
            var innerTask = this.DomainGetEmulatorPinInfoWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerCpumaps = innerRes.Cpumaps;
            var innerRet = innerRes.Ret;
            return new Tuple<System.Collections.Generic.List<byte>, int>(innerCpumaps, innerRet);
        }
        
        public async Task<Binding.RemoteDomainGetEmulatorPinInfoRet> DomainGetEmulatorPinInfoWrappedAsync(Binding.RemoteDomainGetEmulatorPinInfoArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteDomainGetEmulatorPinInfoRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainGetEmulatorPinInfo, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<Tuple<System.Collections.Generic.List<Binding.RemoteNonnullStoragePool>, uint>> ConnectListAllStoragePoolsAsync(int needResults, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteConnectListAllStoragePoolsArgs();
            innerReq.NeedResults = needResults;
            innerReq.Flags = flags;
            var innerTask = this.ConnectListAllStoragePoolsWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerPools = innerRes.Pools;
            var innerRet = innerRes.Ret;
            return new Tuple<System.Collections.Generic.List<Binding.RemoteNonnullStoragePool>, uint>(innerPools, innerRet);
        }
        
        public async Task<Binding.RemoteConnectListAllStoragePoolsRet> ConnectListAllStoragePoolsWrappedAsync(Binding.RemoteConnectListAllStoragePoolsArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteConnectListAllStoragePoolsRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcConnectListAllStoragePools, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<Tuple<System.Collections.Generic.List<Binding.RemoteNonnullStorageVol>, uint>> StoragePoolListAllVolumesAsync(Binding.RemoteNonnullStoragePool pool, int needResults, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteStoragePoolListAllVolumesArgs();
            innerReq.Pool = pool;
            innerReq.NeedResults = needResults;
            innerReq.Flags = flags;
            var innerTask = this.StoragePoolListAllVolumesWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerVols = innerRes.Vols;
            var innerRet = innerRes.Ret;
            return new Tuple<System.Collections.Generic.List<Binding.RemoteNonnullStorageVol>, uint>(innerVols, innerRet);
        }
        
        public async Task<Binding.RemoteStoragePoolListAllVolumesRet> StoragePoolListAllVolumesWrappedAsync(Binding.RemoteStoragePoolListAllVolumesArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteStoragePoolListAllVolumesRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcStoragePoolListAllVolumes, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<Tuple<System.Collections.Generic.List<Binding.RemoteNonnullNetwork>, uint>> ConnectListAllNetworksAsync(int needResults, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteConnectListAllNetworksArgs();
            innerReq.NeedResults = needResults;
            innerReq.Flags = flags;
            var innerTask = this.ConnectListAllNetworksWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerNets = innerRes.Nets;
            var innerRet = innerRes.Ret;
            return new Tuple<System.Collections.Generic.List<Binding.RemoteNonnullNetwork>, uint>(innerNets, innerRet);
        }
        
        public async Task<Binding.RemoteConnectListAllNetworksRet> ConnectListAllNetworksWrappedAsync(Binding.RemoteConnectListAllNetworksArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteConnectListAllNetworksRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcConnectListAllNetworks, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<Tuple<System.Collections.Generic.List<Binding.RemoteNonnullInterface>, uint>> ConnectListAllInterfacesAsync(int needResults, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteConnectListAllInterfacesArgs();
            innerReq.NeedResults = needResults;
            innerReq.Flags = flags;
            var innerTask = this.ConnectListAllInterfacesWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerIfaces = innerRes.Ifaces;
            var innerRet = innerRes.Ret;
            return new Tuple<System.Collections.Generic.List<Binding.RemoteNonnullInterface>, uint>(innerIfaces, innerRet);
        }
        
        public async Task<Binding.RemoteConnectListAllInterfacesRet> ConnectListAllInterfacesWrappedAsync(Binding.RemoteConnectListAllInterfacesArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteConnectListAllInterfacesRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcConnectListAllInterfaces, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<Tuple<System.Collections.Generic.List<Binding.RemoteNonnullNodeDevice>, uint>> ConnectListAllNodeDevicesAsync(int needResults, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteConnectListAllNodeDevicesArgs();
            innerReq.NeedResults = needResults;
            innerReq.Flags = flags;
            var innerTask = this.ConnectListAllNodeDevicesWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerDevices = innerRes.Devices;
            var innerRet = innerRes.Ret;
            return new Tuple<System.Collections.Generic.List<Binding.RemoteNonnullNodeDevice>, uint>(innerDevices, innerRet);
        }
        
        public async Task<Binding.RemoteConnectListAllNodeDevicesRet> ConnectListAllNodeDevicesWrappedAsync(Binding.RemoteConnectListAllNodeDevicesArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteConnectListAllNodeDevicesRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcConnectListAllNodeDevices, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<Tuple<System.Collections.Generic.List<Binding.RemoteNonnullNwfilter>, uint>> ConnectListAllNwfiltersAsync(int needResults, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteConnectListAllNwfiltersArgs();
            innerReq.NeedResults = needResults;
            innerReq.Flags = flags;
            var innerTask = this.ConnectListAllNwfiltersWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerFilters = innerRes.Filters;
            var innerRet = innerRes.Ret;
            return new Tuple<System.Collections.Generic.List<Binding.RemoteNonnullNwfilter>, uint>(innerFilters, innerRet);
        }
        
        public async Task<Binding.RemoteConnectListAllNwfiltersRet> ConnectListAllNwfiltersWrappedAsync(Binding.RemoteConnectListAllNwfiltersArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteConnectListAllNwfiltersRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcConnectListAllNwfilters, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<Tuple<System.Collections.Generic.List<Binding.RemoteNonnullSecret>, uint>> ConnectListAllSecretsAsync(int needResults, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteConnectListAllSecretsArgs();
            innerReq.NeedResults = needResults;
            innerReq.Flags = flags;
            var innerTask = this.ConnectListAllSecretsWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerSecrets = innerRes.Secrets;
            var innerRet = innerRes.Ret;
            return new Tuple<System.Collections.Generic.List<Binding.RemoteNonnullSecret>, uint>(innerSecrets, innerRet);
        }
        
        public async Task<Binding.RemoteConnectListAllSecretsRet> ConnectListAllSecretsWrappedAsync(Binding.RemoteConnectListAllSecretsArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteConnectListAllSecretsRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcConnectListAllSecrets, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task NodeSetMemoryParametersAsync(System.Collections.Generic.List<Binding.RemoteTypedParam> @params, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteNodeSetMemoryParametersArgs();
            innerReq.Params = @params;
            innerReq.Flags = flags;
            var innerTask = this.NodeSetMemoryParametersWrappedAsync(innerReq, cancellationToken);
            await innerTask;
        }
        
        public async Task NodeSetMemoryParametersWrappedAsync(Binding.RemoteNodeSetMemoryParametersArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Xdr.XdrVoid, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcNodeSetMemoryParameters, arg, cancellationToken);
            await innerTask;
        }
        
        public async Task<Tuple<System.Collections.Generic.List<Binding.RemoteTypedParam>, int>> NodeGetMemoryParametersAsync(int nparams, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteNodeGetMemoryParametersArgs();
            innerReq.Nparams = nparams;
            innerReq.Flags = flags;
            var innerTask = this.NodeGetMemoryParametersWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerParams = innerRes.Params;
            var innerNparams = innerRes.Nparams;
            return new Tuple<System.Collections.Generic.List<Binding.RemoteTypedParam>, int>(innerParams, innerNparams);
        }
        
        public async Task<Binding.RemoteNodeGetMemoryParametersRet> NodeGetMemoryParametersWrappedAsync(Binding.RemoteNodeGetMemoryParametersArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteNodeGetMemoryParametersRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcNodeGetMemoryParameters, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task DomainBlockCommitAsync(Binding.RemoteNonnullDomain dom, string disk, Xdr.XdrOption<string> @base, Xdr.XdrOption<string> top, ulong bandwidth, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainBlockCommitArgs();
            innerReq.Dom = dom;
            innerReq.Disk = disk;
            innerReq.Base = @base;
            innerReq.Top = top;
            innerReq.Bandwidth = bandwidth;
            innerReq.Flags = flags;
            var innerTask = this.DomainBlockCommitWrappedAsync(innerReq, cancellationToken);
            await innerTask;
        }
        
        public async Task DomainBlockCommitWrappedAsync(Binding.RemoteDomainBlockCommitArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Xdr.XdrVoid, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainBlockCommit, arg, cancellationToken);
            await innerTask;
        }
        
        public async Task NetworkUpdateAsync(Binding.RemoteNonnullNetwork net, uint command, uint section, int parentIndex, string xml, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteNetworkUpdateArgs();
            innerReq.Net = net;
            innerReq.Command = command;
            innerReq.Section = section;
            innerReq.ParentIndex = parentIndex;
            innerReq.Xml = xml;
            innerReq.Flags = flags;
            var innerTask = this.NetworkUpdateWrappedAsync(innerReq, cancellationToken);
            await innerTask;
        }
        
        public async Task NetworkUpdateWrappedAsync(Binding.RemoteNetworkUpdateArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Xdr.XdrVoid, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcNetworkUpdate, arg, cancellationToken);
            await innerTask;
        }
        
        public async Task<Tuple<System.Collections.Generic.List<byte>, uint, int>> NodeGetCpuMapAsync(int needMap, int needOnline, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteNodeGetCpuMapArgs();
            innerReq.NeedMap = needMap;
            innerReq.NeedOnline = needOnline;
            innerReq.Flags = flags;
            var innerTask = this.NodeGetCpuMapWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerCpumap = innerRes.Cpumap;
            var innerOnline = innerRes.Online;
            var innerRet = innerRes.Ret;
            return new Tuple<System.Collections.Generic.List<byte>, uint, int>(innerCpumap, innerOnline, innerRet);
        }
        
        public async Task<Binding.RemoteNodeGetCpuMapRet> NodeGetCpuMapWrappedAsync(Binding.RemoteNodeGetCpuMapArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteNodeGetCpuMapRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcNodeGetCpuMap, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task DomainFstrimAsync(Binding.RemoteNonnullDomain dom, Xdr.XdrOption<string> mountPoint, ulong minimum, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainFstrimArgs();
            innerReq.Dom = dom;
            innerReq.MountPoint = mountPoint;
            innerReq.Minimum = minimum;
            innerReq.Flags = flags;
            var innerTask = this.DomainFstrimWrappedAsync(innerReq, cancellationToken);
            await innerTask;
        }
        
        public async Task DomainFstrimWrappedAsync(Binding.RemoteDomainFstrimArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Xdr.XdrVoid, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainFstrim, arg, cancellationToken);
            await innerTask;
        }
        
        public async Task DomainSendProcessSignalAsync(Binding.RemoteNonnullDomain dom, long pidValue, uint signum, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainSendProcessSignalArgs();
            innerReq.Dom = dom;
            innerReq.PidValue = pidValue;
            innerReq.Signum = signum;
            innerReq.Flags = flags;
            var innerTask = this.DomainSendProcessSignalWrappedAsync(innerReq, cancellationToken);
            await innerTask;
        }
        
        public async Task DomainSendProcessSignalWrappedAsync(Binding.RemoteDomainSendProcessSignalArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Xdr.XdrVoid, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainSendProcessSignal, arg, cancellationToken);
            await innerTask;
        }
        
        public async Task<VirtNetStream> DomainOpenChannelAsync(Binding.RemoteNonnullDomain dom, Xdr.XdrOption<string> name, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainOpenChannelArgs();
            innerReq.Dom = dom;
            innerReq.Name = name;
            innerReq.Flags = flags;
            var innerTask = this.DomainOpenChannelWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            return innerRes.Item1;
        }
        
        public async Task<Tuple<VirtNetStream, Xdr.XdrVoid>> DomainOpenChannelWrappedAsync(Binding.RemoteDomainOpenChannelArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallWithStreamAsync<Xdr.XdrVoid, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainOpenChannel, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<Binding.RemoteNonnullNodeDevice> NodeDeviceLookupScsiHostByWwnAsync(string wwnn, string wwpn, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteNodeDeviceLookupScsiHostByWwnArgs();
            innerReq.Wwnn = wwnn;
            innerReq.Wwpn = wwpn;
            innerReq.Flags = flags;
            var innerTask = this.NodeDeviceLookupScsiHostByWwnWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerDev = innerRes.Dev;
            return innerDev;
        }
        
        public async Task<Binding.RemoteNodeDeviceLookupScsiHostByWwnRet> NodeDeviceLookupScsiHostByWwnWrappedAsync(Binding.RemoteNodeDeviceLookupScsiHostByWwnArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteNodeDeviceLookupScsiHostByWwnRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcNodeDeviceLookupScsiHostByWwn, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<Tuple<int, System.Collections.Generic.List<Binding.RemoteTypedParam>>> DomainGetJobStatsAsync(Binding.RemoteNonnullDomain dom, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainGetJobStatsArgs();
            innerReq.Dom = dom;
            innerReq.Flags = flags;
            var innerTask = this.DomainGetJobStatsWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerType = innerRes.Type;
            var innerParams = innerRes.Params;
            return new Tuple<int, System.Collections.Generic.List<Binding.RemoteTypedParam>>(innerType, innerParams);
        }
        
        public async Task<Binding.RemoteDomainGetJobStatsRet> DomainGetJobStatsWrappedAsync(Binding.RemoteDomainGetJobStatsArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteDomainGetJobStatsRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainGetJobStats, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<ulong> DomainMigrateGetCompressionCacheAsync(Binding.RemoteNonnullDomain dom, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainMigrateGetCompressionCacheArgs();
            innerReq.Dom = dom;
            innerReq.Flags = flags;
            var innerTask = this.DomainMigrateGetCompressionCacheWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerCacheSize = innerRes.CacheSize;
            return innerCacheSize;
        }
        
        public async Task<Binding.RemoteDomainMigrateGetCompressionCacheRet> DomainMigrateGetCompressionCacheWrappedAsync(Binding.RemoteDomainMigrateGetCompressionCacheArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteDomainMigrateGetCompressionCacheRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainMigrateGetCompressionCache, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task DomainMigrateSetCompressionCacheAsync(Binding.RemoteNonnullDomain dom, ulong cacheSize, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainMigrateSetCompressionCacheArgs();
            innerReq.Dom = dom;
            innerReq.CacheSize = cacheSize;
            innerReq.Flags = flags;
            var innerTask = this.DomainMigrateSetCompressionCacheWrappedAsync(innerReq, cancellationToken);
            await innerTask;
        }
        
        public async Task DomainMigrateSetCompressionCacheWrappedAsync(Binding.RemoteDomainMigrateSetCompressionCacheArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Xdr.XdrVoid, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainMigrateSetCompressionCache, arg, cancellationToken);
            await innerTask;
        }
        
        public async Task NodeDeviceDetachFlagsAsync(string name, Xdr.XdrOption<string> driverName, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteNodeDeviceDetachFlagsArgs();
            innerReq.Name = name;
            innerReq.DriverName = driverName;
            innerReq.Flags = flags;
            var innerTask = this.NodeDeviceDetachFlagsWrappedAsync(innerReq, cancellationToken);
            await innerTask;
        }
        
        public async Task NodeDeviceDetachFlagsWrappedAsync(Binding.RemoteNodeDeviceDetachFlagsArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Xdr.XdrVoid, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcNodeDeviceDetachFlags, arg, cancellationToken);
            await innerTask;
        }
        
        public async Task<Tuple<System.Collections.Generic.List<byte>, string>> DomainMigrateBegin3ParamsAsync(Binding.RemoteNonnullDomain dom, System.Collections.Generic.List<Binding.RemoteTypedParam> @params, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainMigrateBegin3ParamsArgs();
            innerReq.Dom = dom;
            innerReq.Params = @params;
            innerReq.Flags = flags;
            var innerTask = this.DomainMigrateBegin3ParamsWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerCookieOut = innerRes.CookieOut;
            var innerXml = innerRes.Xml;
            return new Tuple<System.Collections.Generic.List<byte>, string>(innerCookieOut, innerXml);
        }
        
        public async Task<Binding.RemoteDomainMigrateBegin3ParamsRet> DomainMigrateBegin3ParamsWrappedAsync(Binding.RemoteDomainMigrateBegin3ParamsArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteDomainMigrateBegin3ParamsRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainMigrateBegin3Params, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<Tuple<System.Collections.Generic.List<byte>, Xdr.XdrOption<string>>> DomainMigratePrepare3ParamsAsync(System.Collections.Generic.List<Binding.RemoteTypedParam> @params, System.Collections.Generic.List<byte> cookieIn, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainMigratePrepare3ParamsArgs();
            innerReq.Params = @params;
            innerReq.CookieIn = cookieIn;
            innerReq.Flags = flags;
            var innerTask = this.DomainMigratePrepare3ParamsWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerCookieOut = innerRes.CookieOut;
            var innerUriOut = innerRes.UriOut;
            return new Tuple<System.Collections.Generic.List<byte>, Xdr.XdrOption<string>>(innerCookieOut, innerUriOut);
        }
        
        public async Task<Binding.RemoteDomainMigratePrepare3ParamsRet> DomainMigratePrepare3ParamsWrappedAsync(Binding.RemoteDomainMigratePrepare3ParamsArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteDomainMigratePrepare3ParamsRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainMigratePrepare3Params, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<System.Collections.Generic.List<byte>> DomainMigratePrepareTunnel3ParamsAsync(System.Collections.Generic.List<Binding.RemoteTypedParam> @params, System.Collections.Generic.List<byte> cookieIn, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainMigratePrepareTunnel3ParamsArgs();
            innerReq.Params = @params;
            innerReq.CookieIn = cookieIn;
            innerReq.Flags = flags;
            var innerTask = this.DomainMigratePrepareTunnel3ParamsWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerCookieOut = innerRes.CookieOut;
            return innerCookieOut;
        }
        
        public async Task<Binding.RemoteDomainMigratePrepareTunnel3ParamsRet> DomainMigratePrepareTunnel3ParamsWrappedAsync(Binding.RemoteDomainMigratePrepareTunnel3ParamsArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteDomainMigratePrepareTunnel3ParamsRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainMigratePrepareTunnel3Params, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<System.Collections.Generic.List<byte>> DomainMigratePerform3ParamsAsync(Binding.RemoteNonnullDomain dom, Xdr.XdrOption<string> dconnuri, System.Collections.Generic.List<Binding.RemoteTypedParam> @params, System.Collections.Generic.List<byte> cookieIn, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainMigratePerform3ParamsArgs();
            innerReq.Dom = dom;
            innerReq.Dconnuri = dconnuri;
            innerReq.Params = @params;
            innerReq.CookieIn = cookieIn;
            innerReq.Flags = flags;
            var innerTask = this.DomainMigratePerform3ParamsWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerCookieOut = innerRes.CookieOut;
            return innerCookieOut;
        }
        
        public async Task<Binding.RemoteDomainMigratePerform3ParamsRet> DomainMigratePerform3ParamsWrappedAsync(Binding.RemoteDomainMigratePerform3ParamsArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteDomainMigratePerform3ParamsRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainMigratePerform3Params, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<Tuple<Binding.RemoteNonnullDomain, System.Collections.Generic.List<byte>>> DomainMigrateFinish3ParamsAsync(System.Collections.Generic.List<Binding.RemoteTypedParam> @params, System.Collections.Generic.List<byte> cookieIn, uint flags, int cancelled, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainMigrateFinish3ParamsArgs();
            innerReq.Params = @params;
            innerReq.CookieIn = cookieIn;
            innerReq.Flags = flags;
            innerReq.Cancelled = cancelled;
            var innerTask = this.DomainMigrateFinish3ParamsWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerDom = innerRes.Dom;
            var innerCookieOut = innerRes.CookieOut;
            return new Tuple<Binding.RemoteNonnullDomain, System.Collections.Generic.List<byte>>(innerDom, innerCookieOut);
        }
        
        public async Task<Binding.RemoteDomainMigrateFinish3ParamsRet> DomainMigrateFinish3ParamsWrappedAsync(Binding.RemoteDomainMigrateFinish3ParamsArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteDomainMigrateFinish3ParamsRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainMigrateFinish3Params, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task DomainMigrateConfirm3ParamsAsync(Binding.RemoteNonnullDomain dom, System.Collections.Generic.List<Binding.RemoteTypedParam> @params, System.Collections.Generic.List<byte> cookieIn, uint flags, int cancelled, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainMigrateConfirm3ParamsArgs();
            innerReq.Dom = dom;
            innerReq.Params = @params;
            innerReq.CookieIn = cookieIn;
            innerReq.Flags = flags;
            innerReq.Cancelled = cancelled;
            var innerTask = this.DomainMigrateConfirm3ParamsWrappedAsync(innerReq, cancellationToken);
            await innerTask;
        }
        
        public async Task DomainMigrateConfirm3ParamsWrappedAsync(Binding.RemoteDomainMigrateConfirm3ParamsArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Xdr.XdrVoid, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainMigrateConfirm3Params, arg, cancellationToken);
            await innerTask;
        }
        
        public async Task DomainSetMemoryStatsPeriodAsync(Binding.RemoteNonnullDomain dom, int period, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainSetMemoryStatsPeriodArgs();
            innerReq.Dom = dom;
            innerReq.Period = period;
            innerReq.Flags = flags;
            var innerTask = this.DomainSetMemoryStatsPeriodWrappedAsync(innerReq, cancellationToken);
            await innerTask;
        }
        
        public async Task DomainSetMemoryStatsPeriodWrappedAsync(Binding.RemoteDomainSetMemoryStatsPeriodArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Xdr.XdrVoid, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainSetMemoryStatsPeriod, arg, cancellationToken);
            await innerTask;
        }
        
        public async Task<Binding.RemoteNonnullDomain> DomainCreateXmlWithFilesAsync(string xmlDesc, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainCreateXmlWithFilesArgs();
            innerReq.XmlDesc = xmlDesc;
            innerReq.Flags = flags;
            var innerTask = this.DomainCreateXmlWithFilesWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerDom = innerRes.Dom;
            return innerDom;
        }
        
        public async Task<Binding.RemoteDomainCreateXmlWithFilesRet> DomainCreateXmlWithFilesWrappedAsync(Binding.RemoteDomainCreateXmlWithFilesArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteDomainCreateXmlWithFilesRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainCreateXmlWithFiles, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<Binding.RemoteNonnullDomain> DomainCreateWithFilesAsync(Binding.RemoteNonnullDomain dom, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainCreateWithFilesArgs();
            innerReq.Dom = dom;
            innerReq.Flags = flags;
            var innerTask = this.DomainCreateWithFilesWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerDom = innerRes.Dom;
            return innerDom;
        }
        
        public async Task<Binding.RemoteDomainCreateWithFilesRet> DomainCreateWithFilesWrappedAsync(Binding.RemoteDomainCreateWithFilesArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteDomainCreateWithFilesRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainCreateWithFiles, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<Tuple<string, int>> ConnectGetCpuModelNamesAsync(string arch, int needResults, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteConnectGetCpuModelNamesArgs();
            innerReq.Arch = arch;
            innerReq.NeedResults = needResults;
            innerReq.Flags = flags;
            var innerTask = this.ConnectGetCpuModelNamesWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerModels = innerRes.Models;
            var innerRet = innerRes.Ret;
            return new Tuple<string, int>(innerModels, innerRet);
        }
        
        public async Task<Binding.RemoteConnectGetCpuModelNamesRet> ConnectGetCpuModelNamesWrappedAsync(Binding.RemoteConnectGetCpuModelNamesArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteConnectGetCpuModelNamesRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcConnectGetCpuModelNames, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<int> ConnectNetworkEventRegisterAnyAsync(int eventId, Xdr.XdrOption<Binding.RemoteNonnullNetwork> net, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteConnectNetworkEventRegisterAnyArgs();
            innerReq.EventId = eventId;
            innerReq.Net = net;
            var innerTask = this.ConnectNetworkEventRegisterAnyWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerCallbackId = innerRes.CallbackId;
            return innerCallbackId;
        }
        
        public async Task<Binding.RemoteConnectNetworkEventRegisterAnyRet> ConnectNetworkEventRegisterAnyWrappedAsync(Binding.RemoteConnectNetworkEventRegisterAnyArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteConnectNetworkEventRegisterAnyRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcConnectNetworkEventRegisterAny, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task ConnectNetworkEventDeregisterAnyAsync(int callbackId, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteConnectNetworkEventDeregisterAnyArgs();
            innerReq.CallbackId = callbackId;
            var innerTask = this.ConnectNetworkEventDeregisterAnyWrappedAsync(innerReq, cancellationToken);
            await innerTask;
        }
        
        public async Task ConnectNetworkEventDeregisterAnyWrappedAsync(Binding.RemoteConnectNetworkEventDeregisterAnyArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Xdr.XdrVoid, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcConnectNetworkEventDeregisterAny, arg, cancellationToken);
            await innerTask;
        }
        
        public async Task<int> ConnectDomainEventCallbackRegisterAnyAsync(int eventId, Xdr.XdrOption<Binding.RemoteNonnullDomain> dom, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteConnectDomainEventCallbackRegisterAnyArgs();
            innerReq.EventId = eventId;
            innerReq.Dom = dom;
            var innerTask = this.ConnectDomainEventCallbackRegisterAnyWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerCallbackId = innerRes.CallbackId;
            return innerCallbackId;
        }
        
        public async Task<Binding.RemoteConnectDomainEventCallbackRegisterAnyRet> ConnectDomainEventCallbackRegisterAnyWrappedAsync(Binding.RemoteConnectDomainEventCallbackRegisterAnyArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteConnectDomainEventCallbackRegisterAnyRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcConnectDomainEventCallbackRegisterAny, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task ConnectDomainEventCallbackDeregisterAnyAsync(int callbackId, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteConnectDomainEventCallbackDeregisterAnyArgs();
            innerReq.CallbackId = callbackId;
            var innerTask = this.ConnectDomainEventCallbackDeregisterAnyWrappedAsync(innerReq, cancellationToken);
            await innerTask;
        }
        
        public async Task ConnectDomainEventCallbackDeregisterAnyWrappedAsync(Binding.RemoteConnectDomainEventCallbackDeregisterAnyArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Xdr.XdrVoid, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcConnectDomainEventCallbackDeregisterAny, arg, cancellationToken);
            await innerTask;
        }
        
        public async Task DomainCoreDumpWithFormatAsync(Binding.RemoteNonnullDomain dom, string to, uint dumpformat, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainCoreDumpWithFormatArgs();
            innerReq.Dom = dom;
            innerReq.To = to;
            innerReq.Dumpformat = dumpformat;
            innerReq.Flags = flags;
            var innerTask = this.DomainCoreDumpWithFormatWrappedAsync(innerReq, cancellationToken);
            await innerTask;
        }
        
        public async Task DomainCoreDumpWithFormatWrappedAsync(Binding.RemoteDomainCoreDumpWithFormatArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Xdr.XdrVoid, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainCoreDumpWithFormat, arg, cancellationToken);
            await innerTask;
        }
        
        public async Task<int> DomainFsfreezeAsync(Binding.RemoteNonnullDomain dom, string mountpoints, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainFsfreezeArgs();
            innerReq.Dom = dom;
            innerReq.Mountpoints = mountpoints;
            innerReq.Flags = flags;
            var innerTask = this.DomainFsfreezeWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerFilesystems = innerRes.Filesystems;
            return innerFilesystems;
        }
        
        public async Task<Binding.RemoteDomainFsfreezeRet> DomainFsfreezeWrappedAsync(Binding.RemoteDomainFsfreezeArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteDomainFsfreezeRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainFsfreeze, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<int> DomainFsthawAsync(Binding.RemoteNonnullDomain dom, string mountpoints, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainFsthawArgs();
            innerReq.Dom = dom;
            innerReq.Mountpoints = mountpoints;
            innerReq.Flags = flags;
            var innerTask = this.DomainFsthawWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerFilesystems = innerRes.Filesystems;
            return innerFilesystems;
        }
        
        public async Task<Binding.RemoteDomainFsthawRet> DomainFsthawWrappedAsync(Binding.RemoteDomainFsthawArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteDomainFsthawRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainFsthaw, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<Tuple<long, uint>> DomainGetTimeAsync(Binding.RemoteNonnullDomain dom, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainGetTimeArgs();
            innerReq.Dom = dom;
            innerReq.Flags = flags;
            var innerTask = this.DomainGetTimeWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerSeconds = innerRes.Seconds;
            var innerNseconds = innerRes.Nseconds;
            return new Tuple<long, uint>(innerSeconds, innerNseconds);
        }
        
        public async Task<Binding.RemoteDomainGetTimeRet> DomainGetTimeWrappedAsync(Binding.RemoteDomainGetTimeArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteDomainGetTimeRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainGetTime, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task DomainSetTimeAsync(Binding.RemoteNonnullDomain dom, long seconds, uint nseconds, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainSetTimeArgs();
            innerReq.Dom = dom;
            innerReq.Seconds = seconds;
            innerReq.Nseconds = nseconds;
            innerReq.Flags = flags;
            var innerTask = this.DomainSetTimeWrappedAsync(innerReq, cancellationToken);
            await innerTask;
        }
        
        public async Task DomainSetTimeWrappedAsync(Binding.RemoteDomainSetTimeArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Xdr.XdrVoid, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainSetTime, arg, cancellationToken);
            await innerTask;
        }
        
        public async Task<System.Collections.Generic.List<ulong>> NodeGetFreePagesAsync(System.Collections.Generic.List<uint> pages, int startCell, uint cellCount, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteNodeGetFreePagesArgs();
            innerReq.Pages = pages;
            innerReq.StartCell = startCell;
            innerReq.CellCount = cellCount;
            innerReq.Flags = flags;
            var innerTask = this.NodeGetFreePagesWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerCounts = innerRes.Counts;
            return innerCounts;
        }
        
        public async Task<Binding.RemoteNodeGetFreePagesRet> NodeGetFreePagesWrappedAsync(Binding.RemoteNodeGetFreePagesArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteNodeGetFreePagesRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcNodeGetFreePages, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<Tuple<System.Collections.Generic.List<Binding.RemoteNetworkDhcpLease>, uint>> NetworkGetDhcpLeasesAsync(Binding.RemoteNonnullNetwork net, Xdr.XdrOption<string> mac, int needResults, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteNetworkGetDhcpLeasesArgs();
            innerReq.Net = net;
            innerReq.Mac = mac;
            innerReq.NeedResults = needResults;
            innerReq.Flags = flags;
            var innerTask = this.NetworkGetDhcpLeasesWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerLeases = innerRes.Leases;
            var innerRet = innerRes.Ret;
            return new Tuple<System.Collections.Generic.List<Binding.RemoteNetworkDhcpLease>, uint>(innerLeases, innerRet);
        }
        
        public async Task<Binding.RemoteNetworkGetDhcpLeasesRet> NetworkGetDhcpLeasesWrappedAsync(Binding.RemoteNetworkGetDhcpLeasesArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteNetworkGetDhcpLeasesRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcNetworkGetDhcpLeases, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<string> ConnectGetDomainCapabilitiesAsync(Xdr.XdrOption<string> emulatorbin, Xdr.XdrOption<string> arch, Xdr.XdrOption<string> machine, Xdr.XdrOption<string> virttype, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteConnectGetDomainCapabilitiesArgs();
            innerReq.Emulatorbin = emulatorbin;
            innerReq.Arch = arch;
            innerReq.Machine = machine;
            innerReq.Virttype = virttype;
            innerReq.Flags = flags;
            var innerTask = this.ConnectGetDomainCapabilitiesWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerCapabilities = innerRes.Capabilities;
            return innerCapabilities;
        }
        
        public async Task<Binding.RemoteConnectGetDomainCapabilitiesRet> ConnectGetDomainCapabilitiesWrappedAsync(Binding.RemoteConnectGetDomainCapabilitiesArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteConnectGetDomainCapabilitiesRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcConnectGetDomainCapabilities, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task DomainOpenGraphicsFdAsync(Binding.RemoteNonnullDomain dom, uint idx, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainOpenGraphicsFdArgs();
            innerReq.Dom = dom;
            innerReq.Idx = idx;
            innerReq.Flags = flags;
            var innerTask = this.DomainOpenGraphicsFdWrappedAsync(innerReq, cancellationToken);
            await innerTask;
        }
        
        public async Task DomainOpenGraphicsFdWrappedAsync(Binding.RemoteDomainOpenGraphicsFdArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Xdr.XdrVoid, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainOpenGraphicsFd, arg, cancellationToken);
            await innerTask;
        }
        
        public async Task<System.Collections.Generic.List<Binding.RemoteDomainStatsRecord>> ConnectGetAllDomainStatsAsync(System.Collections.Generic.List<Binding.RemoteNonnullDomain> doms, uint stats, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteConnectGetAllDomainStatsArgs();
            innerReq.Doms = doms;
            innerReq.Stats = stats;
            innerReq.Flags = flags;
            var innerTask = this.ConnectGetAllDomainStatsWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerRetStats = innerRes.RetStats;
            return innerRetStats;
        }
        
        public async Task<Binding.RemoteConnectGetAllDomainStatsRet> ConnectGetAllDomainStatsWrappedAsync(Binding.RemoteConnectGetAllDomainStatsArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteConnectGetAllDomainStatsRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcConnectGetAllDomainStats, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task DomainBlockCopyAsync(Binding.RemoteNonnullDomain dom, string path, string destxml, System.Collections.Generic.List<Binding.RemoteTypedParam> @params, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainBlockCopyArgs();
            innerReq.Dom = dom;
            innerReq.Path = path;
            innerReq.Destxml = destxml;
            innerReq.Params = @params;
            innerReq.Flags = flags;
            var innerTask = this.DomainBlockCopyWrappedAsync(innerReq, cancellationToken);
            await innerTask;
        }
        
        public async Task DomainBlockCopyWrappedAsync(Binding.RemoteDomainBlockCopyArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Xdr.XdrVoid, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainBlockCopy, arg, cancellationToken);
            await innerTask;
        }
        
        public async Task<int> NodeAllocPagesAsync(System.Collections.Generic.List<uint> pageSizes, System.Collections.Generic.List<ulong> pageCounts, int startCell, uint cellCount, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteNodeAllocPagesArgs();
            innerReq.PageSizes = pageSizes;
            innerReq.PageCounts = pageCounts;
            innerReq.StartCell = startCell;
            innerReq.CellCount = cellCount;
            innerReq.Flags = flags;
            var innerTask = this.NodeAllocPagesWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerRet = innerRes.Ret;
            return innerRet;
        }
        
        public async Task<Binding.RemoteNodeAllocPagesRet> NodeAllocPagesWrappedAsync(Binding.RemoteNodeAllocPagesArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteNodeAllocPagesRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcNodeAllocPages, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<Tuple<System.Collections.Generic.List<Binding.RemoteDomainFsinfo>, uint>> DomainGetFsinfoAsync(Binding.RemoteNonnullDomain dom, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainGetFsinfoArgs();
            innerReq.Dom = dom;
            innerReq.Flags = flags;
            var innerTask = this.DomainGetFsinfoWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerInfo = innerRes.Info;
            var innerRet = innerRes.Ret;
            return new Tuple<System.Collections.Generic.List<Binding.RemoteDomainFsinfo>, uint>(innerInfo, innerRet);
        }
        
        public async Task<Binding.RemoteDomainGetFsinfoRet> DomainGetFsinfoWrappedAsync(Binding.RemoteDomainGetFsinfoArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteDomainGetFsinfoRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainGetFsinfo, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<Binding.RemoteNonnullDomain> DomainDefineXmlFlagsAsync(string xml, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainDefineXmlFlagsArgs();
            innerReq.Xml = xml;
            innerReq.Flags = flags;
            var innerTask = this.DomainDefineXmlFlagsWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerDom = innerRes.Dom;
            return innerDom;
        }
        
        public async Task<Binding.RemoteDomainDefineXmlFlagsRet> DomainDefineXmlFlagsWrappedAsync(Binding.RemoteDomainDefineXmlFlagsArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteDomainDefineXmlFlagsRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainDefineXmlFlags, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<Tuple<System.Collections.Generic.List<Binding.RemoteDomainIothreadInfo>, uint>> DomainGetIothreadInfoAsync(Binding.RemoteNonnullDomain dom, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainGetIothreadInfoArgs();
            innerReq.Dom = dom;
            innerReq.Flags = flags;
            var innerTask = this.DomainGetIothreadInfoWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerInfo = innerRes.Info;
            var innerRet = innerRes.Ret;
            return new Tuple<System.Collections.Generic.List<Binding.RemoteDomainIothreadInfo>, uint>(innerInfo, innerRet);
        }
        
        public async Task<Binding.RemoteDomainGetIothreadInfoRet> DomainGetIothreadInfoWrappedAsync(Binding.RemoteDomainGetIothreadInfoArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteDomainGetIothreadInfoRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainGetIothreadInfo, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task DomainPinIothreadAsync(Binding.RemoteNonnullDomain dom, uint iothreadsId, System.Collections.Generic.List<byte> cpumap, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainPinIothreadArgs();
            innerReq.Dom = dom;
            innerReq.IothreadsId = iothreadsId;
            innerReq.Cpumap = cpumap;
            innerReq.Flags = flags;
            var innerTask = this.DomainPinIothreadWrappedAsync(innerReq, cancellationToken);
            await innerTask;
        }
        
        public async Task DomainPinIothreadWrappedAsync(Binding.RemoteDomainPinIothreadArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Xdr.XdrVoid, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainPinIothread, arg, cancellationToken);
            await innerTask;
        }
        
        public async Task<System.Collections.Generic.List<Binding.RemoteDomainInterface>> DomainInterfaceAddressesAsync(Binding.RemoteNonnullDomain dom, uint source, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainInterfaceAddressesArgs();
            innerReq.Dom = dom;
            innerReq.Source = source;
            innerReq.Flags = flags;
            var innerTask = this.DomainInterfaceAddressesWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerIfaces = innerRes.Ifaces;
            return innerIfaces;
        }
        
        public async Task<Binding.RemoteDomainInterfaceAddressesRet> DomainInterfaceAddressesWrappedAsync(Binding.RemoteDomainInterfaceAddressesArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteDomainInterfaceAddressesRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainInterfaceAddresses, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task DomainAddIothreadAsync(Binding.RemoteNonnullDomain dom, uint iothreadId, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainAddIothreadArgs();
            innerReq.Dom = dom;
            innerReq.IothreadId = iothreadId;
            innerReq.Flags = flags;
            var innerTask = this.DomainAddIothreadWrappedAsync(innerReq, cancellationToken);
            await innerTask;
        }
        
        public async Task DomainAddIothreadWrappedAsync(Binding.RemoteDomainAddIothreadArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Xdr.XdrVoid, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainAddIothread, arg, cancellationToken);
            await innerTask;
        }
        
        public async Task DomainDelIothreadAsync(Binding.RemoteNonnullDomain dom, uint iothreadId, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainDelIothreadArgs();
            innerReq.Dom = dom;
            innerReq.IothreadId = iothreadId;
            innerReq.Flags = flags;
            var innerTask = this.DomainDelIothreadWrappedAsync(innerReq, cancellationToken);
            await innerTask;
        }
        
        public async Task DomainDelIothreadWrappedAsync(Binding.RemoteDomainDelIothreadArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Xdr.XdrVoid, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainDelIothread, arg, cancellationToken);
            await innerTask;
        }
        
        public async Task DomainSetUserPasswordAsync(Binding.RemoteNonnullDomain dom, Xdr.XdrOption<string> user, Xdr.XdrOption<string> password, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainSetUserPasswordArgs();
            innerReq.Dom = dom;
            innerReq.User = user;
            innerReq.Password = password;
            innerReq.Flags = flags;
            var innerTask = this.DomainSetUserPasswordWrappedAsync(innerReq, cancellationToken);
            await innerTask;
        }
        
        public async Task DomainSetUserPasswordWrappedAsync(Binding.RemoteDomainSetUserPasswordArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Xdr.XdrVoid, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainSetUserPassword, arg, cancellationToken);
            await innerTask;
        }
        
        public async Task<int> DomainRenameAsync(Binding.RemoteNonnullDomain dom, Xdr.XdrOption<string> newName, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainRenameArgs();
            innerReq.Dom = dom;
            innerReq.NewName = newName;
            innerReq.Flags = flags;
            var innerTask = this.DomainRenameWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerRetcode = innerRes.Retcode;
            return innerRetcode;
        }
        
        public async Task<Binding.RemoteDomainRenameRet> DomainRenameWrappedAsync(Binding.RemoteDomainRenameArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteDomainRenameRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainRename, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task ConnectRegisterCloseCallbackAsync(System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.ConnectRegisterCloseCallbackWrappedAsync(cancellationToken);
            await innerTask;
        }
        
        public async Task ConnectRegisterCloseCallbackWrappedAsync(System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Xdr.XdrVoid, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcConnectRegisterCloseCallback, null, cancellationToken);
            await innerTask;
        }
        
        public async Task ConnectUnregisterCloseCallbackAsync(System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.ConnectUnregisterCloseCallbackWrappedAsync(cancellationToken);
            await innerTask;
        }
        
        public async Task ConnectUnregisterCloseCallbackWrappedAsync(System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Xdr.XdrVoid, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcConnectUnregisterCloseCallback, null, cancellationToken);
            await innerTask;
        }
        
        public async Task DomainMigrateStartPostCopyAsync(Binding.RemoteNonnullDomain dom, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainMigrateStartPostCopyArgs();
            innerReq.Dom = dom;
            innerReq.Flags = flags;
            var innerTask = this.DomainMigrateStartPostCopyWrappedAsync(innerReq, cancellationToken);
            await innerTask;
        }
        
        public async Task DomainMigrateStartPostCopyWrappedAsync(Binding.RemoteDomainMigrateStartPostCopyArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Xdr.XdrVoid, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainMigrateStartPostCopy, arg, cancellationToken);
            await innerTask;
        }
        
        public async Task<System.Collections.Generic.List<Binding.RemoteTypedParam>> DomainGetPerfEventsAsync(Binding.RemoteNonnullDomain dom, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainGetPerfEventsArgs();
            innerReq.Dom = dom;
            innerReq.Flags = flags;
            var innerTask = this.DomainGetPerfEventsWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerParams = innerRes.Params;
            return innerParams;
        }
        
        public async Task<Binding.RemoteDomainGetPerfEventsRet> DomainGetPerfEventsWrappedAsync(Binding.RemoteDomainGetPerfEventsArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteDomainGetPerfEventsRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainGetPerfEvents, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task DomainSetPerfEventsAsync(Binding.RemoteNonnullDomain dom, System.Collections.Generic.List<Binding.RemoteTypedParam> @params, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainSetPerfEventsArgs();
            innerReq.Dom = dom;
            innerReq.Params = @params;
            innerReq.Flags = flags;
            var innerTask = this.DomainSetPerfEventsWrappedAsync(innerReq, cancellationToken);
            await innerTask;
        }
        
        public async Task DomainSetPerfEventsWrappedAsync(Binding.RemoteDomainSetPerfEventsArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Xdr.XdrVoid, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainSetPerfEvents, arg, cancellationToken);
            await innerTask;
        }
        
        public async Task<int> ConnectStoragePoolEventRegisterAnyAsync(int eventId, Xdr.XdrOption<Binding.RemoteNonnullStoragePool> pool, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteConnectStoragePoolEventRegisterAnyArgs();
            innerReq.EventId = eventId;
            innerReq.Pool = pool;
            var innerTask = this.ConnectStoragePoolEventRegisterAnyWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerCallbackId = innerRes.CallbackId;
            return innerCallbackId;
        }
        
        public async Task<Binding.RemoteConnectStoragePoolEventRegisterAnyRet> ConnectStoragePoolEventRegisterAnyWrappedAsync(Binding.RemoteConnectStoragePoolEventRegisterAnyArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteConnectStoragePoolEventRegisterAnyRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcConnectStoragePoolEventRegisterAny, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task ConnectStoragePoolEventDeregisterAnyAsync(int callbackId, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteConnectStoragePoolEventDeregisterAnyArgs();
            innerReq.CallbackId = callbackId;
            var innerTask = this.ConnectStoragePoolEventDeregisterAnyWrappedAsync(innerReq, cancellationToken);
            await innerTask;
        }
        
        public async Task ConnectStoragePoolEventDeregisterAnyWrappedAsync(Binding.RemoteConnectStoragePoolEventDeregisterAnyArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Xdr.XdrVoid, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcConnectStoragePoolEventDeregisterAny, arg, cancellationToken);
            await innerTask;
        }
        
        public async Task<System.Collections.Generic.List<Binding.RemoteTypedParam>> DomainGetGuestVcpusAsync(Binding.RemoteNonnullDomain dom, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainGetGuestVcpusArgs();
            innerReq.Dom = dom;
            innerReq.Flags = flags;
            var innerTask = this.DomainGetGuestVcpusWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerParams = innerRes.Params;
            return innerParams;
        }
        
        public async Task<Binding.RemoteDomainGetGuestVcpusRet> DomainGetGuestVcpusWrappedAsync(Binding.RemoteDomainGetGuestVcpusArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteDomainGetGuestVcpusRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainGetGuestVcpus, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task DomainSetGuestVcpusAsync(Binding.RemoteNonnullDomain dom, string cpumap, int state, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainSetGuestVcpusArgs();
            innerReq.Dom = dom;
            innerReq.Cpumap = cpumap;
            innerReq.State = state;
            innerReq.Flags = flags;
            var innerTask = this.DomainSetGuestVcpusWrappedAsync(innerReq, cancellationToken);
            await innerTask;
        }
        
        public async Task DomainSetGuestVcpusWrappedAsync(Binding.RemoteDomainSetGuestVcpusArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Xdr.XdrVoid, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainSetGuestVcpus, arg, cancellationToken);
            await innerTask;
        }
        
        public async Task<int> ConnectNodeDeviceEventRegisterAnyAsync(int eventId, Xdr.XdrOption<Binding.RemoteNonnullNodeDevice> dev, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteConnectNodeDeviceEventRegisterAnyArgs();
            innerReq.EventId = eventId;
            innerReq.Dev = dev;
            var innerTask = this.ConnectNodeDeviceEventRegisterAnyWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerCallbackId = innerRes.CallbackId;
            return innerCallbackId;
        }
        
        public async Task<Binding.RemoteConnectNodeDeviceEventRegisterAnyRet> ConnectNodeDeviceEventRegisterAnyWrappedAsync(Binding.RemoteConnectNodeDeviceEventRegisterAnyArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteConnectNodeDeviceEventRegisterAnyRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcConnectNodeDeviceEventRegisterAny, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task ConnectNodeDeviceEventDeregisterAnyAsync(int callbackId, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteConnectNodeDeviceEventDeregisterAnyArgs();
            innerReq.CallbackId = callbackId;
            var innerTask = this.ConnectNodeDeviceEventDeregisterAnyWrappedAsync(innerReq, cancellationToken);
            await innerTask;
        }
        
        public async Task ConnectNodeDeviceEventDeregisterAnyWrappedAsync(Binding.RemoteConnectNodeDeviceEventDeregisterAnyArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Xdr.XdrVoid, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcConnectNodeDeviceEventDeregisterAny, arg, cancellationToken);
            await innerTask;
        }
        
        public async Task<Tuple<int, ulong, ulong>> StorageVolGetInfoFlagsAsync(Binding.RemoteNonnullStorageVol vol, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteStorageVolGetInfoFlagsArgs();
            innerReq.Vol = vol;
            innerReq.Flags = flags;
            var innerTask = this.StorageVolGetInfoFlagsWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerType = innerRes.Type;
            var innerCapacity = innerRes.Capacity;
            var innerAllocation = innerRes.Allocation;
            return new Tuple<int, ulong, ulong>(innerType, innerCapacity, innerAllocation);
        }
        
        public async Task<Binding.RemoteStorageVolGetInfoFlagsRet> StorageVolGetInfoFlagsWrappedAsync(Binding.RemoteStorageVolGetInfoFlagsArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteStorageVolGetInfoFlagsRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcStorageVolGetInfoFlags, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<int> ConnectSecretEventRegisterAnyAsync(int eventId, Xdr.XdrOption<Binding.RemoteNonnullSecret> secret, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteConnectSecretEventRegisterAnyArgs();
            innerReq.EventId = eventId;
            innerReq.Secret = secret;
            var innerTask = this.ConnectSecretEventRegisterAnyWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerCallbackId = innerRes.CallbackId;
            return innerCallbackId;
        }
        
        public async Task<Binding.RemoteConnectSecretEventRegisterAnyRet> ConnectSecretEventRegisterAnyWrappedAsync(Binding.RemoteConnectSecretEventRegisterAnyArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteConnectSecretEventRegisterAnyRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcConnectSecretEventRegisterAny, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task ConnectSecretEventDeregisterAnyAsync(int callbackId, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteConnectSecretEventDeregisterAnyArgs();
            innerReq.CallbackId = callbackId;
            var innerTask = this.ConnectSecretEventDeregisterAnyWrappedAsync(innerReq, cancellationToken);
            await innerTask;
        }
        
        public async Task ConnectSecretEventDeregisterAnyWrappedAsync(Binding.RemoteConnectSecretEventDeregisterAnyArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Xdr.XdrVoid, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcConnectSecretEventDeregisterAny, arg, cancellationToken);
            await innerTask;
        }
        
        public async Task DomainSetVcpuAsync(Binding.RemoteNonnullDomain dom, string cpumap, int state, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainSetVcpuArgs();
            innerReq.Dom = dom;
            innerReq.Cpumap = cpumap;
            innerReq.State = state;
            innerReq.Flags = flags;
            var innerTask = this.DomainSetVcpuWrappedAsync(innerReq, cancellationToken);
            await innerTask;
        }
        
        public async Task DomainSetVcpuWrappedAsync(Binding.RemoteDomainSetVcpuArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Xdr.XdrVoid, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainSetVcpu, arg, cancellationToken);
            await innerTask;
        }
        
        public async Task DomainSetBlockThresholdAsync(Binding.RemoteNonnullDomain dom, string dev, ulong threshold, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainSetBlockThresholdArgs();
            innerReq.Dom = dom;
            innerReq.Dev = dev;
            innerReq.Threshold = threshold;
            innerReq.Flags = flags;
            var innerTask = this.DomainSetBlockThresholdWrappedAsync(innerReq, cancellationToken);
            await innerTask;
        }
        
        public async Task DomainSetBlockThresholdWrappedAsync(Binding.RemoteDomainSetBlockThresholdArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Xdr.XdrVoid, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainSetBlockThreshold, arg, cancellationToken);
            await innerTask;
        }
        
        public async Task<ulong> DomainMigrateGetMaxDowntimeAsync(Binding.RemoteNonnullDomain dom, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainMigrateGetMaxDowntimeArgs();
            innerReq.Dom = dom;
            innerReq.Flags = flags;
            var innerTask = this.DomainMigrateGetMaxDowntimeWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerDowntime = innerRes.Downtime;
            return innerDowntime;
        }
        
        public async Task<Binding.RemoteDomainMigrateGetMaxDowntimeRet> DomainMigrateGetMaxDowntimeWrappedAsync(Binding.RemoteDomainMigrateGetMaxDowntimeArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteDomainMigrateGetMaxDowntimeRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainMigrateGetMaxDowntime, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<string> DomainManagedSaveGetXmlDescAsync(Binding.RemoteNonnullDomain dom, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainManagedSaveGetXmlDescArgs();
            innerReq.Dom = dom;
            innerReq.Flags = flags;
            var innerTask = this.DomainManagedSaveGetXmlDescWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerXml = innerRes.Xml;
            return innerXml;
        }
        
        public async Task<Binding.RemoteDomainManagedSaveGetXmlDescRet> DomainManagedSaveGetXmlDescWrappedAsync(Binding.RemoteDomainManagedSaveGetXmlDescArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteDomainManagedSaveGetXmlDescRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainManagedSaveGetXmlDesc, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task DomainManagedSaveDefineXmlAsync(Binding.RemoteNonnullDomain dom, Xdr.XdrOption<string> dxml, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainManagedSaveDefineXmlArgs();
            innerReq.Dom = dom;
            innerReq.Dxml = dxml;
            innerReq.Flags = flags;
            var innerTask = this.DomainManagedSaveDefineXmlWrappedAsync(innerReq, cancellationToken);
            await innerTask;
        }
        
        public async Task DomainManagedSaveDefineXmlWrappedAsync(Binding.RemoteDomainManagedSaveDefineXmlArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Xdr.XdrVoid, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainManagedSaveDefineXml, arg, cancellationToken);
            await innerTask;
        }
        
        public async Task DomainSetLifecycleActionAsync(Binding.RemoteNonnullDomain dom, uint type, uint action, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainSetLifecycleActionArgs();
            innerReq.Dom = dom;
            innerReq.Type = type;
            innerReq.Action = action;
            innerReq.Flags = flags;
            var innerTask = this.DomainSetLifecycleActionWrappedAsync(innerReq, cancellationToken);
            await innerTask;
        }
        
        public async Task DomainSetLifecycleActionWrappedAsync(Binding.RemoteDomainSetLifecycleActionArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Xdr.XdrVoid, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainSetLifecycleAction, arg, cancellationToken);
            await innerTask;
        }
        
        public async Task<Binding.RemoteNonnullStoragePool> StoragePoolLookupByTargetPathAsync(string path, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteStoragePoolLookupByTargetPathArgs();
            innerReq.Path = path;
            var innerTask = this.StoragePoolLookupByTargetPathWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerPool = innerRes.Pool;
            return innerPool;
        }
        
        public async Task<Binding.RemoteStoragePoolLookupByTargetPathRet> StoragePoolLookupByTargetPathWrappedAsync(Binding.RemoteStoragePoolLookupByTargetPathArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteStoragePoolLookupByTargetPathRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcStoragePoolLookupByTargetPath, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task DomainDetachDeviceAliasAsync(Binding.RemoteNonnullDomain dom, string alias, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainDetachDeviceAliasArgs();
            innerReq.Dom = dom;
            innerReq.Alias = alias;
            innerReq.Flags = flags;
            var innerTask = this.DomainDetachDeviceAliasWrappedAsync(innerReq, cancellationToken);
            await innerTask;
        }
        
        public async Task DomainDetachDeviceAliasWrappedAsync(Binding.RemoteDomainDetachDeviceAliasArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Xdr.XdrVoid, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainDetachDeviceAlias, arg, cancellationToken);
            await innerTask;
        }
        
        public async Task<int> ConnectCompareHypervisorCpuAsync(Xdr.XdrOption<string> emulator, Xdr.XdrOption<string> arch, Xdr.XdrOption<string> machine, Xdr.XdrOption<string> virttype, string xmlCpu, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteConnectCompareHypervisorCpuArgs();
            innerReq.Emulator = emulator;
            innerReq.Arch = arch;
            innerReq.Machine = machine;
            innerReq.Virttype = virttype;
            innerReq.XmlCpu = xmlCpu;
            innerReq.Flags = flags;
            var innerTask = this.ConnectCompareHypervisorCpuWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerResult = innerRes.Result;
            return innerResult;
        }
        
        public async Task<Binding.RemoteConnectCompareHypervisorCpuRet> ConnectCompareHypervisorCpuWrappedAsync(Binding.RemoteConnectCompareHypervisorCpuArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteConnectCompareHypervisorCpuRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcConnectCompareHypervisorCpu, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<string> ConnectBaselineHypervisorCpuAsync(Xdr.XdrOption<string> emulator, Xdr.XdrOption<string> arch, Xdr.XdrOption<string> machine, Xdr.XdrOption<string> virttype, string xmlCpus, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteConnectBaselineHypervisorCpuArgs();
            innerReq.Emulator = emulator;
            innerReq.Arch = arch;
            innerReq.Machine = machine;
            innerReq.Virttype = virttype;
            innerReq.XmlCpus = xmlCpus;
            innerReq.Flags = flags;
            var innerTask = this.ConnectBaselineHypervisorCpuWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerCpu = innerRes.Cpu;
            return innerCpu;
        }
        
        public async Task<Binding.RemoteConnectBaselineHypervisorCpuRet> ConnectBaselineHypervisorCpuWrappedAsync(Binding.RemoteConnectBaselineHypervisorCpuArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteConnectBaselineHypervisorCpuRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcConnectBaselineHypervisorCpu, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<Tuple<System.Collections.Generic.List<Binding.RemoteTypedParam>, int>> NodeGetSevInfoAsync(int nparams, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteNodeGetSevInfoArgs();
            innerReq.Nparams = nparams;
            innerReq.Flags = flags;
            var innerTask = this.NodeGetSevInfoWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerParams = innerRes.Params;
            var innerNparams = innerRes.Nparams;
            return new Tuple<System.Collections.Generic.List<Binding.RemoteTypedParam>, int>(innerParams, innerNparams);
        }
        
        public async Task<Binding.RemoteNodeGetSevInfoRet> NodeGetSevInfoWrappedAsync(Binding.RemoteNodeGetSevInfoArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteNodeGetSevInfoRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcNodeGetSevInfo, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<System.Collections.Generic.List<Binding.RemoteTypedParam>> DomainGetLaunchSecurityInfoAsync(Binding.RemoteNonnullDomain dom, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainGetLaunchSecurityInfoArgs();
            innerReq.Dom = dom;
            innerReq.Flags = flags;
            var innerTask = this.DomainGetLaunchSecurityInfoWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerParams = innerRes.Params;
            return innerParams;
        }
        
        public async Task<Binding.RemoteDomainGetLaunchSecurityInfoRet> DomainGetLaunchSecurityInfoWrappedAsync(Binding.RemoteDomainGetLaunchSecurityInfoArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteDomainGetLaunchSecurityInfoRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainGetLaunchSecurityInfo, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<Binding.RemoteNonnullNwfilterBinding> NwfilterBindingLookupByPortDevAsync(string name, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteNwfilterBindingLookupByPortDevArgs();
            innerReq.Name = name;
            var innerTask = this.NwfilterBindingLookupByPortDevWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerNwfilter = innerRes.Nwfilter;
            return innerNwfilter;
        }
        
        public async Task<Binding.RemoteNwfilterBindingLookupByPortDevRet> NwfilterBindingLookupByPortDevWrappedAsync(Binding.RemoteNwfilterBindingLookupByPortDevArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteNwfilterBindingLookupByPortDevRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcNwfilterBindingLookupByPortDev, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<string> NwfilterBindingGetXmlDescAsync(Binding.RemoteNonnullNwfilterBinding nwfilter, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteNwfilterBindingGetXmlDescArgs();
            innerReq.Nwfilter = nwfilter;
            innerReq.Flags = flags;
            var innerTask = this.NwfilterBindingGetXmlDescWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerXml = innerRes.Xml;
            return innerXml;
        }
        
        public async Task<Binding.RemoteNwfilterBindingGetXmlDescRet> NwfilterBindingGetXmlDescWrappedAsync(Binding.RemoteNwfilterBindingGetXmlDescArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteNwfilterBindingGetXmlDescRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcNwfilterBindingGetXmlDesc, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<Binding.RemoteNonnullNwfilterBinding> NwfilterBindingCreateXmlAsync(string xml, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteNwfilterBindingCreateXmlArgs();
            innerReq.Xml = xml;
            innerReq.Flags = flags;
            var innerTask = this.NwfilterBindingCreateXmlWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerNwfilter = innerRes.Nwfilter;
            return innerNwfilter;
        }
        
        public async Task<Binding.RemoteNwfilterBindingCreateXmlRet> NwfilterBindingCreateXmlWrappedAsync(Binding.RemoteNwfilterBindingCreateXmlArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteNwfilterBindingCreateXmlRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcNwfilterBindingCreateXml, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task NwfilterBindingDeleteAsync(Binding.RemoteNonnullNwfilterBinding nwfilter, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteNwfilterBindingDeleteArgs();
            innerReq.Nwfilter = nwfilter;
            var innerTask = this.NwfilterBindingDeleteWrappedAsync(innerReq, cancellationToken);
            await innerTask;
        }
        
        public async Task NwfilterBindingDeleteWrappedAsync(Binding.RemoteNwfilterBindingDeleteArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Xdr.XdrVoid, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcNwfilterBindingDelete, arg, cancellationToken);
            await innerTask;
        }
        
        public async Task<Tuple<System.Collections.Generic.List<Binding.RemoteNonnullNwfilterBinding>, uint>> ConnectListAllNwfilterBindingsAsync(int needResults, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteConnectListAllNwfilterBindingsArgs();
            innerReq.NeedResults = needResults;
            innerReq.Flags = flags;
            var innerTask = this.ConnectListAllNwfilterBindingsWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerBindings = innerRes.Bindings;
            var innerRet = innerRes.Ret;
            return new Tuple<System.Collections.Generic.List<Binding.RemoteNonnullNwfilterBinding>, uint>(innerBindings, innerRet);
        }
        
        public async Task<Binding.RemoteConnectListAllNwfilterBindingsRet> ConnectListAllNwfilterBindingsWrappedAsync(Binding.RemoteConnectListAllNwfilterBindingsArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteConnectListAllNwfilterBindingsRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcConnectListAllNwfilterBindings, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task DomainSetIothreadParamsAsync(Binding.RemoteNonnullDomain dom, uint iothreadId, System.Collections.Generic.List<Binding.RemoteTypedParam> @params, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainSetIothreadParamsArgs();
            innerReq.Dom = dom;
            innerReq.IothreadId = iothreadId;
            innerReq.Params = @params;
            innerReq.Flags = flags;
            var innerTask = this.DomainSetIothreadParamsWrappedAsync(innerReq, cancellationToken);
            await innerTask;
        }
        
        public async Task DomainSetIothreadParamsWrappedAsync(Binding.RemoteDomainSetIothreadParamsArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Xdr.XdrVoid, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainSetIothreadParams, arg, cancellationToken);
            await innerTask;
        }
        
        public async Task<string> ConnectGetStoragePoolCapabilitiesAsync(uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteConnectGetStoragePoolCapabilitiesArgs();
            innerReq.Flags = flags;
            var innerTask = this.ConnectGetStoragePoolCapabilitiesWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerCapabilities = innerRes.Capabilities;
            return innerCapabilities;
        }
        
        public async Task<Binding.RemoteConnectGetStoragePoolCapabilitiesRet> ConnectGetStoragePoolCapabilitiesWrappedAsync(Binding.RemoteConnectGetStoragePoolCapabilitiesArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteConnectGetStoragePoolCapabilitiesRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcConnectGetStoragePoolCapabilities, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<Tuple<System.Collections.Generic.List<Binding.RemoteNonnullNetworkPort>, uint>> NetworkListAllPortsAsync(Binding.RemoteNonnullNetwork network, int needResults, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteNetworkListAllPortsArgs();
            innerReq.Network = network;
            innerReq.NeedResults = needResults;
            innerReq.Flags = flags;
            var innerTask = this.NetworkListAllPortsWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerPorts = innerRes.Ports;
            var innerRet = innerRes.Ret;
            return new Tuple<System.Collections.Generic.List<Binding.RemoteNonnullNetworkPort>, uint>(innerPorts, innerRet);
        }
        
        public async Task<Binding.RemoteNetworkListAllPortsRet> NetworkListAllPortsWrappedAsync(Binding.RemoteNetworkListAllPortsArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteNetworkListAllPortsRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcNetworkListAllPorts, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<Binding.RemoteNonnullNetworkPort> NetworkPortLookupByUuidAsync(Binding.RemoteNonnullNetwork network, byte[] uuid, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteNetworkPortLookupByUuidArgs();
            innerReq.Network = network;
            innerReq.Uuid = uuid;
            var innerTask = this.NetworkPortLookupByUuidWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerPort = innerRes.Port;
            return innerPort;
        }
        
        public async Task<Binding.RemoteNetworkPortLookupByUuidRet> NetworkPortLookupByUuidWrappedAsync(Binding.RemoteNetworkPortLookupByUuidArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteNetworkPortLookupByUuidRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcNetworkPortLookupByUuid, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<Binding.RemoteNonnullNetworkPort> NetworkPortCreateXmlAsync(Binding.RemoteNonnullNetwork network, string xml, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteNetworkPortCreateXmlArgs();
            innerReq.Network = network;
            innerReq.Xml = xml;
            innerReq.Flags = flags;
            var innerTask = this.NetworkPortCreateXmlWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerPort = innerRes.Port;
            return innerPort;
        }
        
        public async Task<Binding.RemoteNetworkPortCreateXmlRet> NetworkPortCreateXmlWrappedAsync(Binding.RemoteNetworkPortCreateXmlArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteNetworkPortCreateXmlRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcNetworkPortCreateXml, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<Tuple<System.Collections.Generic.List<Binding.RemoteTypedParam>, int>> NetworkPortGetParametersAsync(Binding.RemoteNonnullNetworkPort port, int nparams, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteNetworkPortGetParametersArgs();
            innerReq.Port = port;
            innerReq.Nparams = nparams;
            innerReq.Flags = flags;
            var innerTask = this.NetworkPortGetParametersWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerParams = innerRes.Params;
            var innerNparams = innerRes.Nparams;
            return new Tuple<System.Collections.Generic.List<Binding.RemoteTypedParam>, int>(innerParams, innerNparams);
        }
        
        public async Task<Binding.RemoteNetworkPortGetParametersRet> NetworkPortGetParametersWrappedAsync(Binding.RemoteNetworkPortGetParametersArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteNetworkPortGetParametersRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcNetworkPortGetParameters, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task NetworkPortSetParametersAsync(Binding.RemoteNonnullNetworkPort port, System.Collections.Generic.List<Binding.RemoteTypedParam> @params, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteNetworkPortSetParametersArgs();
            innerReq.Port = port;
            innerReq.Params = @params;
            innerReq.Flags = flags;
            var innerTask = this.NetworkPortSetParametersWrappedAsync(innerReq, cancellationToken);
            await innerTask;
        }
        
        public async Task NetworkPortSetParametersWrappedAsync(Binding.RemoteNetworkPortSetParametersArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Xdr.XdrVoid, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcNetworkPortSetParameters, arg, cancellationToken);
            await innerTask;
        }
        
        public async Task<string> NetworkPortGetXmlDescAsync(Binding.RemoteNonnullNetworkPort port, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteNetworkPortGetXmlDescArgs();
            innerReq.Port = port;
            innerReq.Flags = flags;
            var innerTask = this.NetworkPortGetXmlDescWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerXml = innerRes.Xml;
            return innerXml;
        }
        
        public async Task<Binding.RemoteNetworkPortGetXmlDescRet> NetworkPortGetXmlDescWrappedAsync(Binding.RemoteNetworkPortGetXmlDescArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteNetworkPortGetXmlDescRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcNetworkPortGetXmlDesc, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task NetworkPortDeleteAsync(Binding.RemoteNonnullNetworkPort port, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteNetworkPortDeleteArgs();
            innerReq.Port = port;
            innerReq.Flags = flags;
            var innerTask = this.NetworkPortDeleteWrappedAsync(innerReq, cancellationToken);
            await innerTask;
        }
        
        public async Task NetworkPortDeleteWrappedAsync(Binding.RemoteNetworkPortDeleteArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Xdr.XdrVoid, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcNetworkPortDelete, arg, cancellationToken);
            await innerTask;
        }
        
        public async Task<Binding.RemoteNonnullDomainCheckpoint> DomainCheckpointCreateXmlAsync(Binding.RemoteNonnullDomain dom, string xmlDesc, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainCheckpointCreateXmlArgs();
            innerReq.Dom = dom;
            innerReq.XmlDesc = xmlDesc;
            innerReq.Flags = flags;
            var innerTask = this.DomainCheckpointCreateXmlWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerCheckpoint = innerRes.Checkpoint;
            return innerCheckpoint;
        }
        
        public async Task<Binding.RemoteDomainCheckpointCreateXmlRet> DomainCheckpointCreateXmlWrappedAsync(Binding.RemoteDomainCheckpointCreateXmlArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteDomainCheckpointCreateXmlRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainCheckpointCreateXml, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<string> DomainCheckpointGetXmlDescAsync(Binding.RemoteNonnullDomainCheckpoint checkpoint, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainCheckpointGetXmlDescArgs();
            innerReq.Checkpoint = checkpoint;
            innerReq.Flags = flags;
            var innerTask = this.DomainCheckpointGetXmlDescWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerXml = innerRes.Xml;
            return innerXml;
        }
        
        public async Task<Binding.RemoteDomainCheckpointGetXmlDescRet> DomainCheckpointGetXmlDescWrappedAsync(Binding.RemoteDomainCheckpointGetXmlDescArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteDomainCheckpointGetXmlDescRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainCheckpointGetXmlDesc, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<Tuple<System.Collections.Generic.List<Binding.RemoteNonnullDomainCheckpoint>, int>> DomainListAllCheckpointsAsync(Binding.RemoteNonnullDomain dom, int needResults, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainListAllCheckpointsArgs();
            innerReq.Dom = dom;
            innerReq.NeedResults = needResults;
            innerReq.Flags = flags;
            var innerTask = this.DomainListAllCheckpointsWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerCheckpoints = innerRes.Checkpoints;
            var innerRet = innerRes.Ret;
            return new Tuple<System.Collections.Generic.List<Binding.RemoteNonnullDomainCheckpoint>, int>(innerCheckpoints, innerRet);
        }
        
        public async Task<Binding.RemoteDomainListAllCheckpointsRet> DomainListAllCheckpointsWrappedAsync(Binding.RemoteDomainListAllCheckpointsArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteDomainListAllCheckpointsRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainListAllCheckpoints, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<Tuple<System.Collections.Generic.List<Binding.RemoteNonnullDomainCheckpoint>, int>> DomainCheckpointListAllChildrenAsync(Binding.RemoteNonnullDomainCheckpoint checkpoint, int needResults, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainCheckpointListAllChildrenArgs();
            innerReq.Checkpoint = checkpoint;
            innerReq.NeedResults = needResults;
            innerReq.Flags = flags;
            var innerTask = this.DomainCheckpointListAllChildrenWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerCheckpoints = innerRes.Checkpoints;
            var innerRet = innerRes.Ret;
            return new Tuple<System.Collections.Generic.List<Binding.RemoteNonnullDomainCheckpoint>, int>(innerCheckpoints, innerRet);
        }
        
        public async Task<Binding.RemoteDomainCheckpointListAllChildrenRet> DomainCheckpointListAllChildrenWrappedAsync(Binding.RemoteDomainCheckpointListAllChildrenArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteDomainCheckpointListAllChildrenRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainCheckpointListAllChildren, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<Binding.RemoteNonnullDomainCheckpoint> DomainCheckpointLookupByNameAsync(Binding.RemoteNonnullDomain dom, string name, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainCheckpointLookupByNameArgs();
            innerReq.Dom = dom;
            innerReq.Name = name;
            innerReq.Flags = flags;
            var innerTask = this.DomainCheckpointLookupByNameWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerCheckpoint = innerRes.Checkpoint;
            return innerCheckpoint;
        }
        
        public async Task<Binding.RemoteDomainCheckpointLookupByNameRet> DomainCheckpointLookupByNameWrappedAsync(Binding.RemoteDomainCheckpointLookupByNameArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteDomainCheckpointLookupByNameRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainCheckpointLookupByName, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<Binding.RemoteNonnullDomainCheckpoint> DomainCheckpointGetParentAsync(Binding.RemoteNonnullDomainCheckpoint checkpoint, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainCheckpointGetParentArgs();
            innerReq.Checkpoint = checkpoint;
            innerReq.Flags = flags;
            var innerTask = this.DomainCheckpointGetParentWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerParent = innerRes.Parent;
            return innerParent;
        }
        
        public async Task<Binding.RemoteDomainCheckpointGetParentRet> DomainCheckpointGetParentWrappedAsync(Binding.RemoteDomainCheckpointGetParentArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteDomainCheckpointGetParentRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainCheckpointGetParent, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task DomainCheckpointDeleteAsync(Binding.RemoteNonnullDomainCheckpoint checkpoint, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainCheckpointDeleteArgs();
            innerReq.Checkpoint = checkpoint;
            innerReq.Flags = flags;
            var innerTask = this.DomainCheckpointDeleteWrappedAsync(innerReq, cancellationToken);
            await innerTask;
        }
        
        public async Task DomainCheckpointDeleteWrappedAsync(Binding.RemoteDomainCheckpointDeleteArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Xdr.XdrVoid, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainCheckpointDelete, arg, cancellationToken);
            await innerTask;
        }
        
        public async Task<System.Collections.Generic.List<Binding.RemoteTypedParam>> DomainGetGuestInfoAsync(Binding.RemoteNonnullDomain dom, uint types, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainGetGuestInfoArgs();
            innerReq.Dom = dom;
            innerReq.Types = types;
            innerReq.Flags = flags;
            var innerTask = this.DomainGetGuestInfoWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerParams = innerRes.Params;
            return innerParams;
        }
        
        public async Task<Binding.RemoteDomainGetGuestInfoRet> DomainGetGuestInfoWrappedAsync(Binding.RemoteDomainGetGuestInfoArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteDomainGetGuestInfoRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainGetGuestInfo, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task ConnectSetIdentityAsync(System.Collections.Generic.List<Binding.RemoteTypedParam> @params, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteConnectSetIdentityArgs();
            innerReq.Params = @params;
            innerReq.Flags = flags;
            var innerTask = this.ConnectSetIdentityWrappedAsync(innerReq, cancellationToken);
            await innerTask;
        }
        
        public async Task ConnectSetIdentityWrappedAsync(Binding.RemoteConnectSetIdentityArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Xdr.XdrVoid, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcConnectSetIdentity, arg, cancellationToken);
            await innerTask;
        }
        
        public async Task<int> DomainAgentSetResponseTimeoutAsync(Binding.RemoteNonnullDomain dom, int timeout, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainAgentSetResponseTimeoutArgs();
            innerReq.Dom = dom;
            innerReq.Timeout = timeout;
            innerReq.Flags = flags;
            var innerTask = this.DomainAgentSetResponseTimeoutWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerResult = innerRes.Result;
            return innerResult;
        }
        
        public async Task<Binding.RemoteDomainAgentSetResponseTimeoutRet> DomainAgentSetResponseTimeoutWrappedAsync(Binding.RemoteDomainAgentSetResponseTimeoutArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteDomainAgentSetResponseTimeoutRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainAgentSetResponseTimeout, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task DomainBackupBeginAsync(Binding.RemoteNonnullDomain dom, string backupXml, Xdr.XdrOption<string> checkpointXml, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainBackupBeginArgs();
            innerReq.Dom = dom;
            innerReq.BackupXml = backupXml;
            innerReq.CheckpointXml = checkpointXml;
            innerReq.Flags = flags;
            var innerTask = this.DomainBackupBeginWrappedAsync(innerReq, cancellationToken);
            await innerTask;
        }
        
        public async Task DomainBackupBeginWrappedAsync(Binding.RemoteDomainBackupBeginArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Xdr.XdrVoid, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainBackupBegin, arg, cancellationToken);
            await innerTask;
        }
        
        public async Task<string> DomainBackupGetXmlDescAsync(Binding.RemoteNonnullDomain dom, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainBackupGetXmlDescArgs();
            innerReq.Dom = dom;
            innerReq.Flags = flags;
            var innerTask = this.DomainBackupGetXmlDescWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerXml = innerRes.Xml;
            return innerXml;
        }
        
        public async Task<Binding.RemoteDomainBackupGetXmlDescRet> DomainBackupGetXmlDescWrappedAsync(Binding.RemoteDomainBackupGetXmlDescArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteDomainBackupGetXmlDescRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainBackupGetXmlDesc, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<string> DomainAuthorizedSshKeysGetAsync(Binding.RemoteNonnullDomain dom, string user, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainAuthorizedSshKeysGetArgs();
            innerReq.Dom = dom;
            innerReq.User = user;
            innerReq.Flags = flags;
            var innerTask = this.DomainAuthorizedSshKeysGetWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerKeys = innerRes.Keys;
            return innerKeys;
        }
        
        public async Task<Binding.RemoteDomainAuthorizedSshKeysGetRet> DomainAuthorizedSshKeysGetWrappedAsync(Binding.RemoteDomainAuthorizedSshKeysGetArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteDomainAuthorizedSshKeysGetRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainAuthorizedSshKeysGet, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task DomainAuthorizedSshKeysSetAsync(Binding.RemoteNonnullDomain dom, string user, string keys, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainAuthorizedSshKeysSetArgs();
            innerReq.Dom = dom;
            innerReq.User = user;
            innerReq.Keys = keys;
            innerReq.Flags = flags;
            var innerTask = this.DomainAuthorizedSshKeysSetWrappedAsync(innerReq, cancellationToken);
            await innerTask;
        }
        
        public async Task DomainAuthorizedSshKeysSetWrappedAsync(Binding.RemoteDomainAuthorizedSshKeysSetArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Xdr.XdrVoid, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainAuthorizedSshKeysSet, arg, cancellationToken);
            await innerTask;
        }
        
        public async Task<string> DomainGetMessagesAsync(Binding.RemoteNonnullDomain dom, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainGetMessagesArgs();
            innerReq.Dom = dom;
            innerReq.Flags = flags;
            var innerTask = this.DomainGetMessagesWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerMsgs = innerRes.Msgs;
            return innerMsgs;
        }
        
        public async Task<Binding.RemoteDomainGetMessagesRet> DomainGetMessagesWrappedAsync(Binding.RemoteDomainGetMessagesArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteDomainGetMessagesRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainGetMessages, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task DomainStartDirtyRateCalcAsync(Binding.RemoteNonnullDomain dom, int seconds, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainStartDirtyRateCalcArgs();
            innerReq.Dom = dom;
            innerReq.Seconds = seconds;
            innerReq.Flags = flags;
            var innerTask = this.DomainStartDirtyRateCalcWrappedAsync(innerReq, cancellationToken);
            await innerTask;
        }
        
        public async Task DomainStartDirtyRateCalcWrappedAsync(Binding.RemoteDomainStartDirtyRateCalcArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Xdr.XdrVoid, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainStartDirtyRateCalc, arg, cancellationToken);
            await innerTask;
        }
        
        public async Task<Binding.RemoteNonnullNodeDevice> NodeDeviceDefineXmlAsync(string xmlDesc, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteNodeDeviceDefineXmlArgs();
            innerReq.XmlDesc = xmlDesc;
            innerReq.Flags = flags;
            var innerTask = this.NodeDeviceDefineXmlWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerDev = innerRes.Dev;
            return innerDev;
        }
        
        public async Task<Binding.RemoteNodeDeviceDefineXmlRet> NodeDeviceDefineXmlWrappedAsync(Binding.RemoteNodeDeviceDefineXmlArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteNodeDeviceDefineXmlRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcNodeDeviceDefineXml, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task NodeDeviceUndefineAsync(string name, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteNodeDeviceUndefineArgs();
            innerReq.Name = name;
            innerReq.Flags = flags;
            var innerTask = this.NodeDeviceUndefineWrappedAsync(innerReq, cancellationToken);
            await innerTask;
        }
        
        public async Task NodeDeviceUndefineWrappedAsync(Binding.RemoteNodeDeviceUndefineArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Xdr.XdrVoid, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcNodeDeviceUndefine, arg, cancellationToken);
            await innerTask;
        }
        
        public async Task NodeDeviceCreateAsync(string name, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteNodeDeviceCreateArgs();
            innerReq.Name = name;
            innerReq.Flags = flags;
            var innerTask = this.NodeDeviceCreateWrappedAsync(innerReq, cancellationToken);
            await innerTask;
        }
        
        public async Task NodeDeviceCreateWrappedAsync(Binding.RemoteNodeDeviceCreateArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Xdr.XdrVoid, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcNodeDeviceCreate, arg, cancellationToken);
            await innerTask;
        }
        
        public async Task<Binding.RemoteNonnullNwfilter> NwfilterDefineXmlFlagsAsync(string xml, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteNwfilterDefineXmlFlagsArgs();
            innerReq.Xml = xml;
            innerReq.Flags = flags;
            var innerTask = this.NwfilterDefineXmlFlagsWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerNwfilter = innerRes.Nwfilter;
            return innerNwfilter;
        }
        
        public async Task<Binding.RemoteNwfilterDefineXmlFlagsRet> NwfilterDefineXmlFlagsWrappedAsync(Binding.RemoteNwfilterDefineXmlFlagsArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteNwfilterDefineXmlFlagsRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcNwfilterDefineXmlFlags, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<Binding.RemoteNonnullNetwork> NetworkDefineXmlFlagsAsync(string xml, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteNetworkDefineXmlFlagsArgs();
            innerReq.Xml = xml;
            innerReq.Flags = flags;
            var innerTask = this.NetworkDefineXmlFlagsWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerNet = innerRes.Net;
            return innerNet;
        }
        
        public async Task<Binding.RemoteNetworkDefineXmlFlagsRet> NetworkDefineXmlFlagsWrappedAsync(Binding.RemoteNetworkDefineXmlFlagsArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteNetworkDefineXmlFlagsRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcNetworkDefineXmlFlags, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<int> NodeDeviceGetAutostartAsync(string name, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteNodeDeviceGetAutostartArgs();
            innerReq.Name = name;
            var innerTask = this.NodeDeviceGetAutostartWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerAutostart = innerRes.Autostart;
            return innerAutostart;
        }
        
        public async Task<Binding.RemoteNodeDeviceGetAutostartRet> NodeDeviceGetAutostartWrappedAsync(Binding.RemoteNodeDeviceGetAutostartArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteNodeDeviceGetAutostartRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcNodeDeviceGetAutostart, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task NodeDeviceSetAutostartAsync(string name, int autostart, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteNodeDeviceSetAutostartArgs();
            innerReq.Name = name;
            innerReq.Autostart = autostart;
            var innerTask = this.NodeDeviceSetAutostartWrappedAsync(innerReq, cancellationToken);
            await innerTask;
        }
        
        public async Task NodeDeviceSetAutostartWrappedAsync(Binding.RemoteNodeDeviceSetAutostartArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Xdr.XdrVoid, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcNodeDeviceSetAutostart, arg, cancellationToken);
            await innerTask;
        }
        
        public async Task<int> NodeDeviceIsPersistentAsync(string name, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteNodeDeviceIsPersistentArgs();
            innerReq.Name = name;
            var innerTask = this.NodeDeviceIsPersistentWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerPersistent = innerRes.Persistent;
            return innerPersistent;
        }
        
        public async Task<Binding.RemoteNodeDeviceIsPersistentRet> NodeDeviceIsPersistentWrappedAsync(Binding.RemoteNodeDeviceIsPersistentArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteNodeDeviceIsPersistentRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcNodeDeviceIsPersistent, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<int> NodeDeviceIsActiveAsync(string name, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteNodeDeviceIsActiveArgs();
            innerReq.Name = name;
            var innerTask = this.NodeDeviceIsActiveWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerActive = innerRes.Active;
            return innerActive;
        }
        
        public async Task<Binding.RemoteNodeDeviceIsActiveRet> NodeDeviceIsActiveWrappedAsync(Binding.RemoteNodeDeviceIsActiveArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteNodeDeviceIsActiveRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcNodeDeviceIsActive, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task<Binding.RemoteNonnullNetwork> NetworkCreateXmlFlagsAsync(string xml, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteNetworkCreateXmlFlagsArgs();
            innerReq.Xml = xml;
            innerReq.Flags = flags;
            var innerTask = this.NetworkCreateXmlFlagsWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerNet = innerRes.Net;
            return innerNet;
        }
        
        public async Task<Binding.RemoteNetworkCreateXmlFlagsRet> NetworkCreateXmlFlagsWrappedAsync(Binding.RemoteNetworkCreateXmlFlagsArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteNetworkCreateXmlFlagsRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcNetworkCreateXmlFlags, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task DomainSetLaunchSecurityStateAsync(Binding.RemoteNonnullDomain dom, System.Collections.Generic.List<Binding.RemoteTypedParam> @params, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainSetLaunchSecurityStateArgs();
            innerReq.Dom = dom;
            innerReq.Params = @params;
            innerReq.Flags = flags;
            var innerTask = this.DomainSetLaunchSecurityStateWrappedAsync(innerReq, cancellationToken);
            await innerTask;
        }
        
        public async Task DomainSetLaunchSecurityStateWrappedAsync(Binding.RemoteDomainSetLaunchSecurityStateArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Xdr.XdrVoid, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainSetLaunchSecurityState, arg, cancellationToken);
            await innerTask;
        }
        
        public async Task DomainSaveParamsAsync(Binding.RemoteNonnullDomain dom, System.Collections.Generic.List<Binding.RemoteTypedParam> @params, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainSaveParamsArgs();
            innerReq.Dom = dom;
            innerReq.Params = @params;
            innerReq.Flags = flags;
            var innerTask = this.DomainSaveParamsWrappedAsync(innerReq, cancellationToken);
            await innerTask;
        }
        
        public async Task DomainSaveParamsWrappedAsync(Binding.RemoteDomainSaveParamsArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Xdr.XdrVoid, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainSaveParams, arg, cancellationToken);
            await innerTask;
        }
        
        public async Task DomainRestoreParamsAsync(System.Collections.Generic.List<Binding.RemoteTypedParam> @params, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainRestoreParamsArgs();
            innerReq.Params = @params;
            innerReq.Flags = flags;
            var innerTask = this.DomainRestoreParamsWrappedAsync(innerReq, cancellationToken);
            await innerTask;
        }
        
        public async Task DomainRestoreParamsWrappedAsync(Binding.RemoteDomainRestoreParamsArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Xdr.XdrVoid, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainRestoreParams, arg, cancellationToken);
            await innerTask;
        }
        
        public async Task DomainAbortJobFlagsAsync(Binding.RemoteNonnullDomain dom, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainAbortJobFlagsArgs();
            innerReq.Dom = dom;
            innerReq.Flags = flags;
            var innerTask = this.DomainAbortJobFlagsWrappedAsync(innerReq, cancellationToken);
            await innerTask;
        }
        
        public async Task DomainAbortJobFlagsWrappedAsync(Binding.RemoteDomainAbortJobFlagsArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Xdr.XdrVoid, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainAbortJobFlags, arg, cancellationToken);
            await innerTask;
        }
        
        public async Task DomainFdAssociateAsync(Binding.RemoteNonnullDomain dom, string name, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainFdAssociateArgs();
            innerReq.Dom = dom;
            innerReq.Name = name;
            innerReq.Flags = flags;
            var innerTask = this.DomainFdAssociateWrappedAsync(innerReq, cancellationToken);
            await innerTask;
        }
        
        public async Task DomainFdAssociateWrappedAsync(Binding.RemoteDomainFdAssociateArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Xdr.XdrVoid, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainFdAssociate, arg, cancellationToken);
            await innerTask;
        }
        
        public async Task NetworkSetMetadataAsync(Binding.RemoteNonnullNetwork network, int type, Xdr.XdrOption<string> metadata, Xdr.XdrOption<string> key, Xdr.XdrOption<string> uri, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteNetworkSetMetadataArgs();
            innerReq.Network = network;
            innerReq.Type = type;
            innerReq.Metadata = metadata;
            innerReq.Key = key;
            innerReq.Uri = uri;
            innerReq.Flags = flags;
            var innerTask = this.NetworkSetMetadataWrappedAsync(innerReq, cancellationToken);
            await innerTask;
        }
        
        public async Task NetworkSetMetadataWrappedAsync(Binding.RemoteNetworkSetMetadataArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Xdr.XdrVoid, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcNetworkSetMetadata, arg, cancellationToken);
            await innerTask;
        }
        
        public async Task<string> NetworkGetMetadataAsync(Binding.RemoteNonnullNetwork network, int type, Xdr.XdrOption<string> uri, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteNetworkGetMetadataArgs();
            innerReq.Network = network;
            innerReq.Type = type;
            innerReq.Uri = uri;
            innerReq.Flags = flags;
            var innerTask = this.NetworkGetMetadataWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerMetadata = innerRes.Metadata;
            return innerMetadata;
        }
        
        public async Task<Binding.RemoteNetworkGetMetadataRet> NetworkGetMetadataWrappedAsync(Binding.RemoteNetworkGetMetadataArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteNetworkGetMetadataRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcNetworkGetMetadata, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task NodeDeviceUpdateAsync(string name, string xmlDesc, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteNodeDeviceUpdateArgs();
            innerReq.Name = name;
            innerReq.XmlDesc = xmlDesc;
            innerReq.Flags = flags;
            var innerTask = this.NodeDeviceUpdateWrappedAsync(innerReq, cancellationToken);
            await innerTask;
        }
        
        public async Task NodeDeviceUpdateWrappedAsync(Binding.RemoteNodeDeviceUpdateArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Xdr.XdrVoid, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcNodeDeviceUpdate, arg, cancellationToken);
            await innerTask;
        }
        
        public async Task DomainGraphicsReloadAsync(Binding.RemoteNonnullDomain dom, uint type, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainGraphicsReloadArgs();
            innerReq.Dom = dom;
            innerReq.Type = type;
            innerReq.Flags = flags;
            var innerTask = this.DomainGraphicsReloadWrappedAsync(innerReq, cancellationToken);
            await innerTask;
        }
        
        public async Task DomainGraphicsReloadWrappedAsync(Binding.RemoteDomainGraphicsReloadArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Xdr.XdrVoid, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainGraphicsReload, arg, cancellationToken);
            await innerTask;
        }
        
        public async Task<int> DomainGetAutostartOnceAsync(Binding.RemoteNonnullDomain dom, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainGetAutostartOnceArgs();
            innerReq.Dom = dom;
            var innerTask = this.DomainGetAutostartOnceWrappedAsync(innerReq, cancellationToken);
            var innerRes = await innerTask;
            var innerAutostart = innerRes.Autostart;
            return innerAutostart;
        }
        
        public async Task<Binding.RemoteDomainGetAutostartOnceRet> DomainGetAutostartOnceWrappedAsync(Binding.RemoteDomainGetAutostartOnceArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Binding.RemoteDomainGetAutostartOnceRet, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainGetAutostartOnce, arg, cancellationToken);
            var innerRes = await innerTask;
            return innerRes;
        }
        
        public async Task DomainSetAutostartOnceAsync(Binding.RemoteNonnullDomain dom, int autostart, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainSetAutostartOnceArgs();
            innerReq.Dom = dom;
            innerReq.Autostart = autostart;
            var innerTask = this.DomainSetAutostartOnceWrappedAsync(innerReq, cancellationToken);
            await innerTask;
        }
        
        public async Task DomainSetAutostartOnceWrappedAsync(Binding.RemoteDomainSetAutostartOnceArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Xdr.XdrVoid, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainSetAutostartOnce, arg, cancellationToken);
            await innerTask;
        }
        
        public async Task DomainSetThrottleGroupAsync(Binding.RemoteNonnullDomain dom, string group, System.Collections.Generic.List<Binding.RemoteTypedParam> @params, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainSetThrottleGroupArgs();
            innerReq.Dom = dom;
            innerReq.Group = group;
            innerReq.Params = @params;
            innerReq.Flags = flags;
            var innerTask = this.DomainSetThrottleGroupWrappedAsync(innerReq, cancellationToken);
            await innerTask;
        }
        
        public async Task DomainSetThrottleGroupWrappedAsync(Binding.RemoteDomainSetThrottleGroupArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Xdr.XdrVoid, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainSetThrottleGroup, arg, cancellationToken);
            await innerTask;
        }
        
        public async Task DomainDelThrottleGroupAsync(Binding.RemoteNonnullDomain dom, Xdr.XdrOption<string> group, uint flags, System.Threading.CancellationToken cancellationToken) {
            var innerReq = new Binding.RemoteDomainDelThrottleGroupArgs();
            innerReq.Dom = dom;
            innerReq.Group = group;
            innerReq.Flags = flags;
            var innerTask = this.DomainDelThrottleGroupWrappedAsync(innerReq, cancellationToken);
            await innerTask;
        }
        
        public async Task DomainDelThrottleGroupWrappedAsync(Binding.RemoteDomainDelThrottleGroupArgs arg, System.Threading.CancellationToken cancellationToken) {
            var innerTask = this.CallAsync<Xdr.XdrVoid, Binding.RemoteProcedure>(Binding.RemoteProcedure.RemoteProcDomainDelThrottleGroup, arg, cancellationToken);
            await innerTask;
        }
    }
}
